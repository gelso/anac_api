# coding: utf-8

"""
    Specifiche Servizi Appalto - OpenAPI 3.0

    Sono descritte le specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ufficio.uscp@anticorruzione.it
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ParitaDiGenereGenerazionaleType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'deroga_aq': 'bool',
        'quota30_per_cento': 'str',
        'quota_inferiore_occup_femminile': 'float',
        'quota_inferiore_occup_giovanile': 'float',
        'motivo_deroga': 'list[MotivoDerogaEnum]',
        'misure_premiali': 'list[MisurePremialiEnum]'
    }

    attribute_map = {
        'deroga_aq': 'derogaAQ',
        'quota30_per_cento': 'quota30PerCento',
        'quota_inferiore_occup_femminile': 'quotaInferioreOccupFemminile',
        'quota_inferiore_occup_giovanile': 'quotaInferioreOccupGiovanile',
        'motivo_deroga': 'motivoDeroga',
        'misure_premiali': 'misurePremiali'
    }

    def __init__(self, deroga_aq=None, quota30_per_cento=None, quota_inferiore_occup_femminile=None, quota_inferiore_occup_giovanile=None, motivo_deroga=None, misure_premiali=None):  # noqa: E501
        """ParitaDiGenereGenerazionaleType - a model defined in Swagger"""  # noqa: E501
        self._deroga_aq = None
        self._quota30_per_cento = None
        self._quota_inferiore_occup_femminile = None
        self._quota_inferiore_occup_giovanile = None
        self._motivo_deroga = None
        self._misure_premiali = None
        self.discriminator = None
        if deroga_aq is not None:
            self.deroga_aq = deroga_aq
        if quota30_per_cento is not None:
            self.quota30_per_cento = quota30_per_cento
        if quota_inferiore_occup_femminile is not None:
            self.quota_inferiore_occup_femminile = quota_inferiore_occup_femminile
        if quota_inferiore_occup_giovanile is not None:
            self.quota_inferiore_occup_giovanile = quota_inferiore_occup_giovanile
        if motivo_deroga is not None:
            self.motivo_deroga = motivo_deroga
        if misure_premiali is not None:
            self.misure_premiali = misure_premiali

    @property
    def deroga_aq(self):
        """Gets the deroga_aq of this ParitaDiGenereGenerazionaleType.  # noqa: E501

        Deroga per adesione ad AQ/Convenzione precedente alle linee guida DPO sull’articolo 47 del DL 77/2021 e ss.m.i.?  # noqa: E501

        :return: The deroga_aq of this ParitaDiGenereGenerazionaleType.  # noqa: E501
        :rtype: bool
        """
        return self._deroga_aq

    @deroga_aq.setter
    def deroga_aq(self, deroga_aq):
        """Sets the deroga_aq of this ParitaDiGenereGenerazionaleType.

        Deroga per adesione ad AQ/Convenzione precedente alle linee guida DPO sull’articolo 47 del DL 77/2021 e ss.m.i.?  # noqa: E501

        :param deroga_aq: The deroga_aq of this ParitaDiGenereGenerazionaleType.  # noqa: E501
        :type: bool
        """

        self._deroga_aq = deroga_aq

    @property
    def quota30_per_cento(self):
        """Gets the quota30_per_cento of this ParitaDiGenereGenerazionaleType.  # noqa: E501

        Previsione nel bando di gara, nell’avviso o nell’invito, dell’obbligo di assicurare, in caso di aggiudicazione del contratto, una quota pari almeno al 30 per cento, delle assunzioni necessarie per l'esecuzione del contratto o per la realizzazione di attività ad esso connesse o strumentali, sia all'occupazione giovanile sia all'occupazione femminile (articolo 47, comma 4, D.L. 77/2021)? Valori ammessi - SI/NO/SI quota inferiore  # noqa: E501

        :return: The quota30_per_cento of this ParitaDiGenereGenerazionaleType.  # noqa: E501
        :rtype: str
        """
        return self._quota30_per_cento

    @quota30_per_cento.setter
    def quota30_per_cento(self, quota30_per_cento):
        """Sets the quota30_per_cento of this ParitaDiGenereGenerazionaleType.

        Previsione nel bando di gara, nell’avviso o nell’invito, dell’obbligo di assicurare, in caso di aggiudicazione del contratto, una quota pari almeno al 30 per cento, delle assunzioni necessarie per l'esecuzione del contratto o per la realizzazione di attività ad esso connesse o strumentali, sia all'occupazione giovanile sia all'occupazione femminile (articolo 47, comma 4, D.L. 77/2021)? Valori ammessi - SI/NO/SI quota inferiore  # noqa: E501

        :param quota30_per_cento: The quota30_per_cento of this ParitaDiGenereGenerazionaleType.  # noqa: E501
        :type: str
        """
        allowed_values = ["SI", "NO", "SI QUOTA INFERIORE"]  # noqa: E501
        if quota30_per_cento not in allowed_values:
            raise ValueError(
                "Invalid value for `quota30_per_cento` ({0}), must be one of {1}"  # noqa: E501
                .format(quota30_per_cento, allowed_values)
            )

        self._quota30_per_cento = quota30_per_cento

    @property
    def quota_inferiore_occup_femminile(self):
        """Gets the quota_inferiore_occup_femminile of this ParitaDiGenereGenerazionaleType.  # noqa: E501

        Previsione di una quota inferiore con riferimento all’occupazione femminile  # noqa: E501

        :return: The quota_inferiore_occup_femminile of this ParitaDiGenereGenerazionaleType.  # noqa: E501
        :rtype: float
        """
        return self._quota_inferiore_occup_femminile

    @quota_inferiore_occup_femminile.setter
    def quota_inferiore_occup_femminile(self, quota_inferiore_occup_femminile):
        """Sets the quota_inferiore_occup_femminile of this ParitaDiGenereGenerazionaleType.

        Previsione di una quota inferiore con riferimento all’occupazione femminile  # noqa: E501

        :param quota_inferiore_occup_femminile: The quota_inferiore_occup_femminile of this ParitaDiGenereGenerazionaleType.  # noqa: E501
        :type: float
        """

        self._quota_inferiore_occup_femminile = quota_inferiore_occup_femminile

    @property
    def quota_inferiore_occup_giovanile(self):
        """Gets the quota_inferiore_occup_giovanile of this ParitaDiGenereGenerazionaleType.  # noqa: E501

        Previsione di una quota inferiore con riferimento all’occupazione giovanile  # noqa: E501

        :return: The quota_inferiore_occup_giovanile of this ParitaDiGenereGenerazionaleType.  # noqa: E501
        :rtype: float
        """
        return self._quota_inferiore_occup_giovanile

    @quota_inferiore_occup_giovanile.setter
    def quota_inferiore_occup_giovanile(self, quota_inferiore_occup_giovanile):
        """Sets the quota_inferiore_occup_giovanile of this ParitaDiGenereGenerazionaleType.

        Previsione di una quota inferiore con riferimento all’occupazione giovanile  # noqa: E501

        :param quota_inferiore_occup_giovanile: The quota_inferiore_occup_giovanile of this ParitaDiGenereGenerazionaleType.  # noqa: E501
        :type: float
        """

        self._quota_inferiore_occup_giovanile = quota_inferiore_occup_giovanile

    @property
    def motivo_deroga(self):
        """Gets the motivo_deroga of this ParitaDiGenereGenerazionaleType.  # noqa: E501


        :return: The motivo_deroga of this ParitaDiGenereGenerazionaleType.  # noqa: E501
        :rtype: list[MotivoDerogaEnum]
        """
        return self._motivo_deroga

    @motivo_deroga.setter
    def motivo_deroga(self, motivo_deroga):
        """Sets the motivo_deroga of this ParitaDiGenereGenerazionaleType.


        :param motivo_deroga: The motivo_deroga of this ParitaDiGenereGenerazionaleType.  # noqa: E501
        :type: list[MotivoDerogaEnum]
        """

        self._motivo_deroga = motivo_deroga

    @property
    def misure_premiali(self):
        """Gets the misure_premiali of this ParitaDiGenereGenerazionaleType.  # noqa: E501


        :return: The misure_premiali of this ParitaDiGenereGenerazionaleType.  # noqa: E501
        :rtype: list[MisurePremialiEnum]
        """
        return self._misure_premiali

    @misure_premiali.setter
    def misure_premiali(self, misure_premiali):
        """Sets the misure_premiali of this ParitaDiGenereGenerazionaleType.


        :param misure_premiali: The misure_premiali of this ParitaDiGenereGenerazionaleType.  # noqa: E501
        :type: list[MisurePremialiEnum]
        """

        self._misure_premiali = misure_premiali

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ParitaDiGenereGenerazionaleType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ParitaDiGenereGenerazionaleType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
