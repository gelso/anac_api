# coding: utf-8

"""
    Specifiche Servizi Appalto - OpenAPI 3.0

    Sono descritte le specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ufficio.uscp@anticorruzione.it
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SospensioneType2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_verbale_ripresa': 'datetime',
        'incidenza_cronoprogramma': 'float',
        'superato_tempo': 'bool',
        'riserve': 'bool',
        'verbale_non_sottoscritto': 'bool'
    }

    attribute_map = {
        'data_verbale_ripresa': 'dataVerbaleRipresa',
        'incidenza_cronoprogramma': 'incidenzaCronoprogramma',
        'superato_tempo': 'superatoTempo',
        'riserve': 'riserve',
        'verbale_non_sottoscritto': 'verbaleNonSottoscritto'
    }

    def __init__(self, data_verbale_ripresa=None, incidenza_cronoprogramma=None, superato_tempo=None, riserve=None, verbale_non_sottoscritto=None):  # noqa: E501
        """SospensioneType2 - a model defined in Swagger"""  # noqa: E501
        self._data_verbale_ripresa = None
        self._incidenza_cronoprogramma = None
        self._superato_tempo = None
        self._riserve = None
        self._verbale_non_sottoscritto = None
        self.discriminator = None
        if data_verbale_ripresa is not None:
            self.data_verbale_ripresa = data_verbale_ripresa
        if incidenza_cronoprogramma is not None:
            self.incidenza_cronoprogramma = incidenza_cronoprogramma
        self.superato_tempo = superato_tempo
        self.riserve = riserve
        self.verbale_non_sottoscritto = verbale_non_sottoscritto

    @property
    def data_verbale_ripresa(self):
        """Gets the data_verbale_ripresa of this SospensioneType2.  # noqa: E501

        Data del verbale di ripresa  # noqa: E501

        :return: The data_verbale_ripresa of this SospensioneType2.  # noqa: E501
        :rtype: datetime
        """
        return self._data_verbale_ripresa

    @data_verbale_ripresa.setter
    def data_verbale_ripresa(self, data_verbale_ripresa):
        """Sets the data_verbale_ripresa of this SospensioneType2.

        Data del verbale di ripresa  # noqa: E501

        :param data_verbale_ripresa: The data_verbale_ripresa of this SospensioneType2.  # noqa: E501
        :type: datetime
        """

        self._data_verbale_ripresa = data_verbale_ripresa

    @property
    def incidenza_cronoprogramma(self):
        """Gets the incidenza_cronoprogramma of this SospensioneType2.  # noqa: E501

        Incidenza sul croprogramma (nel caso di sospensione parziale)  # noqa: E501

        :return: The incidenza_cronoprogramma of this SospensioneType2.  # noqa: E501
        :rtype: float
        """
        return self._incidenza_cronoprogramma

    @incidenza_cronoprogramma.setter
    def incidenza_cronoprogramma(self, incidenza_cronoprogramma):
        """Sets the incidenza_cronoprogramma of this SospensioneType2.

        Incidenza sul croprogramma (nel caso di sospensione parziale)  # noqa: E501

        :param incidenza_cronoprogramma: The incidenza_cronoprogramma of this SospensioneType2.  # noqa: E501
        :type: float
        """

        self._incidenza_cronoprogramma = incidenza_cronoprogramma

    @property
    def superato_tempo(self):
        """Gets the superato_tempo of this SospensioneType2.  # noqa: E501

        E’ stato superato il quarto del tempo contrattuale  # noqa: E501

        :return: The superato_tempo of this SospensioneType2.  # noqa: E501
        :rtype: bool
        """
        return self._superato_tempo

    @superato_tempo.setter
    def superato_tempo(self, superato_tempo):
        """Sets the superato_tempo of this SospensioneType2.

        E’ stato superato il quarto del tempo contrattuale  # noqa: E501

        :param superato_tempo: The superato_tempo of this SospensioneType2.  # noqa: E501
        :type: bool
        """
        if superato_tempo is None:
            raise ValueError("Invalid value for `superato_tempo`, must not be `None`")  # noqa: E501

        self._superato_tempo = superato_tempo

    @property
    def riserve(self):
        """Gets the riserve of this SospensioneType2.  # noqa: E501

        Iscrizione di riserve dell’appaltatore nei verbali di sospensione e/o ripresa lavori  # noqa: E501

        :return: The riserve of this SospensioneType2.  # noqa: E501
        :rtype: bool
        """
        return self._riserve

    @riserve.setter
    def riserve(self, riserve):
        """Sets the riserve of this SospensioneType2.

        Iscrizione di riserve dell’appaltatore nei verbali di sospensione e/o ripresa lavori  # noqa: E501

        :param riserve: The riserve of this SospensioneType2.  # noqa: E501
        :type: bool
        """
        if riserve is None:
            raise ValueError("Invalid value for `riserve`, must not be `None`")  # noqa: E501

        self._riserve = riserve

    @property
    def verbale_non_sottoscritto(self):
        """Gets the verbale_non_sottoscritto of this SospensioneType2.  # noqa: E501

        Verbale/i non sottoscritti dall’appaltatore  # noqa: E501

        :return: The verbale_non_sottoscritto of this SospensioneType2.  # noqa: E501
        :rtype: bool
        """
        return self._verbale_non_sottoscritto

    @verbale_non_sottoscritto.setter
    def verbale_non_sottoscritto(self, verbale_non_sottoscritto):
        """Sets the verbale_non_sottoscritto of this SospensioneType2.

        Verbale/i non sottoscritti dall’appaltatore  # noqa: E501

        :param verbale_non_sottoscritto: The verbale_non_sottoscritto of this SospensioneType2.  # noqa: E501
        :type: bool
        """
        if verbale_non_sottoscritto is None:
            raise ValueError("Invalid value for `verbale_non_sottoscritto`, must not be `None`")  # noqa: E501

        self._verbale_non_sottoscritto = verbale_non_sottoscritto

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SospensioneType2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SospensioneType2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
