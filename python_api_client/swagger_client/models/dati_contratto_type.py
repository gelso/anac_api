# coding: utf-8

"""
    Specifiche Servizi Appalto - OpenAPI 3.0

    Sono descritte le specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ufficio.uscp@anticorruzione.it
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DatiContrattoType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'codice_ausa': 'list[str]',
        'id_partecipante': 'str',
        'cig': 'list[str]',
        'data_stipula': 'datetime',
        'data_esecutivita': 'datetime',
        'data_decorrenza': 'datetime',
        'data_scadenza': 'datetime',
        'importo_cauzione': 'float'
    }

    attribute_map = {
        'codice_ausa': 'codiceAusa',
        'id_partecipante': 'idPartecipante',
        'cig': 'cig',
        'data_stipula': 'dataStipula',
        'data_esecutivita': 'dataEsecutivita',
        'data_decorrenza': 'dataDecorrenza',
        'data_scadenza': 'dataScadenza',
        'importo_cauzione': 'importoCauzione'
    }

    def __init__(self, codice_ausa=None, id_partecipante=None, cig=None, data_stipula=None, data_esecutivita=None, data_decorrenza=None, data_scadenza=None, importo_cauzione=None):  # noqa: E501
        """DatiContrattoType - a model defined in Swagger"""  # noqa: E501
        self._codice_ausa = None
        self._id_partecipante = None
        self._cig = None
        self._data_stipula = None
        self._data_esecutivita = None
        self._data_decorrenza = None
        self._data_scadenza = None
        self._importo_cauzione = None
        self.discriminator = None
        self.codice_ausa = codice_ausa
        self.id_partecipante = id_partecipante
        self.cig = cig
        if data_stipula is not None:
            self.data_stipula = data_stipula
        if data_esecutivita is not None:
            self.data_esecutivita = data_esecutivita
        self.data_decorrenza = data_decorrenza
        self.data_scadenza = data_scadenza
        self.importo_cauzione = importo_cauzione

    @property
    def codice_ausa(self):
        """Gets the codice_ausa of this DatiContrattoType.  # noqa: E501

        Amministrazione firmataria  # noqa: E501

        :return: The codice_ausa of this DatiContrattoType.  # noqa: E501
        :rtype: list[str]
        """
        return self._codice_ausa

    @codice_ausa.setter
    def codice_ausa(self, codice_ausa):
        """Sets the codice_ausa of this DatiContrattoType.

        Amministrazione firmataria  # noqa: E501

        :param codice_ausa: The codice_ausa of this DatiContrattoType.  # noqa: E501
        :type: list[str]
        """
        if codice_ausa is None:
            raise ValueError("Invalid value for `codice_ausa`, must not be `None`")  # noqa: E501

        self._codice_ausa = codice_ausa

    @property
    def id_partecipante(self):
        """Gets the id_partecipante of this DatiContrattoType.  # noqa: E501

        id partecipante  # noqa: E501

        :return: The id_partecipante of this DatiContrattoType.  # noqa: E501
        :rtype: str
        """
        return self._id_partecipante

    @id_partecipante.setter
    def id_partecipante(self, id_partecipante):
        """Sets the id_partecipante of this DatiContrattoType.

        id partecipante  # noqa: E501

        :param id_partecipante: The id_partecipante of this DatiContrattoType.  # noqa: E501
        :type: str
        """
        if id_partecipante is None:
            raise ValueError("Invalid value for `id_partecipante`, must not be `None`")  # noqa: E501

        self._id_partecipante = id_partecipante

    @property
    def cig(self):
        """Gets the cig of this DatiContrattoType.  # noqa: E501

        Lista dei lotti rientranti nel contratto  # noqa: E501

        :return: The cig of this DatiContrattoType.  # noqa: E501
        :rtype: list[str]
        """
        return self._cig

    @cig.setter
    def cig(self, cig):
        """Sets the cig of this DatiContrattoType.

        Lista dei lotti rientranti nel contratto  # noqa: E501

        :param cig: The cig of this DatiContrattoType.  # noqa: E501
        :type: list[str]
        """
        if cig is None:
            raise ValueError("Invalid value for `cig`, must not be `None`")  # noqa: E501

        self._cig = cig

    @property
    def data_stipula(self):
        """Gets the data_stipula of this DatiContrattoType.  # noqa: E501

        Data stipula del contratto  # noqa: E501

        :return: The data_stipula of this DatiContrattoType.  # noqa: E501
        :rtype: datetime
        """
        return self._data_stipula

    @data_stipula.setter
    def data_stipula(self, data_stipula):
        """Sets the data_stipula of this DatiContrattoType.

        Data stipula del contratto  # noqa: E501

        :param data_stipula: The data_stipula of this DatiContrattoType.  # noqa: E501
        :type: datetime
        """

        self._data_stipula = data_stipula

    @property
    def data_esecutivita(self):
        """Gets the data_esecutivita of this DatiContrattoType.  # noqa: E501

        Data esecutività del contratto (ove prevista)  # noqa: E501

        :return: The data_esecutivita of this DatiContrattoType.  # noqa: E501
        :rtype: datetime
        """
        return self._data_esecutivita

    @data_esecutivita.setter
    def data_esecutivita(self, data_esecutivita):
        """Sets the data_esecutivita of this DatiContrattoType.

        Data esecutività del contratto (ove prevista)  # noqa: E501

        :param data_esecutivita: The data_esecutivita of this DatiContrattoType.  # noqa: E501
        :type: datetime
        """

        self._data_esecutivita = data_esecutivita

    @property
    def data_decorrenza(self):
        """Gets the data_decorrenza of this DatiContrattoType.  # noqa: E501

        Data di decorrenza contrattuale  # noqa: E501

        :return: The data_decorrenza of this DatiContrattoType.  # noqa: E501
        :rtype: datetime
        """
        return self._data_decorrenza

    @data_decorrenza.setter
    def data_decorrenza(self, data_decorrenza):
        """Sets the data_decorrenza of this DatiContrattoType.

        Data di decorrenza contrattuale  # noqa: E501

        :param data_decorrenza: The data_decorrenza of this DatiContrattoType.  # noqa: E501
        :type: datetime
        """
        if data_decorrenza is None:
            raise ValueError("Invalid value for `data_decorrenza`, must not be `None`")  # noqa: E501

        self._data_decorrenza = data_decorrenza

    @property
    def data_scadenza(self):
        """Gets the data_scadenza of this DatiContrattoType.  # noqa: E501

        Data di scadenza contrattuale  # noqa: E501

        :return: The data_scadenza of this DatiContrattoType.  # noqa: E501
        :rtype: datetime
        """
        return self._data_scadenza

    @data_scadenza.setter
    def data_scadenza(self, data_scadenza):
        """Sets the data_scadenza of this DatiContrattoType.

        Data di scadenza contrattuale  # noqa: E501

        :param data_scadenza: The data_scadenza of this DatiContrattoType.  # noqa: E501
        :type: datetime
        """
        if data_scadenza is None:
            raise ValueError("Invalid value for `data_scadenza`, must not be `None`")  # noqa: E501

        self._data_scadenza = data_scadenza

    @property
    def importo_cauzione(self):
        """Gets the importo_cauzione of this DatiContrattoType.  # noqa: E501

        Importo cauzione definitiva in €  # noqa: E501

        :return: The importo_cauzione of this DatiContrattoType.  # noqa: E501
        :rtype: float
        """
        return self._importo_cauzione

    @importo_cauzione.setter
    def importo_cauzione(self, importo_cauzione):
        """Sets the importo_cauzione of this DatiContrattoType.

        Importo cauzione definitiva in €  # noqa: E501

        :param importo_cauzione: The importo_cauzione of this DatiContrattoType.  # noqa: E501
        :type: float
        """
        if importo_cauzione is None:
            raise ValueError("Invalid value for `importo_cauzione`, must not be `None`")  # noqa: E501

        self._importo_cauzione = importo_cauzione

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DatiContrattoType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatiContrattoType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
