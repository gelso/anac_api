# coding: utf-8

"""
    Specifiche Servizi Appalto - OpenAPI 3.0

    Sono descritte le specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ufficio.uscp@anticorruzione.it
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class QuadroEconomicoType1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'imp_lavori': 'float',
        'imp_servizi': 'float',
        'imp_forniture': 'float',
        'imp_totale_sicurezza': 'float',
        'ulteriori_somme_no_ribasso': 'float',
        'imp_progettazione': 'float',
        'somme_opzioni_rinnovi': 'float',
        'somme_ripetizioni': 'float',
        'somme_a_disposizione': 'float'
    }

    attribute_map = {
        'imp_lavori': 'impLavori',
        'imp_servizi': 'impServizi',
        'imp_forniture': 'impForniture',
        'imp_totale_sicurezza': 'impTotaleSicurezza',
        'ulteriori_somme_no_ribasso': 'ulterioriSommeNoRibasso',
        'imp_progettazione': 'impProgettazione',
        'somme_opzioni_rinnovi': 'sommeOpzioniRinnovi',
        'somme_ripetizioni': 'sommeRipetizioni',
        'somme_a_disposizione': 'sommeADisposizione'
    }

    def __init__(self, imp_lavori=None, imp_servizi=None, imp_forniture=None, imp_totale_sicurezza=None, ulteriori_somme_no_ribasso=None, imp_progettazione=None, somme_opzioni_rinnovi=None, somme_ripetizioni=None, somme_a_disposizione=None):  # noqa: E501
        """QuadroEconomicoType1 - a model defined in Swagger"""  # noqa: E501
        self._imp_lavori = None
        self._imp_servizi = None
        self._imp_forniture = None
        self._imp_totale_sicurezza = None
        self._ulteriori_somme_no_ribasso = None
        self._imp_progettazione = None
        self._somme_opzioni_rinnovi = None
        self._somme_ripetizioni = None
        self._somme_a_disposizione = None
        self.discriminator = None
        if imp_lavori is not None:
            self.imp_lavori = imp_lavori
        if imp_servizi is not None:
            self.imp_servizi = imp_servizi
        if imp_forniture is not None:
            self.imp_forniture = imp_forniture
        if imp_totale_sicurezza is not None:
            self.imp_totale_sicurezza = imp_totale_sicurezza
        if ulteriori_somme_no_ribasso is not None:
            self.ulteriori_somme_no_ribasso = ulteriori_somme_no_ribasso
        if imp_progettazione is not None:
            self.imp_progettazione = imp_progettazione
        self.somme_opzioni_rinnovi = somme_opzioni_rinnovi
        self.somme_ripetizioni = somme_ripetizioni
        self.somme_a_disposizione = somme_a_disposizione

    @property
    def imp_lavori(self):
        """Gets the imp_lavori of this QuadroEconomicoType1.  # noqa: E501

        Importo componente lavori in €  # noqa: E501

        :return: The imp_lavori of this QuadroEconomicoType1.  # noqa: E501
        :rtype: float
        """
        return self._imp_lavori

    @imp_lavori.setter
    def imp_lavori(self, imp_lavori):
        """Sets the imp_lavori of this QuadroEconomicoType1.

        Importo componente lavori in €  # noqa: E501

        :param imp_lavori: The imp_lavori of this QuadroEconomicoType1.  # noqa: E501
        :type: float
        """

        self._imp_lavori = imp_lavori

    @property
    def imp_servizi(self):
        """Gets the imp_servizi of this QuadroEconomicoType1.  # noqa: E501

        Importo componente servizi in €  # noqa: E501

        :return: The imp_servizi of this QuadroEconomicoType1.  # noqa: E501
        :rtype: float
        """
        return self._imp_servizi

    @imp_servizi.setter
    def imp_servizi(self, imp_servizi):
        """Sets the imp_servizi of this QuadroEconomicoType1.

        Importo componente servizi in €  # noqa: E501

        :param imp_servizi: The imp_servizi of this QuadroEconomicoType1.  # noqa: E501
        :type: float
        """

        self._imp_servizi = imp_servizi

    @property
    def imp_forniture(self):
        """Gets the imp_forniture of this QuadroEconomicoType1.  # noqa: E501

        Importo componente forniture in €  # noqa: E501

        :return: The imp_forniture of this QuadroEconomicoType1.  # noqa: E501
        :rtype: float
        """
        return self._imp_forniture

    @imp_forniture.setter
    def imp_forniture(self, imp_forniture):
        """Sets the imp_forniture of this QuadroEconomicoType1.

        Importo componente forniture in €  # noqa: E501

        :param imp_forniture: The imp_forniture of this QuadroEconomicoType1.  # noqa: E501
        :type: float
        """

        self._imp_forniture = imp_forniture

    @property
    def imp_totale_sicurezza(self):
        """Gets the imp_totale_sicurezza of this QuadroEconomicoType1.  # noqa: E501

        Importo totale per l'attuazione della sicurezza  # noqa: E501

        :return: The imp_totale_sicurezza of this QuadroEconomicoType1.  # noqa: E501
        :rtype: float
        """
        return self._imp_totale_sicurezza

    @imp_totale_sicurezza.setter
    def imp_totale_sicurezza(self, imp_totale_sicurezza):
        """Sets the imp_totale_sicurezza of this QuadroEconomicoType1.

        Importo totale per l'attuazione della sicurezza  # noqa: E501

        :param imp_totale_sicurezza: The imp_totale_sicurezza of this QuadroEconomicoType1.  # noqa: E501
        :type: float
        """

        self._imp_totale_sicurezza = imp_totale_sicurezza

    @property
    def ulteriori_somme_no_ribasso(self):
        """Gets the ulteriori_somme_no_ribasso of this QuadroEconomicoType1.  # noqa: E501

        Ulteriori somme non soggette a ribasso  # noqa: E501

        :return: The ulteriori_somme_no_ribasso of this QuadroEconomicoType1.  # noqa: E501
        :rtype: float
        """
        return self._ulteriori_somme_no_ribasso

    @ulteriori_somme_no_ribasso.setter
    def ulteriori_somme_no_ribasso(self, ulteriori_somme_no_ribasso):
        """Sets the ulteriori_somme_no_ribasso of this QuadroEconomicoType1.

        Ulteriori somme non soggette a ribasso  # noqa: E501

        :param ulteriori_somme_no_ribasso: The ulteriori_somme_no_ribasso of this QuadroEconomicoType1.  # noqa: E501
        :type: float
        """

        self._ulteriori_somme_no_ribasso = ulteriori_somme_no_ribasso

    @property
    def imp_progettazione(self):
        """Gets the imp_progettazione of this QuadroEconomicoType1.  # noqa: E501

        Importo della progettazione in caso di appalto integrato  # noqa: E501

        :return: The imp_progettazione of this QuadroEconomicoType1.  # noqa: E501
        :rtype: float
        """
        return self._imp_progettazione

    @imp_progettazione.setter
    def imp_progettazione(self, imp_progettazione):
        """Sets the imp_progettazione of this QuadroEconomicoType1.

        Importo della progettazione in caso di appalto integrato  # noqa: E501

        :param imp_progettazione: The imp_progettazione of this QuadroEconomicoType1.  # noqa: E501
        :type: float
        """

        self._imp_progettazione = imp_progettazione

    @property
    def somme_opzioni_rinnovi(self):
        """Gets the somme_opzioni_rinnovi of this QuadroEconomicoType1.  # noqa: E501

        Somme per opzioni/rinnovi  # noqa: E501

        :return: The somme_opzioni_rinnovi of this QuadroEconomicoType1.  # noqa: E501
        :rtype: float
        """
        return self._somme_opzioni_rinnovi

    @somme_opzioni_rinnovi.setter
    def somme_opzioni_rinnovi(self, somme_opzioni_rinnovi):
        """Sets the somme_opzioni_rinnovi of this QuadroEconomicoType1.

        Somme per opzioni/rinnovi  # noqa: E501

        :param somme_opzioni_rinnovi: The somme_opzioni_rinnovi of this QuadroEconomicoType1.  # noqa: E501
        :type: float
        """
        if somme_opzioni_rinnovi is None:
            raise ValueError("Invalid value for `somme_opzioni_rinnovi`, must not be `None`")  # noqa: E501

        self._somme_opzioni_rinnovi = somme_opzioni_rinnovi

    @property
    def somme_ripetizioni(self):
        """Gets the somme_ripetizioni of this QuadroEconomicoType1.  # noqa: E501

        Somme per ripetizione servizi/forniture/lavori analoghi e consegne complementari  # noqa: E501

        :return: The somme_ripetizioni of this QuadroEconomicoType1.  # noqa: E501
        :rtype: float
        """
        return self._somme_ripetizioni

    @somme_ripetizioni.setter
    def somme_ripetizioni(self, somme_ripetizioni):
        """Sets the somme_ripetizioni of this QuadroEconomicoType1.

        Somme per ripetizione servizi/forniture/lavori analoghi e consegne complementari  # noqa: E501

        :param somme_ripetizioni: The somme_ripetizioni of this QuadroEconomicoType1.  # noqa: E501
        :type: float
        """
        if somme_ripetizioni is None:
            raise ValueError("Invalid value for `somme_ripetizioni`, must not be `None`")  # noqa: E501

        self._somme_ripetizioni = somme_ripetizioni

    @property
    def somme_a_disposizione(self):
        """Gets the somme_a_disposizione of this QuadroEconomicoType1.  # noqa: E501

        Somme a disposizione - Iva e altre Imposte e tasse  # noqa: E501

        :return: The somme_a_disposizione of this QuadroEconomicoType1.  # noqa: E501
        :rtype: float
        """
        return self._somme_a_disposizione

    @somme_a_disposizione.setter
    def somme_a_disposizione(self, somme_a_disposizione):
        """Sets the somme_a_disposizione of this QuadroEconomicoType1.

        Somme a disposizione - Iva e altre Imposte e tasse  # noqa: E501

        :param somme_a_disposizione: The somme_a_disposizione of this QuadroEconomicoType1.  # noqa: E501
        :type: float
        """
        if somme_a_disposizione is None:
            raise ValueError("Invalid value for `somme_a_disposizione`, must not be `None`")  # noqa: E501

        self._somme_a_disposizione = somme_a_disposizione

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QuadroEconomicoType1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuadroEconomicoType1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
