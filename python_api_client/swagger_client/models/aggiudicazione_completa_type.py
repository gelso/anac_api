# coding: utf-8

"""
    Specifiche Servizi Appalto - OpenAPI 3.0

    Sono descritte le specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ufficio.uscp@anticorruzione.it
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AggiudicazioneCompletaType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cig': 'str',
        'valore_soglia_anomalia': 'float',
        'quadro_economico_standard': 'QuadroEconomicoType',
        'offerte_presentate': 'list[OfferteType]'
    }

    attribute_map = {
        'cig': 'cig',
        'valore_soglia_anomalia': 'valoreSogliaAnomalia',
        'quadro_economico_standard': 'quadroEconomicoStandard',
        'offerte_presentate': 'offertePresentate'
    }

    def __init__(self, cig=None, valore_soglia_anomalia=None, quadro_economico_standard=None, offerte_presentate=None):  # noqa: E501
        """AggiudicazioneCompletaType - a model defined in Swagger"""  # noqa: E501
        self._cig = None
        self._valore_soglia_anomalia = None
        self._quadro_economico_standard = None
        self._offerte_presentate = None
        self.discriminator = None
        self.cig = cig
        if valore_soglia_anomalia is not None:
            self.valore_soglia_anomalia = valore_soglia_anomalia
        if quadro_economico_standard is not None:
            self.quadro_economico_standard = quadro_economico_standard
        self.offerte_presentate = offerte_presentate

    @property
    def cig(self):
        """Gets the cig of this AggiudicazioneCompletaType.  # noqa: E501

        codice identificativo lotto  # noqa: E501

        :return: The cig of this AggiudicazioneCompletaType.  # noqa: E501
        :rtype: str
        """
        return self._cig

    @cig.setter
    def cig(self, cig):
        """Sets the cig of this AggiudicazioneCompletaType.

        codice identificativo lotto  # noqa: E501

        :param cig: The cig of this AggiudicazioneCompletaType.  # noqa: E501
        :type: str
        """
        if cig is None:
            raise ValueError("Invalid value for `cig`, must not be `None`")  # noqa: E501

        self._cig = cig

    @property
    def valore_soglia_anomalia(self):
        """Gets the valore_soglia_anomalia of this AggiudicazioneCompletaType.  # noqa: E501

        Valore soglia anomalia  # noqa: E501

        :return: The valore_soglia_anomalia of this AggiudicazioneCompletaType.  # noqa: E501
        :rtype: float
        """
        return self._valore_soglia_anomalia

    @valore_soglia_anomalia.setter
    def valore_soglia_anomalia(self, valore_soglia_anomalia):
        """Sets the valore_soglia_anomalia of this AggiudicazioneCompletaType.

        Valore soglia anomalia  # noqa: E501

        :param valore_soglia_anomalia: The valore_soglia_anomalia of this AggiudicazioneCompletaType.  # noqa: E501
        :type: float
        """

        self._valore_soglia_anomalia = valore_soglia_anomalia

    @property
    def quadro_economico_standard(self):
        """Gets the quadro_economico_standard of this AggiudicazioneCompletaType.  # noqa: E501


        :return: The quadro_economico_standard of this AggiudicazioneCompletaType.  # noqa: E501
        :rtype: QuadroEconomicoType
        """
        return self._quadro_economico_standard

    @quadro_economico_standard.setter
    def quadro_economico_standard(self, quadro_economico_standard):
        """Sets the quadro_economico_standard of this AggiudicazioneCompletaType.


        :param quadro_economico_standard: The quadro_economico_standard of this AggiudicazioneCompletaType.  # noqa: E501
        :type: QuadroEconomicoType
        """

        self._quadro_economico_standard = quadro_economico_standard

    @property
    def offerte_presentate(self):
        """Gets the offerte_presentate of this AggiudicazioneCompletaType.  # noqa: E501


        :return: The offerte_presentate of this AggiudicazioneCompletaType.  # noqa: E501
        :rtype: list[OfferteType]
        """
        return self._offerte_presentate

    @offerte_presentate.setter
    def offerte_presentate(self, offerte_presentate):
        """Sets the offerte_presentate of this AggiudicazioneCompletaType.


        :param offerte_presentate: The offerte_presentate of this AggiudicazioneCompletaType.  # noqa: E501
        :type: list[OfferteType]
        """
        if offerte_presentate is None:
            raise ValueError("Invalid value for `offerte_presentate`, must not be `None`")  # noqa: E501

        self._offerte_presentate = offerte_presentate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AggiudicazioneCompletaType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AggiudicazioneCompletaType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
