# coding: utf-8

"""
    Specifiche Servizi Appalto - OpenAPI 3.0

    Sono descritte le specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ufficio.uscp@anticorruzione.it
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.lotto_p17_type import LottoP17Type  # noqa: F401,E501

class LottoP217Type(LottoP17Type):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dati_base': 'DatiBaseLottoOptionalType',
        'dati_base_contratto': 'DatiBaseContrattoType',
        'dati_base_aggiuntivi': 'DatiBaseAggiuntiviType',
        'dati_base_aggiudicazione': 'DatiBaseAggiudicazioneOptionalType',
        'dati_base_termini_invio': 'DatiTerminiInvioType',
        'dati_base_cpv': 'DatiBaseCPVType',
        'dati_base_accessibilita': 'DatiBaseAccessibilitaType',
        'dati_base_documenti': 'AllOfLottoP217TypeDatiBaseDocumenti'
    }
    if hasattr(LottoP17Type, "swagger_types"):
        swagger_types.update(LottoP17Type.swagger_types)

    attribute_map = {
        'dati_base': 'datiBase',
        'dati_base_contratto': 'datiBaseContratto',
        'dati_base_aggiuntivi': 'datiBaseAggiuntivi',
        'dati_base_aggiudicazione': 'datiBaseAggiudicazione',
        'dati_base_termini_invio': 'datiBaseTerminiInvio',
        'dati_base_cpv': 'datiBaseCPV',
        'dati_base_accessibilita': 'datiBaseAccessibilita',
        'dati_base_documenti': 'datiBaseDocumenti'
    }
    if hasattr(LottoP17Type, "attribute_map"):
        attribute_map.update(LottoP17Type.attribute_map)

    def __init__(self, dati_base=None, dati_base_contratto=None, dati_base_aggiuntivi=None, dati_base_aggiudicazione=None, dati_base_termini_invio=None, dati_base_cpv=None, dati_base_accessibilita=None, dati_base_documenti=None, *args, **kwargs):  # noqa: E501
        """LottoP217Type - a model defined in Swagger"""  # noqa: E501
        self._dati_base = None
        self._dati_base_contratto = None
        self._dati_base_aggiuntivi = None
        self._dati_base_aggiudicazione = None
        self._dati_base_termini_invio = None
        self._dati_base_cpv = None
        self._dati_base_accessibilita = None
        self._dati_base_documenti = None
        self.discriminator = None
        if dati_base is not None:
            self.dati_base = dati_base
        if dati_base_contratto is not None:
            self.dati_base_contratto = dati_base_contratto
        if dati_base_aggiuntivi is not None:
            self.dati_base_aggiuntivi = dati_base_aggiuntivi
        if dati_base_aggiudicazione is not None:
            self.dati_base_aggiudicazione = dati_base_aggiudicazione
        if dati_base_termini_invio is not None:
            self.dati_base_termini_invio = dati_base_termini_invio
        if dati_base_cpv is not None:
            self.dati_base_cpv = dati_base_cpv
        if dati_base_accessibilita is not None:
            self.dati_base_accessibilita = dati_base_accessibilita
        if dati_base_documenti is not None:
            self.dati_base_documenti = dati_base_documenti
        LottoP17Type.__init__(self, *args, **kwargs)

    @property
    def dati_base(self):
        """Gets the dati_base of this LottoP217Type.  # noqa: E501


        :return: The dati_base of this LottoP217Type.  # noqa: E501
        :rtype: DatiBaseLottoOptionalType
        """
        return self._dati_base

    @dati_base.setter
    def dati_base(self, dati_base):
        """Sets the dati_base of this LottoP217Type.


        :param dati_base: The dati_base of this LottoP217Type.  # noqa: E501
        :type: DatiBaseLottoOptionalType
        """

        self._dati_base = dati_base

    @property
    def dati_base_contratto(self):
        """Gets the dati_base_contratto of this LottoP217Type.  # noqa: E501


        :return: The dati_base_contratto of this LottoP217Type.  # noqa: E501
        :rtype: DatiBaseContrattoType
        """
        return self._dati_base_contratto

    @dati_base_contratto.setter
    def dati_base_contratto(self, dati_base_contratto):
        """Sets the dati_base_contratto of this LottoP217Type.


        :param dati_base_contratto: The dati_base_contratto of this LottoP217Type.  # noqa: E501
        :type: DatiBaseContrattoType
        """

        self._dati_base_contratto = dati_base_contratto

    @property
    def dati_base_aggiuntivi(self):
        """Gets the dati_base_aggiuntivi of this LottoP217Type.  # noqa: E501


        :return: The dati_base_aggiuntivi of this LottoP217Type.  # noqa: E501
        :rtype: DatiBaseAggiuntiviType
        """
        return self._dati_base_aggiuntivi

    @dati_base_aggiuntivi.setter
    def dati_base_aggiuntivi(self, dati_base_aggiuntivi):
        """Sets the dati_base_aggiuntivi of this LottoP217Type.


        :param dati_base_aggiuntivi: The dati_base_aggiuntivi of this LottoP217Type.  # noqa: E501
        :type: DatiBaseAggiuntiviType
        """

        self._dati_base_aggiuntivi = dati_base_aggiuntivi

    @property
    def dati_base_aggiudicazione(self):
        """Gets the dati_base_aggiudicazione of this LottoP217Type.  # noqa: E501


        :return: The dati_base_aggiudicazione of this LottoP217Type.  # noqa: E501
        :rtype: DatiBaseAggiudicazioneOptionalType
        """
        return self._dati_base_aggiudicazione

    @dati_base_aggiudicazione.setter
    def dati_base_aggiudicazione(self, dati_base_aggiudicazione):
        """Sets the dati_base_aggiudicazione of this LottoP217Type.


        :param dati_base_aggiudicazione: The dati_base_aggiudicazione of this LottoP217Type.  # noqa: E501
        :type: DatiBaseAggiudicazioneOptionalType
        """

        self._dati_base_aggiudicazione = dati_base_aggiudicazione

    @property
    def dati_base_termini_invio(self):
        """Gets the dati_base_termini_invio of this LottoP217Type.  # noqa: E501


        :return: The dati_base_termini_invio of this LottoP217Type.  # noqa: E501
        :rtype: DatiTerminiInvioType
        """
        return self._dati_base_termini_invio

    @dati_base_termini_invio.setter
    def dati_base_termini_invio(self, dati_base_termini_invio):
        """Sets the dati_base_termini_invio of this LottoP217Type.


        :param dati_base_termini_invio: The dati_base_termini_invio of this LottoP217Type.  # noqa: E501
        :type: DatiTerminiInvioType
        """

        self._dati_base_termini_invio = dati_base_termini_invio

    @property
    def dati_base_cpv(self):
        """Gets the dati_base_cpv of this LottoP217Type.  # noqa: E501


        :return: The dati_base_cpv of this LottoP217Type.  # noqa: E501
        :rtype: DatiBaseCPVType
        """
        return self._dati_base_cpv

    @dati_base_cpv.setter
    def dati_base_cpv(self, dati_base_cpv):
        """Sets the dati_base_cpv of this LottoP217Type.


        :param dati_base_cpv: The dati_base_cpv of this LottoP217Type.  # noqa: E501
        :type: DatiBaseCPVType
        """

        self._dati_base_cpv = dati_base_cpv

    @property
    def dati_base_accessibilita(self):
        """Gets the dati_base_accessibilita of this LottoP217Type.  # noqa: E501


        :return: The dati_base_accessibilita of this LottoP217Type.  # noqa: E501
        :rtype: DatiBaseAccessibilitaType
        """
        return self._dati_base_accessibilita

    @dati_base_accessibilita.setter
    def dati_base_accessibilita(self, dati_base_accessibilita):
        """Sets the dati_base_accessibilita of this LottoP217Type.


        :param dati_base_accessibilita: The dati_base_accessibilita of this LottoP217Type.  # noqa: E501
        :type: DatiBaseAccessibilitaType
        """

        self._dati_base_accessibilita = dati_base_accessibilita

    @property
    def dati_base_documenti(self):
        """Gets the dati_base_documenti of this LottoP217Type.  # noqa: E501


        :return: The dati_base_documenti of this LottoP217Type.  # noqa: E501
        :rtype: AllOfLottoP217TypeDatiBaseDocumenti
        """
        return self._dati_base_documenti

    @dati_base_documenti.setter
    def dati_base_documenti(self, dati_base_documenti):
        """Sets the dati_base_documenti of this LottoP217Type.


        :param dati_base_documenti: The dati_base_documenti of this LottoP217Type.  # noqa: E501
        :type: AllOfLottoP217TypeDatiBaseDocumenti
        """

        self._dati_base_documenti = dati_base_documenti

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LottoP217Type, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LottoP217Type):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
