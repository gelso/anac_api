# coding: utf-8

"""
    Specifiche Servizi Appalto - OpenAPI 3.0

    Sono descritte le specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ufficio.uscp@anticorruzione.it
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LottoP73Type(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'lot_identifier': 'str',
        'dati_base': 'AllOfLottoP73TypeDatiBase',
        'dati_base_cpv': 'AllOfLottoP73TypeDatiBaseCpv',
        'dati_base_documenti': 'DatiBaseDocumentiOptionalType',
        'dati_base_durata': 'DatiBaseDurataType'
    }

    attribute_map = {
        'lot_identifier': 'lotIdentifier',
        'dati_base': 'datiBase',
        'dati_base_cpv': 'datiBaseCPV',
        'dati_base_documenti': 'datiBaseDocumenti',
        'dati_base_durata': 'datiBaseDurata'
    }

    def __init__(self, lot_identifier=None, dati_base=None, dati_base_cpv=None, dati_base_documenti=None, dati_base_durata=None):  # noqa: E501
        """LottoP73Type - a model defined in Swagger"""  # noqa: E501
        self._lot_identifier = None
        self._dati_base = None
        self._dati_base_cpv = None
        self._dati_base_documenti = None
        self._dati_base_durata = None
        self.discriminator = None
        self.lot_identifier = lot_identifier
        if dati_base is not None:
            self.dati_base = dati_base
        if dati_base_cpv is not None:
            self.dati_base_cpv = dati_base_cpv
        if dati_base_documenti is not None:
            self.dati_base_documenti = dati_base_documenti
        if dati_base_durata is not None:
            self.dati_base_durata = dati_base_durata

    @property
    def lot_identifier(self):
        """Gets the lot_identifier of this LottoP73Type.  # noqa: E501

        Id univoco del lotto generato dalla stazione appaltante  # noqa: E501

        :return: The lot_identifier of this LottoP73Type.  # noqa: E501
        :rtype: str
        """
        return self._lot_identifier

    @lot_identifier.setter
    def lot_identifier(self, lot_identifier):
        """Sets the lot_identifier of this LottoP73Type.

        Id univoco del lotto generato dalla stazione appaltante  # noqa: E501

        :param lot_identifier: The lot_identifier of this LottoP73Type.  # noqa: E501
        :type: str
        """
        if lot_identifier is None:
            raise ValueError("Invalid value for `lot_identifier`, must not be `None`")  # noqa: E501

        self._lot_identifier = lot_identifier

    @property
    def dati_base(self):
        """Gets the dati_base of this LottoP73Type.  # noqa: E501


        :return: The dati_base of this LottoP73Type.  # noqa: E501
        :rtype: AllOfLottoP73TypeDatiBase
        """
        return self._dati_base

    @dati_base.setter
    def dati_base(self, dati_base):
        """Sets the dati_base of this LottoP73Type.


        :param dati_base: The dati_base of this LottoP73Type.  # noqa: E501
        :type: AllOfLottoP73TypeDatiBase
        """

        self._dati_base = dati_base

    @property
    def dati_base_cpv(self):
        """Gets the dati_base_cpv of this LottoP73Type.  # noqa: E501


        :return: The dati_base_cpv of this LottoP73Type.  # noqa: E501
        :rtype: AllOfLottoP73TypeDatiBaseCpv
        """
        return self._dati_base_cpv

    @dati_base_cpv.setter
    def dati_base_cpv(self, dati_base_cpv):
        """Sets the dati_base_cpv of this LottoP73Type.


        :param dati_base_cpv: The dati_base_cpv of this LottoP73Type.  # noqa: E501
        :type: AllOfLottoP73TypeDatiBaseCpv
        """

        self._dati_base_cpv = dati_base_cpv

    @property
    def dati_base_documenti(self):
        """Gets the dati_base_documenti of this LottoP73Type.  # noqa: E501


        :return: The dati_base_documenti of this LottoP73Type.  # noqa: E501
        :rtype: DatiBaseDocumentiOptionalType
        """
        return self._dati_base_documenti

    @dati_base_documenti.setter
    def dati_base_documenti(self, dati_base_documenti):
        """Sets the dati_base_documenti of this LottoP73Type.


        :param dati_base_documenti: The dati_base_documenti of this LottoP73Type.  # noqa: E501
        :type: DatiBaseDocumentiOptionalType
        """

        self._dati_base_documenti = dati_base_documenti

    @property
    def dati_base_durata(self):
        """Gets the dati_base_durata of this LottoP73Type.  # noqa: E501


        :return: The dati_base_durata of this LottoP73Type.  # noqa: E501
        :rtype: DatiBaseDurataType
        """
        return self._dati_base_durata

    @dati_base_durata.setter
    def dati_base_durata(self, dati_base_durata):
        """Sets the dati_base_durata of this LottoP73Type.


        :param dati_base_durata: The dati_base_durata of this LottoP73Type.  # noqa: E501
        :type: DatiBaseDurataType
        """

        self._dati_base_durata = dati_base_durata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LottoP73Type, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LottoP73Type):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
