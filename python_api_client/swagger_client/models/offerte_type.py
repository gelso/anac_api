# coding: utf-8

"""
    Specifiche Servizi Appalto - OpenAPI 3.0

    Sono descritte le specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ufficio.uscp@anticorruzione.it
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OfferteType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_partecipante': 'str',
        'importo': 'float',
        'aggiudicatario': 'bool',
        'ccnl': 'str',
        'posizione_graduatoria': 'float',
        'offerta_economica': 'float',
        'offerta_qualitativa': 'float',
        'offerta_in_aumento': 'float',
        'offerta_maggiore_soglia_anomalia': 'bool',
        'impresa_esclusa_automaticamente': 'bool',
        'offerta_anomala': 'bool'
    }

    attribute_map = {
        'id_partecipante': 'idPartecipante',
        'importo': 'importo',
        'aggiudicatario': 'aggiudicatario',
        'ccnl': 'ccnl',
        'posizione_graduatoria': 'posizioneGraduatoria',
        'offerta_economica': 'offertaEconomica',
        'offerta_qualitativa': 'offertaQualitativa',
        'offerta_in_aumento': 'offertaInAumento',
        'offerta_maggiore_soglia_anomalia': 'offertaMaggioreSogliaAnomalia',
        'impresa_esclusa_automaticamente': 'impresaEsclusaAutomaticamente',
        'offerta_anomala': 'offertaAnomala'
    }

    def __init__(self, id_partecipante=None, importo=None, aggiudicatario=None, ccnl=None, posizione_graduatoria=None, offerta_economica=None, offerta_qualitativa=None, offerta_in_aumento=None, offerta_maggiore_soglia_anomalia=None, impresa_esclusa_automaticamente=None, offerta_anomala=None):  # noqa: E501
        """OfferteType - a model defined in Swagger"""  # noqa: E501
        self._id_partecipante = None
        self._importo = None
        self._aggiudicatario = None
        self._ccnl = None
        self._posizione_graduatoria = None
        self._offerta_economica = None
        self._offerta_qualitativa = None
        self._offerta_in_aumento = None
        self._offerta_maggiore_soglia_anomalia = None
        self._impresa_esclusa_automaticamente = None
        self._offerta_anomala = None
        self.discriminator = None
        self.id_partecipante = id_partecipante
        self.importo = importo
        if aggiudicatario is not None:
            self.aggiudicatario = aggiudicatario
        self.ccnl = ccnl
        if posizione_graduatoria is not None:
            self.posizione_graduatoria = posizione_graduatoria
        if offerta_economica is not None:
            self.offerta_economica = offerta_economica
        if offerta_qualitativa is not None:
            self.offerta_qualitativa = offerta_qualitativa
        if offerta_in_aumento is not None:
            self.offerta_in_aumento = offerta_in_aumento
        if offerta_maggiore_soglia_anomalia is not None:
            self.offerta_maggiore_soglia_anomalia = offerta_maggiore_soglia_anomalia
        if impresa_esclusa_automaticamente is not None:
            self.impresa_esclusa_automaticamente = impresa_esclusa_automaticamente
        if offerta_anomala is not None:
            self.offerta_anomala = offerta_anomala

    @property
    def id_partecipante(self):
        """Gets the id_partecipante of this OfferteType.  # noqa: E501

        id partecipante  # noqa: E501

        :return: The id_partecipante of this OfferteType.  # noqa: E501
        :rtype: str
        """
        return self._id_partecipante

    @id_partecipante.setter
    def id_partecipante(self, id_partecipante):
        """Sets the id_partecipante of this OfferteType.

        id partecipante  # noqa: E501

        :param id_partecipante: The id_partecipante of this OfferteType.  # noqa: E501
        :type: str
        """
        if id_partecipante is None:
            raise ValueError("Invalid value for `id_partecipante`, must not be `None`")  # noqa: E501

        self._id_partecipante = id_partecipante

    @property
    def importo(self):
        """Gets the importo of this OfferteType.  # noqa: E501

        Importo  # noqa: E501

        :return: The importo of this OfferteType.  # noqa: E501
        :rtype: float
        """
        return self._importo

    @importo.setter
    def importo(self, importo):
        """Sets the importo of this OfferteType.

        Importo  # noqa: E501

        :param importo: The importo of this OfferteType.  # noqa: E501
        :type: float
        """
        if importo is None:
            raise ValueError("Invalid value for `importo`, must not be `None`")  # noqa: E501

        self._importo = importo

    @property
    def aggiudicatario(self):
        """Gets the aggiudicatario of this OfferteType.  # noqa: E501

        indicare se è un aggiudicatario  # noqa: E501

        :return: The aggiudicatario of this OfferteType.  # noqa: E501
        :rtype: bool
        """
        return self._aggiudicatario

    @aggiudicatario.setter
    def aggiudicatario(self, aggiudicatario):
        """Sets the aggiudicatario of this OfferteType.

        indicare se è un aggiudicatario  # noqa: E501

        :param aggiudicatario: The aggiudicatario of this OfferteType.  # noqa: E501
        :type: bool
        """

        self._aggiudicatario = aggiudicatario

    @property
    def ccnl(self):
        """Gets the ccnl of this OfferteType.  # noqa: E501

        Contratto Collettivo applicato dall'aggiudicatario. Indicare il codice CNEL o non applicabile  # noqa: E501

        :return: The ccnl of this OfferteType.  # noqa: E501
        :rtype: str
        """
        return self._ccnl

    @ccnl.setter
    def ccnl(self, ccnl):
        """Sets the ccnl of this OfferteType.

        Contratto Collettivo applicato dall'aggiudicatario. Indicare il codice CNEL o non applicabile  # noqa: E501

        :param ccnl: The ccnl of this OfferteType.  # noqa: E501
        :type: str
        """
        if ccnl is None:
            raise ValueError("Invalid value for `ccnl`, must not be `None`")  # noqa: E501

        self._ccnl = ccnl

    @property
    def posizione_graduatoria(self):
        """Gets the posizione_graduatoria of this OfferteType.  # noqa: E501

        Posizione in graduatoria  # noqa: E501

        :return: The posizione_graduatoria of this OfferteType.  # noqa: E501
        :rtype: float
        """
        return self._posizione_graduatoria

    @posizione_graduatoria.setter
    def posizione_graduatoria(self, posizione_graduatoria):
        """Sets the posizione_graduatoria of this OfferteType.

        Posizione in graduatoria  # noqa: E501

        :param posizione_graduatoria: The posizione_graduatoria of this OfferteType.  # noqa: E501
        :type: float
        """

        self._posizione_graduatoria = posizione_graduatoria

    @property
    def offerta_economica(self):
        """Gets the offerta_economica of this OfferteType.  # noqa: E501

        Offerta economica ribasso  # noqa: E501

        :return: The offerta_economica of this OfferteType.  # noqa: E501
        :rtype: float
        """
        return self._offerta_economica

    @offerta_economica.setter
    def offerta_economica(self, offerta_economica):
        """Sets the offerta_economica of this OfferteType.

        Offerta economica ribasso  # noqa: E501

        :param offerta_economica: The offerta_economica of this OfferteType.  # noqa: E501
        :type: float
        """

        self._offerta_economica = offerta_economica

    @property
    def offerta_qualitativa(self):
        """Gets the offerta_qualitativa of this OfferteType.  # noqa: E501

        Offerta qualitativa  # noqa: E501

        :return: The offerta_qualitativa of this OfferteType.  # noqa: E501
        :rtype: float
        """
        return self._offerta_qualitativa

    @offerta_qualitativa.setter
    def offerta_qualitativa(self, offerta_qualitativa):
        """Sets the offerta_qualitativa of this OfferteType.

        Offerta qualitativa  # noqa: E501

        :param offerta_qualitativa: The offerta_qualitativa of this OfferteType.  # noqa: E501
        :type: float
        """

        self._offerta_qualitativa = offerta_qualitativa

    @property
    def offerta_in_aumento(self):
        """Gets the offerta_in_aumento of this OfferteType.  # noqa: E501

        Offerta in aumento  # noqa: E501

        :return: The offerta_in_aumento of this OfferteType.  # noqa: E501
        :rtype: float
        """
        return self._offerta_in_aumento

    @offerta_in_aumento.setter
    def offerta_in_aumento(self, offerta_in_aumento):
        """Sets the offerta_in_aumento of this OfferteType.

        Offerta in aumento  # noqa: E501

        :param offerta_in_aumento: The offerta_in_aumento of this OfferteType.  # noqa: E501
        :type: float
        """

        self._offerta_in_aumento = offerta_in_aumento

    @property
    def offerta_maggiore_soglia_anomalia(self):
        """Gets the offerta_maggiore_soglia_anomalia of this OfferteType.  # noqa: E501

        L'offerta è maggiore della soglia di anomalia  # noqa: E501

        :return: The offerta_maggiore_soglia_anomalia of this OfferteType.  # noqa: E501
        :rtype: bool
        """
        return self._offerta_maggiore_soglia_anomalia

    @offerta_maggiore_soglia_anomalia.setter
    def offerta_maggiore_soglia_anomalia(self, offerta_maggiore_soglia_anomalia):
        """Sets the offerta_maggiore_soglia_anomalia of this OfferteType.

        L'offerta è maggiore della soglia di anomalia  # noqa: E501

        :param offerta_maggiore_soglia_anomalia: The offerta_maggiore_soglia_anomalia of this OfferteType.  # noqa: E501
        :type: bool
        """

        self._offerta_maggiore_soglia_anomalia = offerta_maggiore_soglia_anomalia

    @property
    def impresa_esclusa_automaticamente(self):
        """Gets the impresa_esclusa_automaticamente of this OfferteType.  # noqa: E501

        L'offerta è stata esclusa automaticamente?  # noqa: E501

        :return: The impresa_esclusa_automaticamente of this OfferteType.  # noqa: E501
        :rtype: bool
        """
        return self._impresa_esclusa_automaticamente

    @impresa_esclusa_automaticamente.setter
    def impresa_esclusa_automaticamente(self, impresa_esclusa_automaticamente):
        """Sets the impresa_esclusa_automaticamente of this OfferteType.

        L'offerta è stata esclusa automaticamente?  # noqa: E501

        :param impresa_esclusa_automaticamente: The impresa_esclusa_automaticamente of this OfferteType.  # noqa: E501
        :type: bool
        """

        self._impresa_esclusa_automaticamente = impresa_esclusa_automaticamente

    @property
    def offerta_anomala(self):
        """Gets the offerta_anomala of this OfferteType.  # noqa: E501

        L'offerta è anomale?  # noqa: E501

        :return: The offerta_anomala of this OfferteType.  # noqa: E501
        :rtype: bool
        """
        return self._offerta_anomala

    @offerta_anomala.setter
    def offerta_anomala(self, offerta_anomala):
        """Sets the offerta_anomala of this OfferteType.

        L'offerta è anomale?  # noqa: E501

        :param offerta_anomala: The offerta_anomala of this OfferteType.  # noqa: E501
        :type: bool
        """

        self._offerta_anomala = offerta_anomala

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OfferteType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OfferteType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
