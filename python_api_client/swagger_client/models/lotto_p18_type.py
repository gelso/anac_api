# coding: utf-8

"""
    Specifiche Servizi Appalto - OpenAPI 3.0

    Sono descritte le specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ufficio.uscp@anticorruzione.it
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LottoP18Type(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'lot_identifier': 'str',
        'ipotesi_collegamento': 'IpotesiCollegamentoType',
        'categoria': 'CategoriaEnum',
        'acquisizione_cup': 'bool',
        'cup_lotto': 'list[str]',
        'ccnl': 'str'
    }

    attribute_map = {
        'lot_identifier': 'lotIdentifier',
        'ipotesi_collegamento': 'ipotesiCollegamento',
        'categoria': 'categoria',
        'acquisizione_cup': 'acquisizioneCup',
        'cup_lotto': 'cupLotto',
        'ccnl': 'ccnl'
    }

    def __init__(self, lot_identifier=None, ipotesi_collegamento=None, categoria=None, acquisizione_cup=None, cup_lotto=None, ccnl=None):  # noqa: E501
        """LottoP18Type - a model defined in Swagger"""  # noqa: E501
        self._lot_identifier = None
        self._ipotesi_collegamento = None
        self._categoria = None
        self._acquisizione_cup = None
        self._cup_lotto = None
        self._ccnl = None
        self.discriminator = None
        self.lot_identifier = lot_identifier
        if ipotesi_collegamento is not None:
            self.ipotesi_collegamento = ipotesi_collegamento
        self.categoria = categoria
        if acquisizione_cup is not None:
            self.acquisizione_cup = acquisizione_cup
        if cup_lotto is not None:
            self.cup_lotto = cup_lotto
        self.ccnl = ccnl

    @property
    def lot_identifier(self):
        """Gets the lot_identifier of this LottoP18Type.  # noqa: E501

        Id univoco del lotto generato dalla stazione appaltante - corrisponde al campo bt-137 - Purpose Lot Identifier del TED  # noqa: E501

        :return: The lot_identifier of this LottoP18Type.  # noqa: E501
        :rtype: str
        """
        return self._lot_identifier

    @lot_identifier.setter
    def lot_identifier(self, lot_identifier):
        """Sets the lot_identifier of this LottoP18Type.

        Id univoco del lotto generato dalla stazione appaltante - corrisponde al campo bt-137 - Purpose Lot Identifier del TED  # noqa: E501

        :param lot_identifier: The lot_identifier of this LottoP18Type.  # noqa: E501
        :type: str
        """
        if lot_identifier is None:
            raise ValueError("Invalid value for `lot_identifier`, must not be `None`")  # noqa: E501

        self._lot_identifier = lot_identifier

    @property
    def ipotesi_collegamento(self):
        """Gets the ipotesi_collegamento of this LottoP18Type.  # noqa: E501


        :return: The ipotesi_collegamento of this LottoP18Type.  # noqa: E501
        :rtype: IpotesiCollegamentoType
        """
        return self._ipotesi_collegamento

    @ipotesi_collegamento.setter
    def ipotesi_collegamento(self, ipotesi_collegamento):
        """Sets the ipotesi_collegamento of this LottoP18Type.


        :param ipotesi_collegamento: The ipotesi_collegamento of this LottoP18Type.  # noqa: E501
        :type: IpotesiCollegamentoType
        """

        self._ipotesi_collegamento = ipotesi_collegamento

    @property
    def categoria(self):
        """Gets the categoria of this LottoP18Type.  # noqa: E501


        :return: The categoria of this LottoP18Type.  # noqa: E501
        :rtype: CategoriaEnum
        """
        return self._categoria

    @categoria.setter
    def categoria(self, categoria):
        """Sets the categoria of this LottoP18Type.


        :param categoria: The categoria of this LottoP18Type.  # noqa: E501
        :type: CategoriaEnum
        """
        if categoria is None:
            raise ValueError("Invalid value for `categoria`, must not be `None`")  # noqa: E501

        self._categoria = categoria

    @property
    def acquisizione_cup(self):
        """Gets the acquisizione_cup of this LottoP18Type.  # noqa: E501

        Il contratto è finalizzato alla realizzazione di progetti d'investimento pubblico per i quali è prevista l'acquisizione del codice CUP ai sensi dell'art. 11 L. 3/2003 e ss.mm.? (E' necessario acquisire e comunicare il CUP per interventi finanziati, anche in parte, con risorse Comunitarie) (Si/No)  # noqa: E501

        :return: The acquisizione_cup of this LottoP18Type.  # noqa: E501
        :rtype: bool
        """
        return self._acquisizione_cup

    @acquisizione_cup.setter
    def acquisizione_cup(self, acquisizione_cup):
        """Sets the acquisizione_cup of this LottoP18Type.

        Il contratto è finalizzato alla realizzazione di progetti d'investimento pubblico per i quali è prevista l'acquisizione del codice CUP ai sensi dell'art. 11 L. 3/2003 e ss.mm.? (E' necessario acquisire e comunicare il CUP per interventi finanziati, anche in parte, con risorse Comunitarie) (Si/No)  # noqa: E501

        :param acquisizione_cup: The acquisizione_cup of this LottoP18Type.  # noqa: E501
        :type: bool
        """

        self._acquisizione_cup = acquisizione_cup

    @property
    def cup_lotto(self):
        """Gets the cup_lotto of this LottoP18Type.  # noqa: E501

        Cup associati al lotto  # noqa: E501

        :return: The cup_lotto of this LottoP18Type.  # noqa: E501
        :rtype: list[str]
        """
        return self._cup_lotto

    @cup_lotto.setter
    def cup_lotto(self, cup_lotto):
        """Sets the cup_lotto of this LottoP18Type.

        Cup associati al lotto  # noqa: E501

        :param cup_lotto: The cup_lotto of this LottoP18Type.  # noqa: E501
        :type: list[str]
        """

        self._cup_lotto = cup_lotto

    @property
    def ccnl(self):
        """Gets the ccnl of this LottoP18Type.  # noqa: E501

        indicare il codice CNEL o non applicabile  # noqa: E501

        :return: The ccnl of this LottoP18Type.  # noqa: E501
        :rtype: str
        """
        return self._ccnl

    @ccnl.setter
    def ccnl(self, ccnl):
        """Sets the ccnl of this LottoP18Type.

        indicare il codice CNEL o non applicabile  # noqa: E501

        :param ccnl: The ccnl of this LottoP18Type.  # noqa: E501
        :type: str
        """
        if ccnl is None:
            raise ValueError("Invalid value for `ccnl`, must not be `None`")  # noqa: E501

        self._ccnl = ccnl

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LottoP18Type, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LottoP18Type):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
