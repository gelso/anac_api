# coding: utf-8

"""
    Specifiche Servizi Appalto - OpenAPI 3.0

    Sono descritte le specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ufficio.uscp@anticorruzione.it
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EsitoOperazioneType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_appalto': 'str',
        'id_pianificazione': 'str',
        'id_scheda': 'object',
        'id_nuova_scheda': 'object',
        'id_avviso': 'str',
        'id_nuovo_avviso': 'str',
        'id_contratto': 'str',
        'esito': 'EsitoEnum',
        'tipo_operazione': 'TipoOperazioneEnum',
        'dettaglio': 'DettaglioEsitoOperazioneEnum',
        'data_controllo': 'datetime',
        'errori': 'list[ErroriEnum]'
    }

    attribute_map = {
        'id_appalto': 'idAppalto',
        'id_pianificazione': 'idPianificazione',
        'id_scheda': 'idScheda',
        'id_nuova_scheda': 'idNuovaScheda',
        'id_avviso': 'idAvviso',
        'id_nuovo_avviso': 'idNuovoAvviso',
        'id_contratto': 'idContratto',
        'esito': 'esito',
        'tipo_operazione': 'tipoOperazione',
        'dettaglio': 'dettaglio',
        'data_controllo': 'dataControllo',
        'errori': 'errori'
    }

    def __init__(self, id_appalto=None, id_pianificazione=None, id_scheda=None, id_nuova_scheda=None, id_avviso=None, id_nuovo_avviso=None, id_contratto=None, esito=None, tipo_operazione=None, dettaglio=None, data_controllo=None, errori=None):  # noqa: E501
        """EsitoOperazioneType - a model defined in Swagger"""  # noqa: E501
        self._id_appalto = None
        self._id_pianificazione = None
        self._id_scheda = None
        self._id_nuova_scheda = None
        self._id_avviso = None
        self._id_nuovo_avviso = None
        self._id_contratto = None
        self._esito = None
        self._tipo_operazione = None
        self._dettaglio = None
        self._data_controllo = None
        self._errori = None
        self.discriminator = None
        if id_appalto is not None:
            self.id_appalto = id_appalto
        if id_pianificazione is not None:
            self.id_pianificazione = id_pianificazione
        if id_scheda is not None:
            self.id_scheda = id_scheda
        if id_nuova_scheda is not None:
            self.id_nuova_scheda = id_nuova_scheda
        if id_avviso is not None:
            self.id_avviso = id_avviso
        if id_nuovo_avviso is not None:
            self.id_nuovo_avviso = id_nuovo_avviso
        if id_contratto is not None:
            self.id_contratto = id_contratto
        if esito is not None:
            self.esito = esito
        if tipo_operazione is not None:
            self.tipo_operazione = tipo_operazione
        if dettaglio is not None:
            self.dettaglio = dettaglio
        if data_controllo is not None:
            self.data_controllo = data_controllo
        if errori is not None:
            self.errori = errori

    @property
    def id_appalto(self):
        """Gets the id_appalto of this EsitoOperazioneType.  # noqa: E501

        identificativo univoco dell'Appalto definito da ANAC. Restituito dall'operazione di creazione Appalto. (A UUID specified by RFC4122)  # noqa: E501

        :return: The id_appalto of this EsitoOperazioneType.  # noqa: E501
        :rtype: str
        """
        return self._id_appalto

    @id_appalto.setter
    def id_appalto(self, id_appalto):
        """Sets the id_appalto of this EsitoOperazioneType.

        identificativo univoco dell'Appalto definito da ANAC. Restituito dall'operazione di creazione Appalto. (A UUID specified by RFC4122)  # noqa: E501

        :param id_appalto: The id_appalto of this EsitoOperazioneType.  # noqa: E501
        :type: str
        """

        self._id_appalto = id_appalto

    @property
    def id_pianificazione(self):
        """Gets the id_pianificazione of this EsitoOperazioneType.  # noqa: E501

        identificativo univoco della Pianificazione definito da ANAC. Restituito dall'operazione di creazione Piano. (A UUID specified by RFC4122)  # noqa: E501

        :return: The id_pianificazione of this EsitoOperazioneType.  # noqa: E501
        :rtype: str
        """
        return self._id_pianificazione

    @id_pianificazione.setter
    def id_pianificazione(self, id_pianificazione):
        """Sets the id_pianificazione of this EsitoOperazioneType.

        identificativo univoco della Pianificazione definito da ANAC. Restituito dall'operazione di creazione Piano. (A UUID specified by RFC4122)  # noqa: E501

        :param id_pianificazione: The id_pianificazione of this EsitoOperazioneType.  # noqa: E501
        :type: str
        """

        self._id_pianificazione = id_pianificazione

    @property
    def id_scheda(self):
        """Gets the id_scheda of this EsitoOperazioneType.  # noqa: E501

        Identificativo univoco della Scheda definito da ANAC. (A UUID specified by RFC4122)  # noqa: E501

        :return: The id_scheda of this EsitoOperazioneType.  # noqa: E501
        :rtype: object
        """
        return self._id_scheda

    @id_scheda.setter
    def id_scheda(self, id_scheda):
        """Sets the id_scheda of this EsitoOperazioneType.

        Identificativo univoco della Scheda definito da ANAC. (A UUID specified by RFC4122)  # noqa: E501

        :param id_scheda: The id_scheda of this EsitoOperazioneType.  # noqa: E501
        :type: object
        """

        self._id_scheda = id_scheda

    @property
    def id_nuova_scheda(self):
        """Gets the id_nuova_scheda of this EsitoOperazioneType.  # noqa: E501

        Identificativo univoco della nuova Scheda definito da ANAC a seguito delle operazioni di modifica-avviso e rettifica-avviso. (A UUID specified by RFC4122)  # noqa: E501

        :return: The id_nuova_scheda of this EsitoOperazioneType.  # noqa: E501
        :rtype: object
        """
        return self._id_nuova_scheda

    @id_nuova_scheda.setter
    def id_nuova_scheda(self, id_nuova_scheda):
        """Sets the id_nuova_scheda of this EsitoOperazioneType.

        Identificativo univoco della nuova Scheda definito da ANAC a seguito delle operazioni di modifica-avviso e rettifica-avviso. (A UUID specified by RFC4122)  # noqa: E501

        :param id_nuova_scheda: The id_nuova_scheda of this EsitoOperazioneType.  # noqa: E501
        :type: object
        """

        self._id_nuova_scheda = id_nuova_scheda

    @property
    def id_avviso(self):
        """Gets the id_avviso of this EsitoOperazioneType.  # noqa: E501

        identificativo univoco dell'Avviso generato da ANAC, qualora il tipo di scheda lo consente, durante l'invocazione delle operazioni dispositive conferma-piano, conferma-appalto, conferma-scheda.  # noqa: E501

        :return: The id_avviso of this EsitoOperazioneType.  # noqa: E501
        :rtype: str
        """
        return self._id_avviso

    @id_avviso.setter
    def id_avviso(self, id_avviso):
        """Sets the id_avviso of this EsitoOperazioneType.

        identificativo univoco dell'Avviso generato da ANAC, qualora il tipo di scheda lo consente, durante l'invocazione delle operazioni dispositive conferma-piano, conferma-appalto, conferma-scheda.  # noqa: E501

        :param id_avviso: The id_avviso of this EsitoOperazioneType.  # noqa: E501
        :type: str
        """

        self._id_avviso = id_avviso

    @property
    def id_nuovo_avviso(self):
        """Gets the id_nuovo_avviso of this EsitoOperazioneType.  # noqa: E501

        identificativo univoco del nuovo Avviso generato da ANAC a seguito delle operazioni di modifica-avviso e rettifica-avviso.  # noqa: E501

        :return: The id_nuovo_avviso of this EsitoOperazioneType.  # noqa: E501
        :rtype: str
        """
        return self._id_nuovo_avviso

    @id_nuovo_avviso.setter
    def id_nuovo_avviso(self, id_nuovo_avviso):
        """Sets the id_nuovo_avviso of this EsitoOperazioneType.

        identificativo univoco del nuovo Avviso generato da ANAC a seguito delle operazioni di modifica-avviso e rettifica-avviso.  # noqa: E501

        :param id_nuovo_avviso: The id_nuovo_avviso of this EsitoOperazioneType.  # noqa: E501
        :type: str
        """

        self._id_nuovo_avviso = id_nuovo_avviso

    @property
    def id_contratto(self):
        """Gets the id_contratto of this EsitoOperazioneType.  # noqa: E501

        identificativo univoco del Contratto generato da ANAC, qualora il tipo di scheda lo consente, durante l'invocazione dell' operazione dispositiva conferma-scheda.  # noqa: E501

        :return: The id_contratto of this EsitoOperazioneType.  # noqa: E501
        :rtype: str
        """
        return self._id_contratto

    @id_contratto.setter
    def id_contratto(self, id_contratto):
        """Sets the id_contratto of this EsitoOperazioneType.

        identificativo univoco del Contratto generato da ANAC, qualora il tipo di scheda lo consente, durante l'invocazione dell' operazione dispositiva conferma-scheda.  # noqa: E501

        :param id_contratto: The id_contratto of this EsitoOperazioneType.  # noqa: E501
        :type: str
        """

        self._id_contratto = id_contratto

    @property
    def esito(self):
        """Gets the esito of this EsitoOperazioneType.  # noqa: E501


        :return: The esito of this EsitoOperazioneType.  # noqa: E501
        :rtype: EsitoEnum
        """
        return self._esito

    @esito.setter
    def esito(self, esito):
        """Sets the esito of this EsitoOperazioneType.


        :param esito: The esito of this EsitoOperazioneType.  # noqa: E501
        :type: EsitoEnum
        """

        self._esito = esito

    @property
    def tipo_operazione(self):
        """Gets the tipo_operazione of this EsitoOperazioneType.  # noqa: E501


        :return: The tipo_operazione of this EsitoOperazioneType.  # noqa: E501
        :rtype: TipoOperazioneEnum
        """
        return self._tipo_operazione

    @tipo_operazione.setter
    def tipo_operazione(self, tipo_operazione):
        """Sets the tipo_operazione of this EsitoOperazioneType.


        :param tipo_operazione: The tipo_operazione of this EsitoOperazioneType.  # noqa: E501
        :type: TipoOperazioneEnum
        """

        self._tipo_operazione = tipo_operazione

    @property
    def dettaglio(self):
        """Gets the dettaglio of this EsitoOperazioneType.  # noqa: E501


        :return: The dettaglio of this EsitoOperazioneType.  # noqa: E501
        :rtype: DettaglioEsitoOperazioneEnum
        """
        return self._dettaglio

    @dettaglio.setter
    def dettaglio(self, dettaglio):
        """Sets the dettaglio of this EsitoOperazioneType.


        :param dettaglio: The dettaglio of this EsitoOperazioneType.  # noqa: E501
        :type: DettaglioEsitoOperazioneEnum
        """

        self._dettaglio = dettaglio

    @property
    def data_controllo(self):
        """Gets the data_controllo of this EsitoOperazioneType.  # noqa: E501

        data in cui è stato effettuato il controllo dell'esito dell'operazione (A date-time specified by ISO 8601 as profiled by RFC 3339)  # noqa: E501

        :return: The data_controllo of this EsitoOperazioneType.  # noqa: E501
        :rtype: datetime
        """
        return self._data_controllo

    @data_controllo.setter
    def data_controllo(self, data_controllo):
        """Sets the data_controllo of this EsitoOperazioneType.

        data in cui è stato effettuato il controllo dell'esito dell'operazione (A date-time specified by ISO 8601 as profiled by RFC 3339)  # noqa: E501

        :param data_controllo: The data_controllo of this EsitoOperazioneType.  # noqa: E501
        :type: datetime
        """

        self._data_controllo = data_controllo

    @property
    def errori(self):
        """Gets the errori of this EsitoOperazioneType.  # noqa: E501

        elenco degli errori  # noqa: E501

        :return: The errori of this EsitoOperazioneType.  # noqa: E501
        :rtype: list[ErroriEnum]
        """
        return self._errori

    @errori.setter
    def errori(self, errori):
        """Sets the errori of this EsitoOperazioneType.

        elenco degli errori  # noqa: E501

        :param errori: The errori of this EsitoOperazioneType.  # noqa: E501
        :type: list[ErroriEnum]
        """

        self._errori = errori

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EsitoOperazioneType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EsitoOperazioneType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
