# coding: utf-8

"""
    Specifiche Servizi Appalto - OpenAPI 3.0

    Sono descritte le specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ufficio.uscp@anticorruzione.it
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SubappaltoType1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_autorizzazione': 'datetime',
        'motivo_mancato_subappalto': 'MotivoMancatoSubappaltoEnum'
    }

    attribute_map = {
        'data_autorizzazione': 'dataAutorizzazione',
        'motivo_mancato_subappalto': 'motivoMancatoSubappalto'
    }

    def __init__(self, data_autorizzazione=None, motivo_mancato_subappalto=None):  # noqa: E501
        """SubappaltoType1 - a model defined in Swagger"""  # noqa: E501
        self._data_autorizzazione = None
        self._motivo_mancato_subappalto = None
        self.discriminator = None
        if data_autorizzazione is not None:
            self.data_autorizzazione = data_autorizzazione
        if motivo_mancato_subappalto is not None:
            self.motivo_mancato_subappalto = motivo_mancato_subappalto

    @property
    def data_autorizzazione(self):
        """Gets the data_autorizzazione of this SubappaltoType1.  # noqa: E501

        Data di autorizzazione del subappalto  # noqa: E501

        :return: The data_autorizzazione of this SubappaltoType1.  # noqa: E501
        :rtype: datetime
        """
        return self._data_autorizzazione

    @data_autorizzazione.setter
    def data_autorizzazione(self, data_autorizzazione):
        """Sets the data_autorizzazione of this SubappaltoType1.

        Data di autorizzazione del subappalto  # noqa: E501

        :param data_autorizzazione: The data_autorizzazione of this SubappaltoType1.  # noqa: E501
        :type: datetime
        """

        self._data_autorizzazione = data_autorizzazione

    @property
    def motivo_mancato_subappalto(self):
        """Gets the motivo_mancato_subappalto of this SubappaltoType1.  # noqa: E501


        :return: The motivo_mancato_subappalto of this SubappaltoType1.  # noqa: E501
        :rtype: MotivoMancatoSubappaltoEnum
        """
        return self._motivo_mancato_subappalto

    @motivo_mancato_subappalto.setter
    def motivo_mancato_subappalto(self, motivo_mancato_subappalto):
        """Sets the motivo_mancato_subappalto of this SubappaltoType1.


        :param motivo_mancato_subappalto: The motivo_mancato_subappalto of this SubappaltoType1.  # noqa: E501
        :type: MotivoMancatoSubappaltoEnum
        """

        self._motivo_mancato_subappalto = motivo_mancato_subappalto

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubappaltoType1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubappaltoType1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
