# coding: utf-8

"""
    Specifiche Servizi Appalto - OpenAPI 3.0

    Sono descritte le specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ufficio.uscp@anticorruzione.it
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConclusioneType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'causa_interruzione_anticipata': 'MotiviInterruzioneEnum',
        'motivi_risoluzione': 'MotiviRisoluzioneEnum',
        'data_stipula': 'datetime',
        'data_esecutivita': 'datetime',
        'data_interruzione_anticipata': 'datetime',
        'oneri_economici_risoluzione_recesso': 'OneriEconomiciRisoluzioneRecessoEnum',
        'importo': 'float',
        'incamerata_polizza': 'bool',
        'data_ultimazione': 'datetime',
        'numero_infortuni': 'float',
        'di_cui_postumi_permanenti': 'float',
        'di_cui_mortali': 'float'
    }

    attribute_map = {
        'causa_interruzione_anticipata': 'causaInterruzioneAnticipata',
        'motivi_risoluzione': 'motiviRisoluzione',
        'data_stipula': 'dataStipula',
        'data_esecutivita': 'dataEsecutivita',
        'data_interruzione_anticipata': 'dataInterruzioneAnticipata',
        'oneri_economici_risoluzione_recesso': 'oneriEconomiciRisoluzioneRecesso',
        'importo': 'importo',
        'incamerata_polizza': 'incamerataPolizza',
        'data_ultimazione': 'dataUltimazione',
        'numero_infortuni': 'numeroInfortuni',
        'di_cui_postumi_permanenti': 'diCuiPostumiPermanenti',
        'di_cui_mortali': 'diCuiMortali'
    }

    def __init__(self, causa_interruzione_anticipata=None, motivi_risoluzione=None, data_stipula=None, data_esecutivita=None, data_interruzione_anticipata=None, oneri_economici_risoluzione_recesso=None, importo=None, incamerata_polizza=None, data_ultimazione=None, numero_infortuni=None, di_cui_postumi_permanenti=None, di_cui_mortali=None):  # noqa: E501
        """ConclusioneType - a model defined in Swagger"""  # noqa: E501
        self._causa_interruzione_anticipata = None
        self._motivi_risoluzione = None
        self._data_stipula = None
        self._data_esecutivita = None
        self._data_interruzione_anticipata = None
        self._oneri_economici_risoluzione_recesso = None
        self._importo = None
        self._incamerata_polizza = None
        self._data_ultimazione = None
        self._numero_infortuni = None
        self._di_cui_postumi_permanenti = None
        self._di_cui_mortali = None
        self.discriminator = None
        if causa_interruzione_anticipata is not None:
            self.causa_interruzione_anticipata = causa_interruzione_anticipata
        if motivi_risoluzione is not None:
            self.motivi_risoluzione = motivi_risoluzione
        if data_stipula is not None:
            self.data_stipula = data_stipula
        if data_esecutivita is not None:
            self.data_esecutivita = data_esecutivita
        if data_interruzione_anticipata is not None:
            self.data_interruzione_anticipata = data_interruzione_anticipata
        if oneri_economici_risoluzione_recesso is not None:
            self.oneri_economici_risoluzione_recesso = oneri_economici_risoluzione_recesso
        if importo is not None:
            self.importo = importo
        if incamerata_polizza is not None:
            self.incamerata_polizza = incamerata_polizza
        if data_ultimazione is not None:
            self.data_ultimazione = data_ultimazione
        if numero_infortuni is not None:
            self.numero_infortuni = numero_infortuni
        if di_cui_postumi_permanenti is not None:
            self.di_cui_postumi_permanenti = di_cui_postumi_permanenti
        if di_cui_mortali is not None:
            self.di_cui_mortali = di_cui_mortali

    @property
    def causa_interruzione_anticipata(self):
        """Gets the causa_interruzione_anticipata of this ConclusioneType.  # noqa: E501


        :return: The causa_interruzione_anticipata of this ConclusioneType.  # noqa: E501
        :rtype: MotiviInterruzioneEnum
        """
        return self._causa_interruzione_anticipata

    @causa_interruzione_anticipata.setter
    def causa_interruzione_anticipata(self, causa_interruzione_anticipata):
        """Sets the causa_interruzione_anticipata of this ConclusioneType.


        :param causa_interruzione_anticipata: The causa_interruzione_anticipata of this ConclusioneType.  # noqa: E501
        :type: MotiviInterruzioneEnum
        """

        self._causa_interruzione_anticipata = causa_interruzione_anticipata

    @property
    def motivi_risoluzione(self):
        """Gets the motivi_risoluzione of this ConclusioneType.  # noqa: E501


        :return: The motivi_risoluzione of this ConclusioneType.  # noqa: E501
        :rtype: MotiviRisoluzioneEnum
        """
        return self._motivi_risoluzione

    @motivi_risoluzione.setter
    def motivi_risoluzione(self, motivi_risoluzione):
        """Sets the motivi_risoluzione of this ConclusioneType.


        :param motivi_risoluzione: The motivi_risoluzione of this ConclusioneType.  # noqa: E501
        :type: MotiviRisoluzioneEnum
        """

        self._motivi_risoluzione = motivi_risoluzione

    @property
    def data_stipula(self):
        """Gets the data_stipula of this ConclusioneType.  # noqa: E501

        Data stipula del contratto  # noqa: E501

        :return: The data_stipula of this ConclusioneType.  # noqa: E501
        :rtype: datetime
        """
        return self._data_stipula

    @data_stipula.setter
    def data_stipula(self, data_stipula):
        """Sets the data_stipula of this ConclusioneType.

        Data stipula del contratto  # noqa: E501

        :param data_stipula: The data_stipula of this ConclusioneType.  # noqa: E501
        :type: datetime
        """

        self._data_stipula = data_stipula

    @property
    def data_esecutivita(self):
        """Gets the data_esecutivita of this ConclusioneType.  # noqa: E501

        Data esecutività del contratto (ove prevista)  # noqa: E501

        :return: The data_esecutivita of this ConclusioneType.  # noqa: E501
        :rtype: datetime
        """
        return self._data_esecutivita

    @data_esecutivita.setter
    def data_esecutivita(self, data_esecutivita):
        """Sets the data_esecutivita of this ConclusioneType.

        Data esecutività del contratto (ove prevista)  # noqa: E501

        :param data_esecutivita: The data_esecutivita of this ConclusioneType.  # noqa: E501
        :type: datetime
        """

        self._data_esecutivita = data_esecutivita

    @property
    def data_interruzione_anticipata(self):
        """Gets the data_interruzione_anticipata of this ConclusioneType.  # noqa: E501

        Data di interruzione anticipata  # noqa: E501

        :return: The data_interruzione_anticipata of this ConclusioneType.  # noqa: E501
        :rtype: datetime
        """
        return self._data_interruzione_anticipata

    @data_interruzione_anticipata.setter
    def data_interruzione_anticipata(self, data_interruzione_anticipata):
        """Sets the data_interruzione_anticipata of this ConclusioneType.

        Data di interruzione anticipata  # noqa: E501

        :param data_interruzione_anticipata: The data_interruzione_anticipata of this ConclusioneType.  # noqa: E501
        :type: datetime
        """

        self._data_interruzione_anticipata = data_interruzione_anticipata

    @property
    def oneri_economici_risoluzione_recesso(self):
        """Gets the oneri_economici_risoluzione_recesso of this ConclusioneType.  # noqa: E501


        :return: The oneri_economici_risoluzione_recesso of this ConclusioneType.  # noqa: E501
        :rtype: OneriEconomiciRisoluzioneRecessoEnum
        """
        return self._oneri_economici_risoluzione_recesso

    @oneri_economici_risoluzione_recesso.setter
    def oneri_economici_risoluzione_recesso(self, oneri_economici_risoluzione_recesso):
        """Sets the oneri_economici_risoluzione_recesso of this ConclusioneType.


        :param oneri_economici_risoluzione_recesso: The oneri_economici_risoluzione_recesso of this ConclusioneType.  # noqa: E501
        :type: OneriEconomiciRisoluzioneRecessoEnum
        """

        self._oneri_economici_risoluzione_recesso = oneri_economici_risoluzione_recesso

    @property
    def importo(self):
        """Gets the importo of this ConclusioneType.  # noqa: E501

        Importo  # noqa: E501

        :return: The importo of this ConclusioneType.  # noqa: E501
        :rtype: float
        """
        return self._importo

    @importo.setter
    def importo(self, importo):
        """Sets the importo of this ConclusioneType.

        Importo  # noqa: E501

        :param importo: The importo of this ConclusioneType.  # noqa: E501
        :type: float
        """

        self._importo = importo

    @property
    def incamerata_polizza(self):
        """Gets the incamerata_polizza of this ConclusioneType.  # noqa: E501

        Incamerata polizza  # noqa: E501

        :return: The incamerata_polizza of this ConclusioneType.  # noqa: E501
        :rtype: bool
        """
        return self._incamerata_polizza

    @incamerata_polizza.setter
    def incamerata_polizza(self, incamerata_polizza):
        """Sets the incamerata_polizza of this ConclusioneType.

        Incamerata polizza  # noqa: E501

        :param incamerata_polizza: The incamerata_polizza of this ConclusioneType.  # noqa: E501
        :type: bool
        """

        self._incamerata_polizza = incamerata_polizza

    @property
    def data_ultimazione(self):
        """Gets the data_ultimazione of this ConclusioneType.  # noqa: E501

        Data di ultimazione della prestazione  # noqa: E501

        :return: The data_ultimazione of this ConclusioneType.  # noqa: E501
        :rtype: datetime
        """
        return self._data_ultimazione

    @data_ultimazione.setter
    def data_ultimazione(self, data_ultimazione):
        """Sets the data_ultimazione of this ConclusioneType.

        Data di ultimazione della prestazione  # noqa: E501

        :param data_ultimazione: The data_ultimazione of this ConclusioneType.  # noqa: E501
        :type: datetime
        """

        self._data_ultimazione = data_ultimazione

    @property
    def numero_infortuni(self):
        """Gets the numero_infortuni of this ConclusioneType.  # noqa: E501

        Numero di infortuni  # noqa: E501

        :return: The numero_infortuni of this ConclusioneType.  # noqa: E501
        :rtype: float
        """
        return self._numero_infortuni

    @numero_infortuni.setter
    def numero_infortuni(self, numero_infortuni):
        """Sets the numero_infortuni of this ConclusioneType.

        Numero di infortuni  # noqa: E501

        :param numero_infortuni: The numero_infortuni of this ConclusioneType.  # noqa: E501
        :type: float
        """

        self._numero_infortuni = numero_infortuni

    @property
    def di_cui_postumi_permanenti(self):
        """Gets the di_cui_postumi_permanenti of this ConclusioneType.  # noqa: E501

        di cui con postumi permanenti  # noqa: E501

        :return: The di_cui_postumi_permanenti of this ConclusioneType.  # noqa: E501
        :rtype: float
        """
        return self._di_cui_postumi_permanenti

    @di_cui_postumi_permanenti.setter
    def di_cui_postumi_permanenti(self, di_cui_postumi_permanenti):
        """Sets the di_cui_postumi_permanenti of this ConclusioneType.

        di cui con postumi permanenti  # noqa: E501

        :param di_cui_postumi_permanenti: The di_cui_postumi_permanenti of this ConclusioneType.  # noqa: E501
        :type: float
        """

        self._di_cui_postumi_permanenti = di_cui_postumi_permanenti

    @property
    def di_cui_mortali(self):
        """Gets the di_cui_mortali of this ConclusioneType.  # noqa: E501

        di cui mortali  # noqa: E501

        :return: The di_cui_mortali of this ConclusioneType.  # noqa: E501
        :rtype: float
        """
        return self._di_cui_mortali

    @di_cui_mortali.setter
    def di_cui_mortali(self, di_cui_mortali):
        """Sets the di_cui_mortali of this ConclusioneType.

        di cui mortali  # noqa: E501

        :param di_cui_mortali: The di_cui_mortali of this ConclusioneType.  # noqa: E501
        :type: float
        """

        self._di_cui_mortali = di_cui_mortali

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConclusioneType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConclusioneType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
