# coding: utf-8

"""
    Specifiche Servizi Appalto - OpenAPI 3.0

    Sono descritte le specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ufficio.uscp@anticorruzione.it
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AvvisoCommonType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_avviso': 'str',
        'data_creazione': 'datetime',
        'data_pubblicazione': 'datetime',
        'data_controllo': 'datetime',
        'stato': 'StatoAvvisoEnum',
        'azione': 'TipoAzioneAvvisoEnum',
        'dati_pubblicazione_eu': 'DatiPubblicazioneEUType',
        'dati_pubblicazione_it': 'DatiPubblicazioneITType'
    }

    attribute_map = {
        'id_avviso': 'idAvviso',
        'data_creazione': 'dataCreazione',
        'data_pubblicazione': 'dataPubblicazione',
        'data_controllo': 'dataControllo',
        'stato': 'stato',
        'azione': 'azione',
        'dati_pubblicazione_eu': 'datiPubblicazioneEU',
        'dati_pubblicazione_it': 'datiPubblicazioneIT'
    }

    def __init__(self, id_avviso=None, data_creazione=None, data_pubblicazione=None, data_controllo=None, stato=None, azione=None, dati_pubblicazione_eu=None, dati_pubblicazione_it=None):  # noqa: E501
        """AvvisoCommonType - a model defined in Swagger"""  # noqa: E501
        self._id_avviso = None
        self._data_creazione = None
        self._data_pubblicazione = None
        self._data_controllo = None
        self._stato = None
        self._azione = None
        self._dati_pubblicazione_eu = None
        self._dati_pubblicazione_it = None
        self.discriminator = None
        if id_avviso is not None:
            self.id_avviso = id_avviso
        if data_creazione is not None:
            self.data_creazione = data_creazione
        if data_pubblicazione is not None:
            self.data_pubblicazione = data_pubblicazione
        if data_controllo is not None:
            self.data_controllo = data_controllo
        if stato is not None:
            self.stato = stato
        if azione is not None:
            self.azione = azione
        if dati_pubblicazione_eu is not None:
            self.dati_pubblicazione_eu = dati_pubblicazione_eu
        if dati_pubblicazione_it is not None:
            self.dati_pubblicazione_it = dati_pubblicazione_it

    @property
    def id_avviso(self):
        """Gets the id_avviso of this AvvisoCommonType.  # noqa: E501

        identificativo univoco dell'Avviso generato da ANAC.  # noqa: E501

        :return: The id_avviso of this AvvisoCommonType.  # noqa: E501
        :rtype: str
        """
        return self._id_avviso

    @id_avviso.setter
    def id_avviso(self, id_avviso):
        """Sets the id_avviso of this AvvisoCommonType.

        identificativo univoco dell'Avviso generato da ANAC.  # noqa: E501

        :param id_avviso: The id_avviso of this AvvisoCommonType.  # noqa: E501
        :type: str
        """

        self._id_avviso = id_avviso

    @property
    def data_creazione(self):
        """Gets the data_creazione of this AvvisoCommonType.  # noqa: E501

        Data di crezione dell'Avviso  (A date-time specified by ISO 8601 as profiled by RFC 3339)  # noqa: E501

        :return: The data_creazione of this AvvisoCommonType.  # noqa: E501
        :rtype: datetime
        """
        return self._data_creazione

    @data_creazione.setter
    def data_creazione(self, data_creazione):
        """Sets the data_creazione of this AvvisoCommonType.

        Data di crezione dell'Avviso  (A date-time specified by ISO 8601 as profiled by RFC 3339)  # noqa: E501

        :param data_creazione: The data_creazione of this AvvisoCommonType.  # noqa: E501
        :type: datetime
        """

        self._data_creazione = data_creazione

    @property
    def data_pubblicazione(self):
        """Gets the data_pubblicazione of this AvvisoCommonType.  # noqa: E501

        Data di pubblicazione dell'Avviso. (A date-time specified by ISO 8601 as profiled by RFC 3339)  # noqa: E501

        :return: The data_pubblicazione of this AvvisoCommonType.  # noqa: E501
        :rtype: datetime
        """
        return self._data_pubblicazione

    @data_pubblicazione.setter
    def data_pubblicazione(self, data_pubblicazione):
        """Sets the data_pubblicazione of this AvvisoCommonType.

        Data di pubblicazione dell'Avviso. (A date-time specified by ISO 8601 as profiled by RFC 3339)  # noqa: E501

        :param data_pubblicazione: The data_pubblicazione of this AvvisoCommonType.  # noqa: E501
        :type: datetime
        """

        self._data_pubblicazione = data_pubblicazione

    @property
    def data_controllo(self):
        """Gets the data_controllo of this AvvisoCommonType.  # noqa: E501

        data in cui è stato effettuato il controllo dello stato avviso (A date-time specified by ISO 8601 as profiled by RFC 3339)  # noqa: E501

        :return: The data_controllo of this AvvisoCommonType.  # noqa: E501
        :rtype: datetime
        """
        return self._data_controllo

    @data_controllo.setter
    def data_controllo(self, data_controllo):
        """Sets the data_controllo of this AvvisoCommonType.

        data in cui è stato effettuato il controllo dello stato avviso (A date-time specified by ISO 8601 as profiled by RFC 3339)  # noqa: E501

        :param data_controllo: The data_controllo of this AvvisoCommonType.  # noqa: E501
        :type: datetime
        """

        self._data_controllo = data_controllo

    @property
    def stato(self):
        """Gets the stato of this AvvisoCommonType.  # noqa: E501


        :return: The stato of this AvvisoCommonType.  # noqa: E501
        :rtype: StatoAvvisoEnum
        """
        return self._stato

    @stato.setter
    def stato(self, stato):
        """Sets the stato of this AvvisoCommonType.


        :param stato: The stato of this AvvisoCommonType.  # noqa: E501
        :type: StatoAvvisoEnum
        """

        self._stato = stato

    @property
    def azione(self):
        """Gets the azione of this AvvisoCommonType.  # noqa: E501


        :return: The azione of this AvvisoCommonType.  # noqa: E501
        :rtype: TipoAzioneAvvisoEnum
        """
        return self._azione

    @azione.setter
    def azione(self, azione):
        """Sets the azione of this AvvisoCommonType.


        :param azione: The azione of this AvvisoCommonType.  # noqa: E501
        :type: TipoAzioneAvvisoEnum
        """

        self._azione = azione

    @property
    def dati_pubblicazione_eu(self):
        """Gets the dati_pubblicazione_eu of this AvvisoCommonType.  # noqa: E501


        :return: The dati_pubblicazione_eu of this AvvisoCommonType.  # noqa: E501
        :rtype: DatiPubblicazioneEUType
        """
        return self._dati_pubblicazione_eu

    @dati_pubblicazione_eu.setter
    def dati_pubblicazione_eu(self, dati_pubblicazione_eu):
        """Sets the dati_pubblicazione_eu of this AvvisoCommonType.


        :param dati_pubblicazione_eu: The dati_pubblicazione_eu of this AvvisoCommonType.  # noqa: E501
        :type: DatiPubblicazioneEUType
        """

        self._dati_pubblicazione_eu = dati_pubblicazione_eu

    @property
    def dati_pubblicazione_it(self):
        """Gets the dati_pubblicazione_it of this AvvisoCommonType.  # noqa: E501


        :return: The dati_pubblicazione_it of this AvvisoCommonType.  # noqa: E501
        :rtype: DatiPubblicazioneITType
        """
        return self._dati_pubblicazione_it

    @dati_pubblicazione_it.setter
    def dati_pubblicazione_it(self, dati_pubblicazione_it):
        """Sets the dati_pubblicazione_it of this AvvisoCommonType.


        :param dati_pubblicazione_it: The dati_pubblicazione_it of this AvvisoCommonType.  # noqa: E501
        :type: DatiPubblicazioneITType
        """

        self._dati_pubblicazione_it = dati_pubblicazione_it

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AvvisoCommonType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AvvisoCommonType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
