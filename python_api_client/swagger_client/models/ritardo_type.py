# coding: utf-8

"""
    Specifiche Servizi Appalto - OpenAPI 3.0

    Sono descritte le specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ufficio.uscp@anticorruzione.it
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RitardoType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_termine': 'datetime',
        'tipo_comunicazione': 'TipologiaComunicazioneEnum',
        'durata_sospensione': 'float',
        'motivo_sospensione': 'str',
        'data_istanza_recesso': 'datetime',
        'istanza_accolta': 'bool',
        'istanza_tardiva': 'bool',
        'istanza_ripresa': 'bool',
        'istanza_riserva': 'bool',
        'imp_spese': 'float',
        'imp_oneri': 'float'
    }

    attribute_map = {
        'data_termine': 'dataTermine',
        'tipo_comunicazione': 'tipoComunicazione',
        'durata_sospensione': 'durataSospensione',
        'motivo_sospensione': 'motivoSospensione',
        'data_istanza_recesso': 'dataIstanzaRecesso',
        'istanza_accolta': 'istanzaAccolta',
        'istanza_tardiva': 'istanzaTardiva',
        'istanza_ripresa': 'istanzaRipresa',
        'istanza_riserva': 'istanzaRiserva',
        'imp_spese': 'impSpese',
        'imp_oneri': 'impOneri'
    }

    def __init__(self, data_termine=None, tipo_comunicazione=None, durata_sospensione=None, motivo_sospensione=None, data_istanza_recesso=None, istanza_accolta=None, istanza_tardiva=None, istanza_ripresa=None, istanza_riserva=None, imp_spese=None, imp_oneri=None):  # noqa: E501
        """RitardoType - a model defined in Swagger"""  # noqa: E501
        self._data_termine = None
        self._tipo_comunicazione = None
        self._durata_sospensione = None
        self._motivo_sospensione = None
        self._data_istanza_recesso = None
        self._istanza_accolta = None
        self._istanza_tardiva = None
        self._istanza_ripresa = None
        self._istanza_riserva = None
        self._imp_spese = None
        self._imp_oneri = None
        self.discriminator = None
        self.data_termine = data_termine
        self.tipo_comunicazione = tipo_comunicazione
        if durata_sospensione is not None:
            self.durata_sospensione = durata_sospensione
        if motivo_sospensione is not None:
            self.motivo_sospensione = motivo_sospensione
        self.data_istanza_recesso = data_istanza_recesso
        self.istanza_accolta = istanza_accolta
        self.istanza_tardiva = istanza_tardiva
        self.istanza_ripresa = istanza_ripresa
        self.istanza_riserva = istanza_riserva
        self.imp_spese = imp_spese
        if imp_oneri is not None:
            self.imp_oneri = imp_oneri

    @property
    def data_termine(self):
        """Gets the data_termine of this RitardoType.  # noqa: E501

        Termine previsto per la consegna  # noqa: E501

        :return: The data_termine of this RitardoType.  # noqa: E501
        :rtype: datetime
        """
        return self._data_termine

    @data_termine.setter
    def data_termine(self, data_termine):
        """Sets the data_termine of this RitardoType.

        Termine previsto per la consegna  # noqa: E501

        :param data_termine: The data_termine of this RitardoType.  # noqa: E501
        :type: datetime
        """
        if data_termine is None:
            raise ValueError("Invalid value for `data_termine`, must not be `None`")  # noqa: E501

        self._data_termine = data_termine

    @property
    def tipo_comunicazione(self):
        """Gets the tipo_comunicazione of this RitardoType.  # noqa: E501


        :return: The tipo_comunicazione of this RitardoType.  # noqa: E501
        :rtype: TipologiaComunicazioneEnum
        """
        return self._tipo_comunicazione

    @tipo_comunicazione.setter
    def tipo_comunicazione(self, tipo_comunicazione):
        """Sets the tipo_comunicazione of this RitardoType.


        :param tipo_comunicazione: The tipo_comunicazione of this RitardoType.  # noqa: E501
        :type: TipologiaComunicazioneEnum
        """
        if tipo_comunicazione is None:
            raise ValueError("Invalid value for `tipo_comunicazione`, must not be `None`")  # noqa: E501

        self._tipo_comunicazione = tipo_comunicazione

    @property
    def durata_sospensione(self):
        """Gets the durata_sospensione of this RitardoType.  # noqa: E501

        Durata della sospensione in giorni (in caso di sospensione)  # noqa: E501

        :return: The durata_sospensione of this RitardoType.  # noqa: E501
        :rtype: float
        """
        return self._durata_sospensione

    @durata_sospensione.setter
    def durata_sospensione(self, durata_sospensione):
        """Sets the durata_sospensione of this RitardoType.

        Durata della sospensione in giorni (in caso di sospensione)  # noqa: E501

        :param durata_sospensione: The durata_sospensione of this RitardoType.  # noqa: E501
        :type: float
        """

        self._durata_sospensione = durata_sospensione

    @property
    def motivo_sospensione(self):
        """Gets the motivo_sospensione of this RitardoType.  # noqa: E501

        Motivazione della sospensione/ritardo  # noqa: E501

        :return: The motivo_sospensione of this RitardoType.  # noqa: E501
        :rtype: str
        """
        return self._motivo_sospensione

    @motivo_sospensione.setter
    def motivo_sospensione(self, motivo_sospensione):
        """Sets the motivo_sospensione of this RitardoType.

        Motivazione della sospensione/ritardo  # noqa: E501

        :param motivo_sospensione: The motivo_sospensione of this RitardoType.  # noqa: E501
        :type: str
        """

        self._motivo_sospensione = motivo_sospensione

    @property
    def data_istanza_recesso(self):
        """Gets the data_istanza_recesso of this RitardoType.  # noqa: E501

        Data di presentazione dell’istanza di recesso  # noqa: E501

        :return: The data_istanza_recesso of this RitardoType.  # noqa: E501
        :rtype: datetime
        """
        return self._data_istanza_recesso

    @data_istanza_recesso.setter
    def data_istanza_recesso(self, data_istanza_recesso):
        """Sets the data_istanza_recesso of this RitardoType.

        Data di presentazione dell’istanza di recesso  # noqa: E501

        :param data_istanza_recesso: The data_istanza_recesso of this RitardoType.  # noqa: E501
        :type: datetime
        """
        if data_istanza_recesso is None:
            raise ValueError("Invalid value for `data_istanza_recesso`, must not be `None`")  # noqa: E501

        self._data_istanza_recesso = data_istanza_recesso

    @property
    def istanza_accolta(self):
        """Gets the istanza_accolta of this RitardoType.  # noqa: E501

        L'istanza di recesso è stata accolta?  # noqa: E501

        :return: The istanza_accolta of this RitardoType.  # noqa: E501
        :rtype: bool
        """
        return self._istanza_accolta

    @istanza_accolta.setter
    def istanza_accolta(self, istanza_accolta):
        """Sets the istanza_accolta of this RitardoType.

        L'istanza di recesso è stata accolta?  # noqa: E501

        :param istanza_accolta: The istanza_accolta of this RitardoType.  # noqa: E501
        :type: bool
        """
        if istanza_accolta is None:
            raise ValueError("Invalid value for `istanza_accolta`, must not be `None`")  # noqa: E501

        self._istanza_accolta = istanza_accolta

    @property
    def istanza_tardiva(self):
        """Gets the istanza_tardiva of this RitardoType.  # noqa: E501

        Si è proceduto a consegna tardiva (in caso di ritardo)  # noqa: E501

        :return: The istanza_tardiva of this RitardoType.  # noqa: E501
        :rtype: bool
        """
        return self._istanza_tardiva

    @istanza_tardiva.setter
    def istanza_tardiva(self, istanza_tardiva):
        """Sets the istanza_tardiva of this RitardoType.

        Si è proceduto a consegna tardiva (in caso di ritardo)  # noqa: E501

        :param istanza_tardiva: The istanza_tardiva of this RitardoType.  # noqa: E501
        :type: bool
        """
        if istanza_tardiva is None:
            raise ValueError("Invalid value for `istanza_tardiva`, must not be `None`")  # noqa: E501

        self._istanza_tardiva = istanza_tardiva

    @property
    def istanza_ripresa(self):
        """Gets the istanza_ripresa of this RitardoType.  # noqa: E501

        Si è proceduto alla ripresa dei lavori (in caso di sospensione)  # noqa: E501

        :return: The istanza_ripresa of this RitardoType.  # noqa: E501
        :rtype: bool
        """
        return self._istanza_ripresa

    @istanza_ripresa.setter
    def istanza_ripresa(self, istanza_ripresa):
        """Sets the istanza_ripresa of this RitardoType.

        Si è proceduto alla ripresa dei lavori (in caso di sospensione)  # noqa: E501

        :param istanza_ripresa: The istanza_ripresa of this RitardoType.  # noqa: E501
        :type: bool
        """
        if istanza_ripresa is None:
            raise ValueError("Invalid value for `istanza_ripresa`, must not be `None`")  # noqa: E501

        self._istanza_ripresa = istanza_ripresa

    @property
    def istanza_riserva(self):
        """Gets the istanza_riserva of this RitardoType.  # noqa: E501

        L’appaltatore ha formulato riserve  # noqa: E501

        :return: The istanza_riserva of this RitardoType.  # noqa: E501
        :rtype: bool
        """
        return self._istanza_riserva

    @istanza_riserva.setter
    def istanza_riserva(self, istanza_riserva):
        """Sets the istanza_riserva of this RitardoType.

        L’appaltatore ha formulato riserve  # noqa: E501

        :param istanza_riserva: The istanza_riserva of this RitardoType.  # noqa: E501
        :type: bool
        """
        if istanza_riserva is None:
            raise ValueError("Invalid value for `istanza_riserva`, must not be `None`")  # noqa: E501

        self._istanza_riserva = istanza_riserva

    @property
    def imp_spese(self):
        """Gets the imp_spese of this RitardoType.  # noqa: E501

        Eventuale rimborso delle spese in €  # noqa: E501

        :return: The imp_spese of this RitardoType.  # noqa: E501
        :rtype: float
        """
        return self._imp_spese

    @imp_spese.setter
    def imp_spese(self, imp_spese):
        """Sets the imp_spese of this RitardoType.

        Eventuale rimborso delle spese in €  # noqa: E501

        :param imp_spese: The imp_spese of this RitardoType.  # noqa: E501
        :type: float
        """
        if imp_spese is None:
            raise ValueError("Invalid value for `imp_spese`, must not be `None`")  # noqa: E501

        self._imp_spese = imp_spese

    @property
    def imp_oneri(self):
        """Gets the imp_oneri of this RitardoType.  # noqa: E501

        Eventuale compenso degli oneri derivanti dal ritardo in €  # noqa: E501

        :return: The imp_oneri of this RitardoType.  # noqa: E501
        :rtype: float
        """
        return self._imp_oneri

    @imp_oneri.setter
    def imp_oneri(self, imp_oneri):
        """Sets the imp_oneri of this RitardoType.

        Eventuale compenso degli oneri derivanti dal ritardo in €  # noqa: E501

        :param imp_oneri: The imp_oneri of this RitardoType.  # noqa: E501
        :type: float
        """

        self._imp_oneri = imp_oneri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RitardoType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RitardoType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
