# coding: utf-8

"""
    Specifiche Servizi Appalto - OpenAPI 3.0

    Sono descritte le specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ufficio.uscp@anticorruzione.it
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.base_response import BaseResponse  # noqa: F401,E501

class CigListaResponse(BaseResponse):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tot_rows': 'int',
        'tot_pages': 'int',
        'current_page': 'int',
        'element_page': 'int',
        'result': 'list[CigType]'
    }
    if hasattr(BaseResponse, "swagger_types"):
        swagger_types.update(BaseResponse.swagger_types)

    attribute_map = {
        'tot_rows': 'totRows',
        'tot_pages': 'totPages',
        'current_page': 'currentPage',
        'element_page': 'elementPage',
        'result': 'result'
    }
    if hasattr(BaseResponse, "attribute_map"):
        attribute_map.update(BaseResponse.attribute_map)

    def __init__(self, tot_rows=None, tot_pages=None, current_page=None, element_page=None, result=None, *args, **kwargs):  # noqa: E501
        """CigListaResponse - a model defined in Swagger"""  # noqa: E501
        self._tot_rows = None
        self._tot_pages = None
        self._current_page = None
        self._element_page = None
        self._result = None
        self.discriminator = None
        if tot_rows is not None:
            self.tot_rows = tot_rows
        if tot_pages is not None:
            self.tot_pages = tot_pages
        if current_page is not None:
            self.current_page = current_page
        if element_page is not None:
            self.element_page = element_page
        if result is not None:
            self.result = result
        BaseResponse.__init__(self, *args, **kwargs)

    @property
    def tot_rows(self):
        """Gets the tot_rows of this CigListaResponse.  # noqa: E501

        Numero totale di record risultante dalla ricerca  # noqa: E501

        :return: The tot_rows of this CigListaResponse.  # noqa: E501
        :rtype: int
        """
        return self._tot_rows

    @tot_rows.setter
    def tot_rows(self, tot_rows):
        """Sets the tot_rows of this CigListaResponse.

        Numero totale di record risultante dalla ricerca  # noqa: E501

        :param tot_rows: The tot_rows of this CigListaResponse.  # noqa: E501
        :type: int
        """

        self._tot_rows = tot_rows

    @property
    def tot_pages(self):
        """Gets the tot_pages of this CigListaResponse.  # noqa: E501

        Numero totale di pagine risultanti dalla ricerca  # noqa: E501

        :return: The tot_pages of this CigListaResponse.  # noqa: E501
        :rtype: int
        """
        return self._tot_pages

    @tot_pages.setter
    def tot_pages(self, tot_pages):
        """Sets the tot_pages of this CigListaResponse.

        Numero totale di pagine risultanti dalla ricerca  # noqa: E501

        :param tot_pages: The tot_pages of this CigListaResponse.  # noqa: E501
        :type: int
        """

        self._tot_pages = tot_pages

    @property
    def current_page(self):
        """Gets the current_page of this CigListaResponse.  # noqa: E501

        Numero di pagina corrente  # noqa: E501

        :return: The current_page of this CigListaResponse.  # noqa: E501
        :rtype: int
        """
        return self._current_page

    @current_page.setter
    def current_page(self, current_page):
        """Sets the current_page of this CigListaResponse.

        Numero di pagina corrente  # noqa: E501

        :param current_page: The current_page of this CigListaResponse.  # noqa: E501
        :type: int
        """

        self._current_page = current_page

    @property
    def element_page(self):
        """Gets the element_page of this CigListaResponse.  # noqa: E501

        Numero di elementi per pagina  # noqa: E501

        :return: The element_page of this CigListaResponse.  # noqa: E501
        :rtype: int
        """
        return self._element_page

    @element_page.setter
    def element_page(self, element_page):
        """Sets the element_page of this CigListaResponse.

        Numero di elementi per pagina  # noqa: E501

        :param element_page: The element_page of this CigListaResponse.  # noqa: E501
        :type: int
        """

        self._element_page = element_page

    @property
    def result(self):
        """Gets the result of this CigListaResponse.  # noqa: E501

        Lista lotIdentifier-cig  # noqa: E501

        :return: The result of this CigListaResponse.  # noqa: E501
        :rtype: list[CigType]
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this CigListaResponse.

        Lista lotIdentifier-cig  # noqa: E501

        :param result: The result of this CigListaResponse.  # noqa: E501
        :type: list[CigType]
        """

        self._result = result

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CigListaResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CigListaResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
