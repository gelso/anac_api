# coding: utf-8

"""
    Specifiche Servizi Appalto - OpenAPI 3.0

    Sono descritte le specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ufficio.uscp@anticorruzione.it
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AppaltoA7Type(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'motivo_urgenza': 'MotivoUrgenzaEnum',
        'link_documenti': 'str',
        'relazione_unica_sulle_procedure': 'bool',
        'opere_urbanizzazione_scomputo': 'bool'
    }

    attribute_map = {
        'motivo_urgenza': 'motivoUrgenza',
        'link_documenti': 'linkDocumenti',
        'relazione_unica_sulle_procedure': 'relazioneUnicaSulleProcedure',
        'opere_urbanizzazione_scomputo': 'opereUrbanizzazioneScomputo'
    }

    def __init__(self, motivo_urgenza=None, link_documenti=None, relazione_unica_sulle_procedure=None, opere_urbanizzazione_scomputo=None):  # noqa: E501
        """AppaltoA7Type - a model defined in Swagger"""  # noqa: E501
        self._motivo_urgenza = None
        self._link_documenti = None
        self._relazione_unica_sulle_procedure = None
        self._opere_urbanizzazione_scomputo = None
        self.discriminator = None
        self.motivo_urgenza = motivo_urgenza
        if link_documenti is not None:
            self.link_documenti = link_documenti
        if relazione_unica_sulle_procedure is not None:
            self.relazione_unica_sulle_procedure = relazione_unica_sulle_procedure
        if opere_urbanizzazione_scomputo is not None:
            self.opere_urbanizzazione_scomputo = opere_urbanizzazione_scomputo

    @property
    def motivo_urgenza(self):
        """Gets the motivo_urgenza of this AppaltoA7Type.  # noqa: E501


        :return: The motivo_urgenza of this AppaltoA7Type.  # noqa: E501
        :rtype: MotivoUrgenzaEnum
        """
        return self._motivo_urgenza

    @motivo_urgenza.setter
    def motivo_urgenza(self, motivo_urgenza):
        """Sets the motivo_urgenza of this AppaltoA7Type.


        :param motivo_urgenza: The motivo_urgenza of this AppaltoA7Type.  # noqa: E501
        :type: MotivoUrgenzaEnum
        """
        if motivo_urgenza is None:
            raise ValueError("Invalid value for `motivo_urgenza`, must not be `None`")  # noqa: E501

        self._motivo_urgenza = motivo_urgenza

    @property
    def link_documenti(self):
        """Gets the link_documenti of this AppaltoA7Type.  # noqa: E501

        Link ai documenti relativi all’affidamento diretto in somma urgenza e protezione civile (co 10, art 140 nuovo codice)  # noqa: E501

        :return: The link_documenti of this AppaltoA7Type.  # noqa: E501
        :rtype: str
        """
        return self._link_documenti

    @link_documenti.setter
    def link_documenti(self, link_documenti):
        """Sets the link_documenti of this AppaltoA7Type.

        Link ai documenti relativi all’affidamento diretto in somma urgenza e protezione civile (co 10, art 140 nuovo codice)  # noqa: E501

        :param link_documenti: The link_documenti of this AppaltoA7Type.  # noqa: E501
        :type: str
        """

        self._link_documenti = link_documenti

    @property
    def relazione_unica_sulle_procedure(self):
        """Gets the relazione_unica_sulle_procedure of this AppaltoA7Type.  # noqa: E501

        Il sottoscritto dichiara che questa SA ha redatto la Relazione Unica sulle Procedure  # noqa: E501

        :return: The relazione_unica_sulle_procedure of this AppaltoA7Type.  # noqa: E501
        :rtype: bool
        """
        return self._relazione_unica_sulle_procedure

    @relazione_unica_sulle_procedure.setter
    def relazione_unica_sulle_procedure(self, relazione_unica_sulle_procedure):
        """Sets the relazione_unica_sulle_procedure of this AppaltoA7Type.

        Il sottoscritto dichiara che questa SA ha redatto la Relazione Unica sulle Procedure  # noqa: E501

        :param relazione_unica_sulle_procedure: The relazione_unica_sulle_procedure of this AppaltoA7Type.  # noqa: E501
        :type: bool
        """

        self._relazione_unica_sulle_procedure = relazione_unica_sulle_procedure

    @property
    def opere_urbanizzazione_scomputo(self):
        """Gets the opere_urbanizzazione_scomputo of this AppaltoA7Type.  # noqa: E501

        Opere di urbanizzazione a scomputo  # noqa: E501

        :return: The opere_urbanizzazione_scomputo of this AppaltoA7Type.  # noqa: E501
        :rtype: bool
        """
        return self._opere_urbanizzazione_scomputo

    @opere_urbanizzazione_scomputo.setter
    def opere_urbanizzazione_scomputo(self, opere_urbanizzazione_scomputo):
        """Sets the opere_urbanizzazione_scomputo of this AppaltoA7Type.

        Opere di urbanizzazione a scomputo  # noqa: E501

        :param opere_urbanizzazione_scomputo: The opere_urbanizzazione_scomputo of this AppaltoA7Type.  # noqa: E501
        :type: bool
        """

        self._opere_urbanizzazione_scomputo = opere_urbanizzazione_scomputo

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppaltoA7Type, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppaltoA7Type):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
