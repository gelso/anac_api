# coding: utf-8

"""
    Specifiche Servizi Appalto - OpenAPI 3.0

    Sono descritte le specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ufficio.uscp@anticorruzione.it
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CollaudoType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_collaudo': 'datetime',
        'data_certificato': 'datetime',
        'modo_collaudo': 'ModoCollaudoEnum',
        'data_nomina': 'datetime',
        'data_inizio': 'datetime',
        'data_redazione_certificato': 'datetime',
        'data_delibera_ammissibilita': 'datetime',
        'esito': 'str',
        'quadro_economico_standard': 'QuadroEconomicoType',
        'quadro_economico_concessioni': 'QuadroEconomicoConcessioniType',
        'numero_totale_riserve': 'float',
        'oneri': 'float',
        'modalita_definizione': 'list[DefinizioneType]'
    }

    attribute_map = {
        'data_collaudo': 'dataCollaudo',
        'data_certificato': 'dataCertificato',
        'modo_collaudo': 'modoCollaudo',
        'data_nomina': 'dataNomina',
        'data_inizio': 'dataInizio',
        'data_redazione_certificato': 'dataRedazioneCertificato',
        'data_delibera_ammissibilita': 'dataDeliberaAmmissibilita',
        'esito': 'esito',
        'quadro_economico_standard': 'quadroEconomicoStandard',
        'quadro_economico_concessioni': 'quadroEconomicoConcessioni',
        'numero_totale_riserve': 'numeroTotaleRiserve',
        'oneri': 'oneri',
        'modalita_definizione': 'modalitaDefinizione'
    }

    def __init__(self, data_collaudo=None, data_certificato=None, modo_collaudo=None, data_nomina=None, data_inizio=None, data_redazione_certificato=None, data_delibera_ammissibilita=None, esito=None, quadro_economico_standard=None, quadro_economico_concessioni=None, numero_totale_riserve=None, oneri=None, modalita_definizione=None):  # noqa: E501
        """CollaudoType - a model defined in Swagger"""  # noqa: E501
        self._data_collaudo = None
        self._data_certificato = None
        self._modo_collaudo = None
        self._data_nomina = None
        self._data_inizio = None
        self._data_redazione_certificato = None
        self._data_delibera_ammissibilita = None
        self._esito = None
        self._quadro_economico_standard = None
        self._quadro_economico_concessioni = None
        self._numero_totale_riserve = None
        self._oneri = None
        self._modalita_definizione = None
        self.discriminator = None
        if data_collaudo is not None:
            self.data_collaudo = data_collaudo
        if data_certificato is not None:
            self.data_certificato = data_certificato
        if modo_collaudo is not None:
            self.modo_collaudo = modo_collaudo
        if data_nomina is not None:
            self.data_nomina = data_nomina
        if data_inizio is not None:
            self.data_inizio = data_inizio
        if data_redazione_certificato is not None:
            self.data_redazione_certificato = data_redazione_certificato
        if data_delibera_ammissibilita is not None:
            self.data_delibera_ammissibilita = data_delibera_ammissibilita
        self.esito = esito
        if quadro_economico_standard is not None:
            self.quadro_economico_standard = quadro_economico_standard
        if quadro_economico_concessioni is not None:
            self.quadro_economico_concessioni = quadro_economico_concessioni
        if numero_totale_riserve is not None:
            self.numero_totale_riserve = numero_totale_riserve
        if oneri is not None:
            self.oneri = oneri
        if modalita_definizione is not None:
            self.modalita_definizione = modalita_definizione

    @property
    def data_collaudo(self):
        """Gets the data_collaudo of this CollaudoType.  # noqa: E501

        Data del collaudo statico (ove ricorra)  # noqa: E501

        :return: The data_collaudo of this CollaudoType.  # noqa: E501
        :rtype: datetime
        """
        return self._data_collaudo

    @data_collaudo.setter
    def data_collaudo(self, data_collaudo):
        """Sets the data_collaudo of this CollaudoType.

        Data del collaudo statico (ove ricorra)  # noqa: E501

        :param data_collaudo: The data_collaudo of this CollaudoType.  # noqa: E501
        :type: datetime
        """

        self._data_collaudo = data_collaudo

    @property
    def data_certificato(self):
        """Gets the data_certificato of this CollaudoType.  # noqa: E501

        Data del certificato di regolare esecuzione  # noqa: E501

        :return: The data_certificato of this CollaudoType.  # noqa: E501
        :rtype: datetime
        """
        return self._data_certificato

    @data_certificato.setter
    def data_certificato(self, data_certificato):
        """Sets the data_certificato of this CollaudoType.

        Data del certificato di regolare esecuzione  # noqa: E501

        :param data_certificato: The data_certificato of this CollaudoType.  # noqa: E501
        :type: datetime
        """

        self._data_certificato = data_certificato

    @property
    def modo_collaudo(self):
        """Gets the modo_collaudo of this CollaudoType.  # noqa: E501


        :return: The modo_collaudo of this CollaudoType.  # noqa: E501
        :rtype: ModoCollaudoEnum
        """
        return self._modo_collaudo

    @modo_collaudo.setter
    def modo_collaudo(self, modo_collaudo):
        """Sets the modo_collaudo of this CollaudoType.


        :param modo_collaudo: The modo_collaudo of this CollaudoType.  # noqa: E501
        :type: ModoCollaudoEnum
        """

        self._modo_collaudo = modo_collaudo

    @property
    def data_nomina(self):
        """Gets the data_nomina of this CollaudoType.  # noqa: E501

        Data nomina collaudatore/Commissione  # noqa: E501

        :return: The data_nomina of this CollaudoType.  # noqa: E501
        :rtype: datetime
        """
        return self._data_nomina

    @data_nomina.setter
    def data_nomina(self, data_nomina):
        """Sets the data_nomina of this CollaudoType.

        Data nomina collaudatore/Commissione  # noqa: E501

        :param data_nomina: The data_nomina of this CollaudoType.  # noqa: E501
        :type: datetime
        """

        self._data_nomina = data_nomina

    @property
    def data_inizio(self):
        """Gets the data_inizio of this CollaudoType.  # noqa: E501

        Data inizio operazioni di collaudo  # noqa: E501

        :return: The data_inizio of this CollaudoType.  # noqa: E501
        :rtype: datetime
        """
        return self._data_inizio

    @data_inizio.setter
    def data_inizio(self, data_inizio):
        """Sets the data_inizio of this CollaudoType.

        Data inizio operazioni di collaudo  # noqa: E501

        :param data_inizio: The data_inizio of this CollaudoType.  # noqa: E501
        :type: datetime
        """

        self._data_inizio = data_inizio

    @property
    def data_redazione_certificato(self):
        """Gets the data_redazione_certificato of this CollaudoType.  # noqa: E501

        Data redazione certificato di collaudo/ verifica di conformità  # noqa: E501

        :return: The data_redazione_certificato of this CollaudoType.  # noqa: E501
        :rtype: datetime
        """
        return self._data_redazione_certificato

    @data_redazione_certificato.setter
    def data_redazione_certificato(self, data_redazione_certificato):
        """Sets the data_redazione_certificato of this CollaudoType.

        Data redazione certificato di collaudo/ verifica di conformità  # noqa: E501

        :param data_redazione_certificato: The data_redazione_certificato of this CollaudoType.  # noqa: E501
        :type: datetime
        """

        self._data_redazione_certificato = data_redazione_certificato

    @property
    def data_delibera_ammissibilita(self):
        """Gets the data_delibera_ammissibilita of this CollaudoType.  # noqa: E501

        Data delibera di ammissibilità del collaudo (ove prevista)  # noqa: E501

        :return: The data_delibera_ammissibilita of this CollaudoType.  # noqa: E501
        :rtype: datetime
        """
        return self._data_delibera_ammissibilita

    @data_delibera_ammissibilita.setter
    def data_delibera_ammissibilita(self, data_delibera_ammissibilita):
        """Sets the data_delibera_ammissibilita of this CollaudoType.

        Data delibera di ammissibilità del collaudo (ove prevista)  # noqa: E501

        :param data_delibera_ammissibilita: The data_delibera_ammissibilita of this CollaudoType.  # noqa: E501
        :type: datetime
        """

        self._data_delibera_ammissibilita = data_delibera_ammissibilita

    @property
    def esito(self):
        """Gets the esito of this CollaudoType.  # noqa: E501

        Esito del collaudo/ verifica di conformità  # noqa: E501

        :return: The esito of this CollaudoType.  # noqa: E501
        :rtype: str
        """
        return self._esito

    @esito.setter
    def esito(self, esito):
        """Sets the esito of this CollaudoType.

        Esito del collaudo/ verifica di conformità  # noqa: E501

        :param esito: The esito of this CollaudoType.  # noqa: E501
        :type: str
        """
        if esito is None:
            raise ValueError("Invalid value for `esito`, must not be `None`")  # noqa: E501
        allowed_values = ["POSITIVO", "NEGATIVO"]  # noqa: E501
        if esito not in allowed_values:
            raise ValueError(
                "Invalid value for `esito` ({0}), must be one of {1}"  # noqa: E501
                .format(esito, allowed_values)
            )

        self._esito = esito

    @property
    def quadro_economico_standard(self):
        """Gets the quadro_economico_standard of this CollaudoType.  # noqa: E501


        :return: The quadro_economico_standard of this CollaudoType.  # noqa: E501
        :rtype: QuadroEconomicoType
        """
        return self._quadro_economico_standard

    @quadro_economico_standard.setter
    def quadro_economico_standard(self, quadro_economico_standard):
        """Sets the quadro_economico_standard of this CollaudoType.


        :param quadro_economico_standard: The quadro_economico_standard of this CollaudoType.  # noqa: E501
        :type: QuadroEconomicoType
        """

        self._quadro_economico_standard = quadro_economico_standard

    @property
    def quadro_economico_concessioni(self):
        """Gets the quadro_economico_concessioni of this CollaudoType.  # noqa: E501


        :return: The quadro_economico_concessioni of this CollaudoType.  # noqa: E501
        :rtype: QuadroEconomicoConcessioniType
        """
        return self._quadro_economico_concessioni

    @quadro_economico_concessioni.setter
    def quadro_economico_concessioni(self, quadro_economico_concessioni):
        """Sets the quadro_economico_concessioni of this CollaudoType.


        :param quadro_economico_concessioni: The quadro_economico_concessioni of this CollaudoType.  # noqa: E501
        :type: QuadroEconomicoConcessioniType
        """

        self._quadro_economico_concessioni = quadro_economico_concessioni

    @property
    def numero_totale_riserve(self):
        """Gets the numero_totale_riserve of this CollaudoType.  # noqa: E501

        Numero totale riserve definite con accordo bonario  # noqa: E501

        :return: The numero_totale_riserve of this CollaudoType.  # noqa: E501
        :rtype: float
        """
        return self._numero_totale_riserve

    @numero_totale_riserve.setter
    def numero_totale_riserve(self, numero_totale_riserve):
        """Sets the numero_totale_riserve of this CollaudoType.

        Numero totale riserve definite con accordo bonario  # noqa: E501

        :param numero_totale_riserve: The numero_totale_riserve of this CollaudoType.  # noqa: E501
        :type: float
        """

        self._numero_totale_riserve = numero_totale_riserve

    @property
    def oneri(self):
        """Gets the oneri of this CollaudoType.  # noqa: E501

        Oneri complessivi derivanti  # noqa: E501

        :return: The oneri of this CollaudoType.  # noqa: E501
        :rtype: float
        """
        return self._oneri

    @oneri.setter
    def oneri(self, oneri):
        """Sets the oneri of this CollaudoType.

        Oneri complessivi derivanti  # noqa: E501

        :param oneri: The oneri of this CollaudoType.  # noqa: E501
        :type: float
        """

        self._oneri = oneri

    @property
    def modalita_definizione(self):
        """Gets the modalita_definizione of this CollaudoType.  # noqa: E501


        :return: The modalita_definizione of this CollaudoType.  # noqa: E501
        :rtype: list[DefinizioneType]
        """
        return self._modalita_definizione

    @modalita_definizione.setter
    def modalita_definizione(self, modalita_definizione):
        """Sets the modalita_definizione of this CollaudoType.


        :param modalita_definizione: The modalita_definizione of this CollaudoType.  # noqa: E501
        :type: list[DefinizioneType]
        """

        self._modalita_definizione = modalita_definizione

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CollaudoType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CollaudoType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
