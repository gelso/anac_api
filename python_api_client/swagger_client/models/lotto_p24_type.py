# coding: utf-8

"""
    Specifiche Servizi Appalto - OpenAPI 3.0

    Sono descritte le specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ufficio.uscp@anticorruzione.it
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LottoP24Type(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'lot_identifier': 'str',
        'cod_istat': 'CodIstatEnum',
        'lavoro_o_acquisto_previsto_in_programmazione': 'bool',
        'cui': 'str',
        'afferente_investimenti_pnrr': 'bool',
        'motivo_esclusione_ordinario_speciale': 'MotivoEsclusioneOrdinarioSpecialeEnum',
        'acquisizione_cup': 'bool',
        'cup_lotto': 'list[str]',
        'contratti_disposizioni_particolari': 'ContrattiDisposizioniParticolariEnum',
        'finanziamenti': 'list[FinanziamentoType]',
        'quadro_economico_concorsi_progettazione': 'QuadroEconomicoConcorsiProgettazioneType'
    }

    attribute_map = {
        'lot_identifier': 'lotIdentifier',
        'cod_istat': 'codIstat',
        'lavoro_o_acquisto_previsto_in_programmazione': 'lavoroOAcquistoPrevistoInProgrammazione',
        'cui': 'cui',
        'afferente_investimenti_pnrr': 'afferenteInvestimentiPNRR',
        'motivo_esclusione_ordinario_speciale': 'motivoEsclusioneOrdinarioSpeciale',
        'acquisizione_cup': 'acquisizioneCup',
        'cup_lotto': 'cupLotto',
        'contratti_disposizioni_particolari': 'contrattiDisposizioniParticolari',
        'finanziamenti': 'finanziamenti',
        'quadro_economico_concorsi_progettazione': 'quadroEconomicoConcorsiProgettazione'
    }

    def __init__(self, lot_identifier=None, cod_istat=None, lavoro_o_acquisto_previsto_in_programmazione=None, cui=None, afferente_investimenti_pnrr=None, motivo_esclusione_ordinario_speciale=None, acquisizione_cup=None, cup_lotto=None, contratti_disposizioni_particolari=None, finanziamenti=None, quadro_economico_concorsi_progettazione=None):  # noqa: E501
        """LottoP24Type - a model defined in Swagger"""  # noqa: E501
        self._lot_identifier = None
        self._cod_istat = None
        self._lavoro_o_acquisto_previsto_in_programmazione = None
        self._cui = None
        self._afferente_investimenti_pnrr = None
        self._motivo_esclusione_ordinario_speciale = None
        self._acquisizione_cup = None
        self._cup_lotto = None
        self._contratti_disposizioni_particolari = None
        self._finanziamenti = None
        self._quadro_economico_concorsi_progettazione = None
        self.discriminator = None
        self.lot_identifier = lot_identifier
        self.cod_istat = cod_istat
        if lavoro_o_acquisto_previsto_in_programmazione is not None:
            self.lavoro_o_acquisto_previsto_in_programmazione = lavoro_o_acquisto_previsto_in_programmazione
        if cui is not None:
            self.cui = cui
        self.afferente_investimenti_pnrr = afferente_investimenti_pnrr
        if motivo_esclusione_ordinario_speciale is not None:
            self.motivo_esclusione_ordinario_speciale = motivo_esclusione_ordinario_speciale
        self.acquisizione_cup = acquisizione_cup
        if cup_lotto is not None:
            self.cup_lotto = cup_lotto
        self.contratti_disposizioni_particolari = contratti_disposizioni_particolari
        if finanziamenti is not None:
            self.finanziamenti = finanziamenti
        if quadro_economico_concorsi_progettazione is not None:
            self.quadro_economico_concorsi_progettazione = quadro_economico_concorsi_progettazione

    @property
    def lot_identifier(self):
        """Gets the lot_identifier of this LottoP24Type.  # noqa: E501

        Id univoco del lotto generato dalla stazione appaltante - corrisponde al campo bt-137 - Purpose Lot Identifier del TED  # noqa: E501

        :return: The lot_identifier of this LottoP24Type.  # noqa: E501
        :rtype: str
        """
        return self._lot_identifier

    @lot_identifier.setter
    def lot_identifier(self, lot_identifier):
        """Sets the lot_identifier of this LottoP24Type.

        Id univoco del lotto generato dalla stazione appaltante - corrisponde al campo bt-137 - Purpose Lot Identifier del TED  # noqa: E501

        :param lot_identifier: The lot_identifier of this LottoP24Type.  # noqa: E501
        :type: str
        """
        if lot_identifier is None:
            raise ValueError("Invalid value for `lot_identifier`, must not be `None`")  # noqa: E501

        self._lot_identifier = lot_identifier

    @property
    def cod_istat(self):
        """Gets the cod_istat of this LottoP24Type.  # noqa: E501


        :return: The cod_istat of this LottoP24Type.  # noqa: E501
        :rtype: CodIstatEnum
        """
        return self._cod_istat

    @cod_istat.setter
    def cod_istat(self, cod_istat):
        """Sets the cod_istat of this LottoP24Type.


        :param cod_istat: The cod_istat of this LottoP24Type.  # noqa: E501
        :type: CodIstatEnum
        """
        if cod_istat is None:
            raise ValueError("Invalid value for `cod_istat`, must not be `None`")  # noqa: E501

        self._cod_istat = cod_istat

    @property
    def lavoro_o_acquisto_previsto_in_programmazione(self):
        """Gets the lavoro_o_acquisto_previsto_in_programmazione of this LottoP24Type.  # noqa: E501

        Il lavoro o l’acquisto di bene o servizio è stato previsto all’interno della programmazione  # noqa: E501

        :return: The lavoro_o_acquisto_previsto_in_programmazione of this LottoP24Type.  # noqa: E501
        :rtype: bool
        """
        return self._lavoro_o_acquisto_previsto_in_programmazione

    @lavoro_o_acquisto_previsto_in_programmazione.setter
    def lavoro_o_acquisto_previsto_in_programmazione(self, lavoro_o_acquisto_previsto_in_programmazione):
        """Sets the lavoro_o_acquisto_previsto_in_programmazione of this LottoP24Type.

        Il lavoro o l’acquisto di bene o servizio è stato previsto all’interno della programmazione  # noqa: E501

        :param lavoro_o_acquisto_previsto_in_programmazione: The lavoro_o_acquisto_previsto_in_programmazione of this LottoP24Type.  # noqa: E501
        :type: bool
        """

        self._lavoro_o_acquisto_previsto_in_programmazione = lavoro_o_acquisto_previsto_in_programmazione

    @property
    def cui(self):
        """Gets the cui of this LottoP24Type.  # noqa: E501

        CUI programma triennale lavori pubblici o programma biennale forniture e servizi  # noqa: E501

        :return: The cui of this LottoP24Type.  # noqa: E501
        :rtype: str
        """
        return self._cui

    @cui.setter
    def cui(self, cui):
        """Sets the cui of this LottoP24Type.

        CUI programma triennale lavori pubblici o programma biennale forniture e servizi  # noqa: E501

        :param cui: The cui of this LottoP24Type.  # noqa: E501
        :type: str
        """

        self._cui = cui

    @property
    def afferente_investimenti_pnrr(self):
        """Gets the afferente_investimenti_pnrr of this LottoP24Type.  # noqa: E501

        L’appalto o concessione è afferente gli investimenti pubblici finanziati, in tutto o in parte, con le risorse previste dal PNRR (Piano Nazionale di Ripresa e Resilienza) e/o dal PNC (Piano nazionale per gli investimenti complementari)?  # noqa: E501

        :return: The afferente_investimenti_pnrr of this LottoP24Type.  # noqa: E501
        :rtype: bool
        """
        return self._afferente_investimenti_pnrr

    @afferente_investimenti_pnrr.setter
    def afferente_investimenti_pnrr(self, afferente_investimenti_pnrr):
        """Sets the afferente_investimenti_pnrr of this LottoP24Type.

        L’appalto o concessione è afferente gli investimenti pubblici finanziati, in tutto o in parte, con le risorse previste dal PNRR (Piano Nazionale di Ripresa e Resilienza) e/o dal PNC (Piano nazionale per gli investimenti complementari)?  # noqa: E501

        :param afferente_investimenti_pnrr: The afferente_investimenti_pnrr of this LottoP24Type.  # noqa: E501
        :type: bool
        """
        if afferente_investimenti_pnrr is None:
            raise ValueError("Invalid value for `afferente_investimenti_pnrr`, must not be `None`")  # noqa: E501

        self._afferente_investimenti_pnrr = afferente_investimenti_pnrr

    @property
    def motivo_esclusione_ordinario_speciale(self):
        """Gets the motivo_esclusione_ordinario_speciale of this LottoP24Type.  # noqa: E501


        :return: The motivo_esclusione_ordinario_speciale of this LottoP24Type.  # noqa: E501
        :rtype: MotivoEsclusioneOrdinarioSpecialeEnum
        """
        return self._motivo_esclusione_ordinario_speciale

    @motivo_esclusione_ordinario_speciale.setter
    def motivo_esclusione_ordinario_speciale(self, motivo_esclusione_ordinario_speciale):
        """Sets the motivo_esclusione_ordinario_speciale of this LottoP24Type.


        :param motivo_esclusione_ordinario_speciale: The motivo_esclusione_ordinario_speciale of this LottoP24Type.  # noqa: E501
        :type: MotivoEsclusioneOrdinarioSpecialeEnum
        """

        self._motivo_esclusione_ordinario_speciale = motivo_esclusione_ordinario_speciale

    @property
    def acquisizione_cup(self):
        """Gets the acquisizione_cup of this LottoP24Type.  # noqa: E501

        Il contratto è finalizzato alla realizzazione di progetti d'investimento pubblico per i quali è prevista l'acquisizione del codice CUP ai sensi dell'art. 11 L. 3/2003 e ss.mm.? (E' necessario acquisire e comunicare il CUP per interventi finanziati, anche in parte, con risorse Comunitarie) (Si/No)  # noqa: E501

        :return: The acquisizione_cup of this LottoP24Type.  # noqa: E501
        :rtype: bool
        """
        return self._acquisizione_cup

    @acquisizione_cup.setter
    def acquisizione_cup(self, acquisizione_cup):
        """Sets the acquisizione_cup of this LottoP24Type.

        Il contratto è finalizzato alla realizzazione di progetti d'investimento pubblico per i quali è prevista l'acquisizione del codice CUP ai sensi dell'art. 11 L. 3/2003 e ss.mm.? (E' necessario acquisire e comunicare il CUP per interventi finanziati, anche in parte, con risorse Comunitarie) (Si/No)  # noqa: E501

        :param acquisizione_cup: The acquisizione_cup of this LottoP24Type.  # noqa: E501
        :type: bool
        """
        if acquisizione_cup is None:
            raise ValueError("Invalid value for `acquisizione_cup`, must not be `None`")  # noqa: E501

        self._acquisizione_cup = acquisizione_cup

    @property
    def cup_lotto(self):
        """Gets the cup_lotto of this LottoP24Type.  # noqa: E501

        Cup associati al lotto  # noqa: E501

        :return: The cup_lotto of this LottoP24Type.  # noqa: E501
        :rtype: list[str]
        """
        return self._cup_lotto

    @cup_lotto.setter
    def cup_lotto(self, cup_lotto):
        """Sets the cup_lotto of this LottoP24Type.

        Cup associati al lotto  # noqa: E501

        :param cup_lotto: The cup_lotto of this LottoP24Type.  # noqa: E501
        :type: list[str]
        """

        self._cup_lotto = cup_lotto

    @property
    def contratti_disposizioni_particolari(self):
        """Gets the contratti_disposizioni_particolari of this LottoP24Type.  # noqa: E501


        :return: The contratti_disposizioni_particolari of this LottoP24Type.  # noqa: E501
        :rtype: ContrattiDisposizioniParticolariEnum
        """
        return self._contratti_disposizioni_particolari

    @contratti_disposizioni_particolari.setter
    def contratti_disposizioni_particolari(self, contratti_disposizioni_particolari):
        """Sets the contratti_disposizioni_particolari of this LottoP24Type.


        :param contratti_disposizioni_particolari: The contratti_disposizioni_particolari of this LottoP24Type.  # noqa: E501
        :type: ContrattiDisposizioniParticolariEnum
        """
        if contratti_disposizioni_particolari is None:
            raise ValueError("Invalid value for `contratti_disposizioni_particolari`, must not be `None`")  # noqa: E501

        self._contratti_disposizioni_particolari = contratti_disposizioni_particolari

    @property
    def finanziamenti(self):
        """Gets the finanziamenti of this LottoP24Type.  # noqa: E501

        Dati relativi ai finanziamenti  # noqa: E501

        :return: The finanziamenti of this LottoP24Type.  # noqa: E501
        :rtype: list[FinanziamentoType]
        """
        return self._finanziamenti

    @finanziamenti.setter
    def finanziamenti(self, finanziamenti):
        """Sets the finanziamenti of this LottoP24Type.

        Dati relativi ai finanziamenti  # noqa: E501

        :param finanziamenti: The finanziamenti of this LottoP24Type.  # noqa: E501
        :type: list[FinanziamentoType]
        """

        self._finanziamenti = finanziamenti

    @property
    def quadro_economico_concorsi_progettazione(self):
        """Gets the quadro_economico_concorsi_progettazione of this LottoP24Type.  # noqa: E501


        :return: The quadro_economico_concorsi_progettazione of this LottoP24Type.  # noqa: E501
        :rtype: QuadroEconomicoConcorsiProgettazioneType
        """
        return self._quadro_economico_concorsi_progettazione

    @quadro_economico_concorsi_progettazione.setter
    def quadro_economico_concorsi_progettazione(self, quadro_economico_concorsi_progettazione):
        """Sets the quadro_economico_concorsi_progettazione of this LottoP24Type.


        :param quadro_economico_concorsi_progettazione: The quadro_economico_concorsi_progettazione of this LottoP24Type.  # noqa: E501
        :type: QuadroEconomicoConcorsiProgettazioneType
        """

        self._quadro_economico_concorsi_progettazione = quadro_economico_concorsi_progettazione

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LottoP24Type, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LottoP24Type):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
