# coding: utf-8

"""
    Specifiche Servizi Appalto - OpenAPI 3.0

    Sono descritte le specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ufficio.uscp@anticorruzione.it
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DatiPubblicazioneEUType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'notice_id': 'str',
        'version_id': 'str',
        'data_controllo': 'datetime',
        'data_inoltro_pubblicazione': 'datetime',
        'data_ricezione_pubblicazione': 'datetime',
        'data_pubblicazione': 'datetime',
        'stato': 'StatoAvvisoEnum',
        'tipo': 'TipoAvvisoEnum'
    }

    attribute_map = {
        'notice_id': 'noticeId',
        'version_id': 'versionId',
        'data_controllo': 'dataControllo',
        'data_inoltro_pubblicazione': 'dataInoltroPubblicazione',
        'data_ricezione_pubblicazione': 'dataRicezionePubblicazione',
        'data_pubblicazione': 'dataPubblicazione',
        'stato': 'stato',
        'tipo': 'tipo'
    }

    def __init__(self, notice_id=None, version_id=None, data_controllo=None, data_inoltro_pubblicazione=None, data_ricezione_pubblicazione=None, data_pubblicazione=None, stato=None, tipo=None):  # noqa: E501
        """DatiPubblicazioneEUType - a model defined in Swagger"""  # noqa: E501
        self._notice_id = None
        self._version_id = None
        self._data_controllo = None
        self._data_inoltro_pubblicazione = None
        self._data_ricezione_pubblicazione = None
        self._data_pubblicazione = None
        self._stato = None
        self._tipo = None
        self.discriminator = None
        if notice_id is not None:
            self.notice_id = notice_id
        if version_id is not None:
            self.version_id = version_id
        if data_controllo is not None:
            self.data_controllo = data_controllo
        if data_inoltro_pubblicazione is not None:
            self.data_inoltro_pubblicazione = data_inoltro_pubblicazione
        if data_ricezione_pubblicazione is not None:
            self.data_ricezione_pubblicazione = data_ricezione_pubblicazione
        if data_pubblicazione is not None:
            self.data_pubblicazione = data_pubblicazione
        if stato is not None:
            self.stato = stato
        if tipo is not None:
            self.tipo = tipo

    @property
    def notice_id(self):
        """Gets the notice_id of this DatiPubblicazioneEUType.  # noqa: E501

        identificativo univoco dell'Avviso inviato al TED.  # noqa: E501

        :return: The notice_id of this DatiPubblicazioneEUType.  # noqa: E501
        :rtype: str
        """
        return self._notice_id

    @notice_id.setter
    def notice_id(self, notice_id):
        """Sets the notice_id of this DatiPubblicazioneEUType.

        identificativo univoco dell'Avviso inviato al TED.  # noqa: E501

        :param notice_id: The notice_id of this DatiPubblicazioneEUType.  # noqa: E501
        :type: str
        """

        self._notice_id = notice_id

    @property
    def version_id(self):
        """Gets the version_id of this DatiPubblicazioneEUType.  # noqa: E501

        versione dell'Avviso inviato al TED.  # noqa: E501

        :return: The version_id of this DatiPubblicazioneEUType.  # noqa: E501
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this DatiPubblicazioneEUType.

        versione dell'Avviso inviato al TED.  # noqa: E501

        :param version_id: The version_id of this DatiPubblicazioneEUType.  # noqa: E501
        :type: str
        """

        self._version_id = version_id

    @property
    def data_controllo(self):
        """Gets the data_controllo of this DatiPubblicazioneEUType.  # noqa: E501

        data in cui è stato effettuato il controllo dello stato avviso sul TED (A date-time specified by ISO 8601 as profiled by RFC 3339)  # noqa: E501

        :return: The data_controllo of this DatiPubblicazioneEUType.  # noqa: E501
        :rtype: datetime
        """
        return self._data_controllo

    @data_controllo.setter
    def data_controllo(self, data_controllo):
        """Sets the data_controllo of this DatiPubblicazioneEUType.

        data in cui è stato effettuato il controllo dello stato avviso sul TED (A date-time specified by ISO 8601 as profiled by RFC 3339)  # noqa: E501

        :param data_controllo: The data_controllo of this DatiPubblicazioneEUType.  # noqa: E501
        :type: datetime
        """

        self._data_controllo = data_controllo

    @property
    def data_inoltro_pubblicazione(self):
        """Gets the data_inoltro_pubblicazione of this DatiPubblicazioneEUType.  # noqa: E501

        data in cui è stato effettuato l'invio dell'avviso al TED (A date-time specified by ISO 8601 as profiled by RFC 3339)  # noqa: E501

        :return: The data_inoltro_pubblicazione of this DatiPubblicazioneEUType.  # noqa: E501
        :rtype: datetime
        """
        return self._data_inoltro_pubblicazione

    @data_inoltro_pubblicazione.setter
    def data_inoltro_pubblicazione(self, data_inoltro_pubblicazione):
        """Sets the data_inoltro_pubblicazione of this DatiPubblicazioneEUType.

        data in cui è stato effettuato l'invio dell'avviso al TED (A date-time specified by ISO 8601 as profiled by RFC 3339)  # noqa: E501

        :param data_inoltro_pubblicazione: The data_inoltro_pubblicazione of this DatiPubblicazioneEUType.  # noqa: E501
        :type: datetime
        """

        self._data_inoltro_pubblicazione = data_inoltro_pubblicazione

    @property
    def data_ricezione_pubblicazione(self):
        """Gets the data_ricezione_pubblicazione of this DatiPubblicazioneEUType.  # noqa: E501

        data in cui è stata confermata dal TED la ricezione dell'avviso (A date-time specified by ISO 8601 as profiled by RFC 3339)  # noqa: E501

        :return: The data_ricezione_pubblicazione of this DatiPubblicazioneEUType.  # noqa: E501
        :rtype: datetime
        """
        return self._data_ricezione_pubblicazione

    @data_ricezione_pubblicazione.setter
    def data_ricezione_pubblicazione(self, data_ricezione_pubblicazione):
        """Sets the data_ricezione_pubblicazione of this DatiPubblicazioneEUType.

        data in cui è stata confermata dal TED la ricezione dell'avviso (A date-time specified by ISO 8601 as profiled by RFC 3339)  # noqa: E501

        :param data_ricezione_pubblicazione: The data_ricezione_pubblicazione of this DatiPubblicazioneEUType.  # noqa: E501
        :type: datetime
        """

        self._data_ricezione_pubblicazione = data_ricezione_pubblicazione

    @property
    def data_pubblicazione(self):
        """Gets the data_pubblicazione of this DatiPubblicazioneEUType.  # noqa: E501

        data di pubblicazione dell'Avviso comunicata dal TED (A date-time specified by ISO 8601 as profiled by RFC 3339)  # noqa: E501

        :return: The data_pubblicazione of this DatiPubblicazioneEUType.  # noqa: E501
        :rtype: datetime
        """
        return self._data_pubblicazione

    @data_pubblicazione.setter
    def data_pubblicazione(self, data_pubblicazione):
        """Sets the data_pubblicazione of this DatiPubblicazioneEUType.

        data di pubblicazione dell'Avviso comunicata dal TED (A date-time specified by ISO 8601 as profiled by RFC 3339)  # noqa: E501

        :param data_pubblicazione: The data_pubblicazione of this DatiPubblicazioneEUType.  # noqa: E501
        :type: datetime
        """

        self._data_pubblicazione = data_pubblicazione

    @property
    def stato(self):
        """Gets the stato of this DatiPubblicazioneEUType.  # noqa: E501


        :return: The stato of this DatiPubblicazioneEUType.  # noqa: E501
        :rtype: StatoAvvisoEnum
        """
        return self._stato

    @stato.setter
    def stato(self, stato):
        """Sets the stato of this DatiPubblicazioneEUType.


        :param stato: The stato of this DatiPubblicazioneEUType.  # noqa: E501
        :type: StatoAvvisoEnum
        """

        self._stato = stato

    @property
    def tipo(self):
        """Gets the tipo of this DatiPubblicazioneEUType.  # noqa: E501


        :return: The tipo of this DatiPubblicazioneEUType.  # noqa: E501
        :rtype: TipoAvvisoEnum
        """
        return self._tipo

    @tipo.setter
    def tipo(self, tipo):
        """Sets the tipo of this DatiPubblicazioneEUType.


        :param tipo: The tipo of this DatiPubblicazioneEUType.  # noqa: E501
        :type: TipoAvvisoEnum
        """

        self._tipo = tipo

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DatiPubblicazioneEUType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatiPubblicazioneEUType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
