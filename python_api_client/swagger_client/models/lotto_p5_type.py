# coding: utf-8

"""
    Specifiche Servizi Appalto - OpenAPI 3.0

    Sono descritte le specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ufficio.uscp@anticorruzione.it
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LottoP5Type(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'lot_identifier': 'str',
        'fattispecie_tracciabilita': 'FattispecieTracciabilitaEnum',
        'importo': 'float',
        'oggetto_principale_contratto': 'OggettoPrincipaleContrattoEnum',
        'oggetto': 'str',
        'scelta_contraente': 'SceltaContraenteEnum',
        'cup': 'str'
    }

    attribute_map = {
        'lot_identifier': 'lotIdentifier',
        'fattispecie_tracciabilita': 'fattispecieTracciabilita',
        'importo': 'importo',
        'oggetto_principale_contratto': 'oggettoPrincipaleContratto',
        'oggetto': 'oggetto',
        'scelta_contraente': 'sceltaContraente',
        'cup': 'cup'
    }

    def __init__(self, lot_identifier=None, fattispecie_tracciabilita=None, importo=None, oggetto_principale_contratto=None, oggetto=None, scelta_contraente=None, cup=None):  # noqa: E501
        """LottoP5Type - a model defined in Swagger"""  # noqa: E501
        self._lot_identifier = None
        self._fattispecie_tracciabilita = None
        self._importo = None
        self._oggetto_principale_contratto = None
        self._oggetto = None
        self._scelta_contraente = None
        self._cup = None
        self.discriminator = None
        self.lot_identifier = lot_identifier
        self.fattispecie_tracciabilita = fattispecie_tracciabilita
        self.importo = importo
        self.oggetto_principale_contratto = oggetto_principale_contratto
        self.oggetto = oggetto
        self.scelta_contraente = scelta_contraente
        if cup is not None:
            self.cup = cup

    @property
    def lot_identifier(self):
        """Gets the lot_identifier of this LottoP5Type.  # noqa: E501

        Id univoco del lotto generato dalla stazione appaltante  # noqa: E501

        :return: The lot_identifier of this LottoP5Type.  # noqa: E501
        :rtype: str
        """
        return self._lot_identifier

    @lot_identifier.setter
    def lot_identifier(self, lot_identifier):
        """Sets the lot_identifier of this LottoP5Type.

        Id univoco del lotto generato dalla stazione appaltante  # noqa: E501

        :param lot_identifier: The lot_identifier of this LottoP5Type.  # noqa: E501
        :type: str
        """
        if lot_identifier is None:
            raise ValueError("Invalid value for `lot_identifier`, must not be `None`")  # noqa: E501

        self._lot_identifier = lot_identifier

    @property
    def fattispecie_tracciabilita(self):
        """Gets the fattispecie_tracciabilita of this LottoP5Type.  # noqa: E501


        :return: The fattispecie_tracciabilita of this LottoP5Type.  # noqa: E501
        :rtype: FattispecieTracciabilitaEnum
        """
        return self._fattispecie_tracciabilita

    @fattispecie_tracciabilita.setter
    def fattispecie_tracciabilita(self, fattispecie_tracciabilita):
        """Sets the fattispecie_tracciabilita of this LottoP5Type.


        :param fattispecie_tracciabilita: The fattispecie_tracciabilita of this LottoP5Type.  # noqa: E501
        :type: FattispecieTracciabilitaEnum
        """
        if fattispecie_tracciabilita is None:
            raise ValueError("Invalid value for `fattispecie_tracciabilita`, must not be `None`")  # noqa: E501

        self._fattispecie_tracciabilita = fattispecie_tracciabilita

    @property
    def importo(self):
        """Gets the importo of this LottoP5Type.  # noqa: E501

        importo  # noqa: E501

        :return: The importo of this LottoP5Type.  # noqa: E501
        :rtype: float
        """
        return self._importo

    @importo.setter
    def importo(self, importo):
        """Sets the importo of this LottoP5Type.

        importo  # noqa: E501

        :param importo: The importo of this LottoP5Type.  # noqa: E501
        :type: float
        """
        if importo is None:
            raise ValueError("Invalid value for `importo`, must not be `None`")  # noqa: E501

        self._importo = importo

    @property
    def oggetto_principale_contratto(self):
        """Gets the oggetto_principale_contratto of this LottoP5Type.  # noqa: E501


        :return: The oggetto_principale_contratto of this LottoP5Type.  # noqa: E501
        :rtype: OggettoPrincipaleContrattoEnum
        """
        return self._oggetto_principale_contratto

    @oggetto_principale_contratto.setter
    def oggetto_principale_contratto(self, oggetto_principale_contratto):
        """Sets the oggetto_principale_contratto of this LottoP5Type.


        :param oggetto_principale_contratto: The oggetto_principale_contratto of this LottoP5Type.  # noqa: E501
        :type: OggettoPrincipaleContrattoEnum
        """
        if oggetto_principale_contratto is None:
            raise ValueError("Invalid value for `oggetto_principale_contratto`, must not be `None`")  # noqa: E501

        self._oggetto_principale_contratto = oggetto_principale_contratto

    @property
    def oggetto(self):
        """Gets the oggetto of this LottoP5Type.  # noqa: E501

        oggetto  # noqa: E501

        :return: The oggetto of this LottoP5Type.  # noqa: E501
        :rtype: str
        """
        return self._oggetto

    @oggetto.setter
    def oggetto(self, oggetto):
        """Sets the oggetto of this LottoP5Type.

        oggetto  # noqa: E501

        :param oggetto: The oggetto of this LottoP5Type.  # noqa: E501
        :type: str
        """
        if oggetto is None:
            raise ValueError("Invalid value for `oggetto`, must not be `None`")  # noqa: E501

        self._oggetto = oggetto

    @property
    def scelta_contraente(self):
        """Gets the scelta_contraente of this LottoP5Type.  # noqa: E501


        :return: The scelta_contraente of this LottoP5Type.  # noqa: E501
        :rtype: SceltaContraenteEnum
        """
        return self._scelta_contraente

    @scelta_contraente.setter
    def scelta_contraente(self, scelta_contraente):
        """Sets the scelta_contraente of this LottoP5Type.


        :param scelta_contraente: The scelta_contraente of this LottoP5Type.  # noqa: E501
        :type: SceltaContraenteEnum
        """
        if scelta_contraente is None:
            raise ValueError("Invalid value for `scelta_contraente`, must not be `None`")  # noqa: E501

        self._scelta_contraente = scelta_contraente

    @property
    def cup(self):
        """Gets the cup of this LottoP5Type.  # noqa: E501

        Cup  # noqa: E501

        :return: The cup of this LottoP5Type.  # noqa: E501
        :rtype: str
        """
        return self._cup

    @cup.setter
    def cup(self, cup):
        """Sets the cup of this LottoP5Type.

        Cup  # noqa: E501

        :param cup: The cup of this LottoP5Type.  # noqa: E501
        :type: str
        """

        self._cup = cup

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LottoP5Type, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LottoP5Type):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
