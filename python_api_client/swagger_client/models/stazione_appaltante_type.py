# coding: utf-8

"""
    Specifiche Servizi Appalto - OpenAPI 3.0

    Sono descritte le specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ufficio.uscp@anticorruzione.it
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StazioneAppaltanteType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'codice_fiscale': 'str',
        'codice_ausa': 'str',
        'codice_centro_costo': 'str',
        'funzioni_svolte': 'list[FunzioniDelegateEnum]',
        'sa_titolare': 'bool'
    }

    attribute_map = {
        'codice_fiscale': 'codiceFiscale',
        'codice_ausa': 'codiceAusa',
        'codice_centro_costo': 'codiceCentroCosto',
        'funzioni_svolte': 'funzioniSvolte',
        'sa_titolare': 'saTitolare'
    }

    def __init__(self, codice_fiscale=None, codice_ausa=None, codice_centro_costo=None, funzioni_svolte=None, sa_titolare=None):  # noqa: E501
        """StazioneAppaltanteType - a model defined in Swagger"""  # noqa: E501
        self._codice_fiscale = None
        self._codice_ausa = None
        self._codice_centro_costo = None
        self._funzioni_svolte = None
        self._sa_titolare = None
        self.discriminator = None
        self.codice_fiscale = codice_fiscale
        self.codice_ausa = codice_ausa
        self.codice_centro_costo = codice_centro_costo
        if funzioni_svolte is not None:
            self.funzioni_svolte = funzioni_svolte
        self.sa_titolare = sa_titolare

    @property
    def codice_fiscale(self):
        """Gets the codice_fiscale of this StazioneAppaltanteType.  # noqa: E501

        Codice fiscale della S.A.  # noqa: E501

        :return: The codice_fiscale of this StazioneAppaltanteType.  # noqa: E501
        :rtype: str
        """
        return self._codice_fiscale

    @codice_fiscale.setter
    def codice_fiscale(self, codice_fiscale):
        """Sets the codice_fiscale of this StazioneAppaltanteType.

        Codice fiscale della S.A.  # noqa: E501

        :param codice_fiscale: The codice_fiscale of this StazioneAppaltanteType.  # noqa: E501
        :type: str
        """
        if codice_fiscale is None:
            raise ValueError("Invalid value for `codice_fiscale`, must not be `None`")  # noqa: E501

        self._codice_fiscale = codice_fiscale

    @property
    def codice_ausa(self):
        """Gets the codice_ausa of this StazioneAppaltanteType.  # noqa: E501

        Codice Ausa della S.A.  # noqa: E501

        :return: The codice_ausa of this StazioneAppaltanteType.  # noqa: E501
        :rtype: str
        """
        return self._codice_ausa

    @codice_ausa.setter
    def codice_ausa(self, codice_ausa):
        """Sets the codice_ausa of this StazioneAppaltanteType.

        Codice Ausa della S.A.  # noqa: E501

        :param codice_ausa: The codice_ausa of this StazioneAppaltanteType.  # noqa: E501
        :type: str
        """
        if codice_ausa is None:
            raise ValueError("Invalid value for `codice_ausa`, must not be `None`")  # noqa: E501

        self._codice_ausa = codice_ausa

    @property
    def codice_centro_costo(self):
        """Gets the codice_centro_costo of this StazioneAppaltanteType.  # noqa: E501

        Codice del centro di costo  # noqa: E501

        :return: The codice_centro_costo of this StazioneAppaltanteType.  # noqa: E501
        :rtype: str
        """
        return self._codice_centro_costo

    @codice_centro_costo.setter
    def codice_centro_costo(self, codice_centro_costo):
        """Sets the codice_centro_costo of this StazioneAppaltanteType.

        Codice del centro di costo  # noqa: E501

        :param codice_centro_costo: The codice_centro_costo of this StazioneAppaltanteType.  # noqa: E501
        :type: str
        """
        if codice_centro_costo is None:
            raise ValueError("Invalid value for `codice_centro_costo`, must not be `None`")  # noqa: E501

        self._codice_centro_costo = codice_centro_costo

    @property
    def funzioni_svolte(self):
        """Gets the funzioni_svolte of this StazioneAppaltanteType.  # noqa: E501


        :return: The funzioni_svolte of this StazioneAppaltanteType.  # noqa: E501
        :rtype: list[FunzioniDelegateEnum]
        """
        return self._funzioni_svolte

    @funzioni_svolte.setter
    def funzioni_svolte(self, funzioni_svolte):
        """Sets the funzioni_svolte of this StazioneAppaltanteType.


        :param funzioni_svolte: The funzioni_svolte of this StazioneAppaltanteType.  # noqa: E501
        :type: list[FunzioniDelegateEnum]
        """

        self._funzioni_svolte = funzioni_svolte

    @property
    def sa_titolare(self):
        """Gets the sa_titolare of this StazioneAppaltanteType.  # noqa: E501

        Stazione appaltante titolare  # noqa: E501

        :return: The sa_titolare of this StazioneAppaltanteType.  # noqa: E501
        :rtype: bool
        """
        return self._sa_titolare

    @sa_titolare.setter
    def sa_titolare(self, sa_titolare):
        """Sets the sa_titolare of this StazioneAppaltanteType.

        Stazione appaltante titolare  # noqa: E501

        :param sa_titolare: The sa_titolare of this StazioneAppaltanteType.  # noqa: E501
        :type: bool
        """
        if sa_titolare is None:
            raise ValueError("Invalid value for `sa_titolare`, must not be `None`")  # noqa: E501

        self._sa_titolare = sa_titolare

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StazioneAppaltanteType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StazioneAppaltanteType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
