# coding: utf-8

"""
    Specifiche Servizi Appalto - OpenAPI 3.0

    Sono descritte le specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ufficio.uscp@anticorruzione.it
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DatiPersonaFisicaType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'codice_fiscale': 'str',
        'cognome': 'str',
        'nome': 'str',
        'telefono': 'str',
        'fax': 'str',
        'email': 'str',
        'indirizzo': 'str',
        'cap': 'str',
        'cod_istat': 'CodIstatEnum',
        'incaricato_estero': 'bool'
    }

    attribute_map = {
        'codice_fiscale': 'codiceFiscale',
        'cognome': 'cognome',
        'nome': 'nome',
        'telefono': 'telefono',
        'fax': 'fax',
        'email': 'email',
        'indirizzo': 'indirizzo',
        'cap': 'cap',
        'cod_istat': 'codIstat',
        'incaricato_estero': 'incaricatoEstero'
    }

    def __init__(self, codice_fiscale=None, cognome=None, nome=None, telefono=None, fax=None, email=None, indirizzo=None, cap=None, cod_istat=None, incaricato_estero=None):  # noqa: E501
        """DatiPersonaFisicaType - a model defined in Swagger"""  # noqa: E501
        self._codice_fiscale = None
        self._cognome = None
        self._nome = None
        self._telefono = None
        self._fax = None
        self._email = None
        self._indirizzo = None
        self._cap = None
        self._cod_istat = None
        self._incaricato_estero = None
        self.discriminator = None
        if codice_fiscale is not None:
            self.codice_fiscale = codice_fiscale
        if cognome is not None:
            self.cognome = cognome
        if nome is not None:
            self.nome = nome
        if telefono is not None:
            self.telefono = telefono
        if fax is not None:
            self.fax = fax
        if email is not None:
            self.email = email
        if indirizzo is not None:
            self.indirizzo = indirizzo
        if cap is not None:
            self.cap = cap
        if cod_istat is not None:
            self.cod_istat = cod_istat
        if incaricato_estero is not None:
            self.incaricato_estero = incaricato_estero

    @property
    def codice_fiscale(self):
        """Gets the codice_fiscale of this DatiPersonaFisicaType.  # noqa: E501

        Codice fiscale  # noqa: E501

        :return: The codice_fiscale of this DatiPersonaFisicaType.  # noqa: E501
        :rtype: str
        """
        return self._codice_fiscale

    @codice_fiscale.setter
    def codice_fiscale(self, codice_fiscale):
        """Sets the codice_fiscale of this DatiPersonaFisicaType.

        Codice fiscale  # noqa: E501

        :param codice_fiscale: The codice_fiscale of this DatiPersonaFisicaType.  # noqa: E501
        :type: str
        """

        self._codice_fiscale = codice_fiscale

    @property
    def cognome(self):
        """Gets the cognome of this DatiPersonaFisicaType.  # noqa: E501

        Cognome  # noqa: E501

        :return: The cognome of this DatiPersonaFisicaType.  # noqa: E501
        :rtype: str
        """
        return self._cognome

    @cognome.setter
    def cognome(self, cognome):
        """Sets the cognome of this DatiPersonaFisicaType.

        Cognome  # noqa: E501

        :param cognome: The cognome of this DatiPersonaFisicaType.  # noqa: E501
        :type: str
        """

        self._cognome = cognome

    @property
    def nome(self):
        """Gets the nome of this DatiPersonaFisicaType.  # noqa: E501

        Nome  # noqa: E501

        :return: The nome of this DatiPersonaFisicaType.  # noqa: E501
        :rtype: str
        """
        return self._nome

    @nome.setter
    def nome(self, nome):
        """Sets the nome of this DatiPersonaFisicaType.

        Nome  # noqa: E501

        :param nome: The nome of this DatiPersonaFisicaType.  # noqa: E501
        :type: str
        """

        self._nome = nome

    @property
    def telefono(self):
        """Gets the telefono of this DatiPersonaFisicaType.  # noqa: E501

        Telefono  # noqa: E501

        :return: The telefono of this DatiPersonaFisicaType.  # noqa: E501
        :rtype: str
        """
        return self._telefono

    @telefono.setter
    def telefono(self, telefono):
        """Sets the telefono of this DatiPersonaFisicaType.

        Telefono  # noqa: E501

        :param telefono: The telefono of this DatiPersonaFisicaType.  # noqa: E501
        :type: str
        """

        self._telefono = telefono

    @property
    def fax(self):
        """Gets the fax of this DatiPersonaFisicaType.  # noqa: E501

        Fax  # noqa: E501

        :return: The fax of this DatiPersonaFisicaType.  # noqa: E501
        :rtype: str
        """
        return self._fax

    @fax.setter
    def fax(self, fax):
        """Sets the fax of this DatiPersonaFisicaType.

        Fax  # noqa: E501

        :param fax: The fax of this DatiPersonaFisicaType.  # noqa: E501
        :type: str
        """

        self._fax = fax

    @property
    def email(self):
        """Gets the email of this DatiPersonaFisicaType.  # noqa: E501

        E-mail  # noqa: E501

        :return: The email of this DatiPersonaFisicaType.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this DatiPersonaFisicaType.

        E-mail  # noqa: E501

        :param email: The email of this DatiPersonaFisicaType.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def indirizzo(self):
        """Gets the indirizzo of this DatiPersonaFisicaType.  # noqa: E501

        Indirizzo  # noqa: E501

        :return: The indirizzo of this DatiPersonaFisicaType.  # noqa: E501
        :rtype: str
        """
        return self._indirizzo

    @indirizzo.setter
    def indirizzo(self, indirizzo):
        """Sets the indirizzo of this DatiPersonaFisicaType.

        Indirizzo  # noqa: E501

        :param indirizzo: The indirizzo of this DatiPersonaFisicaType.  # noqa: E501
        :type: str
        """

        self._indirizzo = indirizzo

    @property
    def cap(self):
        """Gets the cap of this DatiPersonaFisicaType.  # noqa: E501

        CAP  # noqa: E501

        :return: The cap of this DatiPersonaFisicaType.  # noqa: E501
        :rtype: str
        """
        return self._cap

    @cap.setter
    def cap(self, cap):
        """Sets the cap of this DatiPersonaFisicaType.

        CAP  # noqa: E501

        :param cap: The cap of this DatiPersonaFisicaType.  # noqa: E501
        :type: str
        """

        self._cap = cap

    @property
    def cod_istat(self):
        """Gets the cod_istat of this DatiPersonaFisicaType.  # noqa: E501


        :return: The cod_istat of this DatiPersonaFisicaType.  # noqa: E501
        :rtype: CodIstatEnum
        """
        return self._cod_istat

    @cod_istat.setter
    def cod_istat(self, cod_istat):
        """Sets the cod_istat of this DatiPersonaFisicaType.


        :param cod_istat: The cod_istat of this DatiPersonaFisicaType.  # noqa: E501
        :type: CodIstatEnum
        """

        self._cod_istat = cod_istat

    @property
    def incaricato_estero(self):
        """Gets the incaricato_estero of this DatiPersonaFisicaType.  # noqa: E501

        Incaricato Estero  # noqa: E501

        :return: The incaricato_estero of this DatiPersonaFisicaType.  # noqa: E501
        :rtype: bool
        """
        return self._incaricato_estero

    @incaricato_estero.setter
    def incaricato_estero(self, incaricato_estero):
        """Sets the incaricato_estero of this DatiPersonaFisicaType.

        Incaricato Estero  # noqa: E501

        :param incaricato_estero: The incaricato_estero of this DatiPersonaFisicaType.  # noqa: E501
        :type: bool
        """

        self._incaricato_estero = incaricato_estero

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DatiPersonaFisicaType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatiPersonaFisicaType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
