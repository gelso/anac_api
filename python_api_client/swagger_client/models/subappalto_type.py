# coding: utf-8

"""
    Specifiche Servizi Appalto - OpenAPI 3.0

    Sono descritte le specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ufficio.uscp@anticorruzione.it
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SubappaltoType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'codice_fiscale_ditta': 'str',
        'impresa_estera': 'bool',
        'codice_fiscale_aggiudicatario': 'str',
        'codice_fiscale_ditta_a_cascata': 'str',
        'oggetto': 'str',
        'importo_presunto': 'float',
        'categoria': 'CategoriaEnum',
        'cpv': 'list[CPVEnum]'
    }

    attribute_map = {
        'codice_fiscale_ditta': 'codiceFiscaleDitta',
        'impresa_estera': 'impresaEstera',
        'codice_fiscale_aggiudicatario': 'codiceFiscaleAggiudicatario',
        'codice_fiscale_ditta_a_cascata': 'codiceFiscaleDittaACascata',
        'oggetto': 'oggetto',
        'importo_presunto': 'importoPresunto',
        'categoria': 'categoria',
        'cpv': 'cpv'
    }

    def __init__(self, codice_fiscale_ditta=None, impresa_estera=None, codice_fiscale_aggiudicatario=None, codice_fiscale_ditta_a_cascata=None, oggetto=None, importo_presunto=None, categoria=None, cpv=None):  # noqa: E501
        """SubappaltoType - a model defined in Swagger"""  # noqa: E501
        self._codice_fiscale_ditta = None
        self._impresa_estera = None
        self._codice_fiscale_aggiudicatario = None
        self._codice_fiscale_ditta_a_cascata = None
        self._oggetto = None
        self._importo_presunto = None
        self._categoria = None
        self._cpv = None
        self.discriminator = None
        self.codice_fiscale_ditta = codice_fiscale_ditta
        self.impresa_estera = impresa_estera
        if codice_fiscale_aggiudicatario is not None:
            self.codice_fiscale_aggiudicatario = codice_fiscale_aggiudicatario
        if codice_fiscale_ditta_a_cascata is not None:
            self.codice_fiscale_ditta_a_cascata = codice_fiscale_ditta_a_cascata
        if oggetto is not None:
            self.oggetto = oggetto
        self.importo_presunto = importo_presunto
        self.categoria = categoria
        self.cpv = cpv

    @property
    def codice_fiscale_ditta(self):
        """Gets the codice_fiscale_ditta of this SubappaltoType.  # noqa: E501

        Codice fiscale ditta subappaltatrice  # noqa: E501

        :return: The codice_fiscale_ditta of this SubappaltoType.  # noqa: E501
        :rtype: str
        """
        return self._codice_fiscale_ditta

    @codice_fiscale_ditta.setter
    def codice_fiscale_ditta(self, codice_fiscale_ditta):
        """Sets the codice_fiscale_ditta of this SubappaltoType.

        Codice fiscale ditta subappaltatrice  # noqa: E501

        :param codice_fiscale_ditta: The codice_fiscale_ditta of this SubappaltoType.  # noqa: E501
        :type: str
        """
        if codice_fiscale_ditta is None:
            raise ValueError("Invalid value for `codice_fiscale_ditta`, must not be `None`")  # noqa: E501

        self._codice_fiscale_ditta = codice_fiscale_ditta

    @property
    def impresa_estera(self):
        """Gets the impresa_estera of this SubappaltoType.  # noqa: E501

        Impresa estera?  # noqa: E501

        :return: The impresa_estera of this SubappaltoType.  # noqa: E501
        :rtype: bool
        """
        return self._impresa_estera

    @impresa_estera.setter
    def impresa_estera(self, impresa_estera):
        """Sets the impresa_estera of this SubappaltoType.

        Impresa estera?  # noqa: E501

        :param impresa_estera: The impresa_estera of this SubappaltoType.  # noqa: E501
        :type: bool
        """
        if impresa_estera is None:
            raise ValueError("Invalid value for `impresa_estera`, must not be `None`")  # noqa: E501

        self._impresa_estera = impresa_estera

    @property
    def codice_fiscale_aggiudicatario(self):
        """Gets the codice_fiscale_aggiudicatario of this SubappaltoType.  # noqa: E501

        Codice fiscale ditta aggiudicatrice nel caso di aggiudicatari multipli  # noqa: E501

        :return: The codice_fiscale_aggiudicatario of this SubappaltoType.  # noqa: E501
        :rtype: str
        """
        return self._codice_fiscale_aggiudicatario

    @codice_fiscale_aggiudicatario.setter
    def codice_fiscale_aggiudicatario(self, codice_fiscale_aggiudicatario):
        """Sets the codice_fiscale_aggiudicatario of this SubappaltoType.

        Codice fiscale ditta aggiudicatrice nel caso di aggiudicatari multipli  # noqa: E501

        :param codice_fiscale_aggiudicatario: The codice_fiscale_aggiudicatario of this SubappaltoType.  # noqa: E501
        :type: str
        """

        self._codice_fiscale_aggiudicatario = codice_fiscale_aggiudicatario

    @property
    def codice_fiscale_ditta_a_cascata(self):
        """Gets the codice_fiscale_ditta_a_cascata of this SubappaltoType.  # noqa: E501

        Codice fiscale ditta subappaltatrice  # noqa: E501

        :return: The codice_fiscale_ditta_a_cascata of this SubappaltoType.  # noqa: E501
        :rtype: str
        """
        return self._codice_fiscale_ditta_a_cascata

    @codice_fiscale_ditta_a_cascata.setter
    def codice_fiscale_ditta_a_cascata(self, codice_fiscale_ditta_a_cascata):
        """Sets the codice_fiscale_ditta_a_cascata of this SubappaltoType.

        Codice fiscale ditta subappaltatrice  # noqa: E501

        :param codice_fiscale_ditta_a_cascata: The codice_fiscale_ditta_a_cascata of this SubappaltoType.  # noqa: E501
        :type: str
        """

        self._codice_fiscale_ditta_a_cascata = codice_fiscale_ditta_a_cascata

    @property
    def oggetto(self):
        """Gets the oggetto of this SubappaltoType.  # noqa: E501

        Lavoro/Servizio/Fornitura subappalto  # noqa: E501

        :return: The oggetto of this SubappaltoType.  # noqa: E501
        :rtype: str
        """
        return self._oggetto

    @oggetto.setter
    def oggetto(self, oggetto):
        """Sets the oggetto of this SubappaltoType.

        Lavoro/Servizio/Fornitura subappalto  # noqa: E501

        :param oggetto: The oggetto of this SubappaltoType.  # noqa: E501
        :type: str
        """

        self._oggetto = oggetto

    @property
    def importo_presunto(self):
        """Gets the importo_presunto of this SubappaltoType.  # noqa: E501

        Importo presunto Lavoro/ Servizio/Fornitura, subappalto  # noqa: E501

        :return: The importo_presunto of this SubappaltoType.  # noqa: E501
        :rtype: float
        """
        return self._importo_presunto

    @importo_presunto.setter
    def importo_presunto(self, importo_presunto):
        """Sets the importo_presunto of this SubappaltoType.

        Importo presunto Lavoro/ Servizio/Fornitura, subappalto  # noqa: E501

        :param importo_presunto: The importo_presunto of this SubappaltoType.  # noqa: E501
        :type: float
        """
        if importo_presunto is None:
            raise ValueError("Invalid value for `importo_presunto`, must not be `None`")  # noqa: E501

        self._importo_presunto = importo_presunto

    @property
    def categoria(self):
        """Gets the categoria of this SubappaltoType.  # noqa: E501


        :return: The categoria of this SubappaltoType.  # noqa: E501
        :rtype: CategoriaEnum
        """
        return self._categoria

    @categoria.setter
    def categoria(self, categoria):
        """Sets the categoria of this SubappaltoType.


        :param categoria: The categoria of this SubappaltoType.  # noqa: E501
        :type: CategoriaEnum
        """
        if categoria is None:
            raise ValueError("Invalid value for `categoria`, must not be `None`")  # noqa: E501

        self._categoria = categoria

    @property
    def cpv(self):
        """Gets the cpv of this SubappaltoType.  # noqa: E501


        :return: The cpv of this SubappaltoType.  # noqa: E501
        :rtype: list[CPVEnum]
        """
        return self._cpv

    @cpv.setter
    def cpv(self, cpv):
        """Sets the cpv of this SubappaltoType.


        :param cpv: The cpv of this SubappaltoType.  # noqa: E501
        :type: list[CPVEnum]
        """
        if cpv is None:
            raise ValueError("Invalid value for `cpv`, must not be `None`")  # noqa: E501

        self._cpv = cpv

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubappaltoType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubappaltoType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
