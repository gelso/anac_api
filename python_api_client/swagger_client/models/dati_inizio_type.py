# coding: utf-8

"""
    Specifiche Servizi Appalto - OpenAPI 3.0

    Sono descritte le specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ufficio.uscp@anticorruzione.it
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DatiInizioType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_disposizione_inzio': 'datetime',
        'data_approvazione': 'datetime',
        'consegna_frazionata': 'bool',
        'avvio_per_fasi': 'bool',
        'data_verbale_prima_consegna': 'datetime',
        'data_avvio_prima_fase': 'datetime',
        'data_verbale_consegna_definitiva': 'datetime',
        'consegna_sotto_riserva': 'bool',
        'data_effettivo_inizio': 'datetime',
        'data_fine_prevista': 'datetime'
    }

    attribute_map = {
        'data_disposizione_inzio': 'dataDisposizioneInzio',
        'data_approvazione': 'dataApprovazione',
        'consegna_frazionata': 'consegnaFrazionata',
        'avvio_per_fasi': 'avvioPerFasi',
        'data_verbale_prima_consegna': 'dataVerbalePrimaConsegna',
        'data_avvio_prima_fase': 'dataAvvioPrimaFase',
        'data_verbale_consegna_definitiva': 'dataVerbaleConsegnaDefinitiva',
        'consegna_sotto_riserva': 'consegnaSottoRiserva',
        'data_effettivo_inizio': 'dataEffettivoInizio',
        'data_fine_prevista': 'dataFinePrevista'
    }

    def __init__(self, data_disposizione_inzio=None, data_approvazione=None, consegna_frazionata=None, avvio_per_fasi=None, data_verbale_prima_consegna=None, data_avvio_prima_fase=None, data_verbale_consegna_definitiva=None, consegna_sotto_riserva=None, data_effettivo_inizio=None, data_fine_prevista=None):  # noqa: E501
        """DatiInizioType - a model defined in Swagger"""  # noqa: E501
        self._data_disposizione_inzio = None
        self._data_approvazione = None
        self._consegna_frazionata = None
        self._avvio_per_fasi = None
        self._data_verbale_prima_consegna = None
        self._data_avvio_prima_fase = None
        self._data_verbale_consegna_definitiva = None
        self._consegna_sotto_riserva = None
        self._data_effettivo_inizio = None
        self._data_fine_prevista = None
        self.discriminator = None
        if data_disposizione_inzio is not None:
            self.data_disposizione_inzio = data_disposizione_inzio
        if data_approvazione is not None:
            self.data_approvazione = data_approvazione
        self.consegna_frazionata = consegna_frazionata
        self.avvio_per_fasi = avvio_per_fasi
        if data_verbale_prima_consegna is not None:
            self.data_verbale_prima_consegna = data_verbale_prima_consegna
        if data_avvio_prima_fase is not None:
            self.data_avvio_prima_fase = data_avvio_prima_fase
        if data_verbale_consegna_definitiva is not None:
            self.data_verbale_consegna_definitiva = data_verbale_consegna_definitiva
        self.consegna_sotto_riserva = consegna_sotto_riserva
        self.data_effettivo_inizio = data_effettivo_inizio
        self.data_fine_prevista = data_fine_prevista

    @property
    def data_disposizione_inzio(self):
        """Gets the data_disposizione_inzio of this DatiInizioType.  # noqa: E501

        Data disposizione dell’inizio della prog. Esecutiva  # noqa: E501

        :return: The data_disposizione_inzio of this DatiInizioType.  # noqa: E501
        :rtype: datetime
        """
        return self._data_disposizione_inzio

    @data_disposizione_inzio.setter
    def data_disposizione_inzio(self, data_disposizione_inzio):
        """Sets the data_disposizione_inzio of this DatiInizioType.

        Data disposizione dell’inizio della prog. Esecutiva  # noqa: E501

        :param data_disposizione_inzio: The data_disposizione_inzio of this DatiInizioType.  # noqa: E501
        :type: datetime
        """

        self._data_disposizione_inzio = data_disposizione_inzio

    @property
    def data_approvazione(self):
        """Gets the data_approvazione of this DatiInizioType.  # noqa: E501

        Data approvazione del  progetto Esecutivo  # noqa: E501

        :return: The data_approvazione of this DatiInizioType.  # noqa: E501
        :rtype: datetime
        """
        return self._data_approvazione

    @data_approvazione.setter
    def data_approvazione(self, data_approvazione):
        """Sets the data_approvazione of this DatiInizioType.

        Data approvazione del  progetto Esecutivo  # noqa: E501

        :param data_approvazione: The data_approvazione of this DatiInizioType.  # noqa: E501
        :type: datetime
        """

        self._data_approvazione = data_approvazione

    @property
    def consegna_frazionata(self):
        """Gets the consegna_frazionata of this DatiInizioType.  # noqa: E501

        Consegna frazionata  # noqa: E501

        :return: The consegna_frazionata of this DatiInizioType.  # noqa: E501
        :rtype: bool
        """
        return self._consegna_frazionata

    @consegna_frazionata.setter
    def consegna_frazionata(self, consegna_frazionata):
        """Sets the consegna_frazionata of this DatiInizioType.

        Consegna frazionata  # noqa: E501

        :param consegna_frazionata: The consegna_frazionata of this DatiInizioType.  # noqa: E501
        :type: bool
        """
        if consegna_frazionata is None:
            raise ValueError("Invalid value for `consegna_frazionata`, must not be `None`")  # noqa: E501

        self._consegna_frazionata = consegna_frazionata

    @property
    def avvio_per_fasi(self):
        """Gets the avvio_per_fasi of this DatiInizioType.  # noqa: E501

        L'avvio dell'esecuzione del contratto e' per fasi  # noqa: E501

        :return: The avvio_per_fasi of this DatiInizioType.  # noqa: E501
        :rtype: bool
        """
        return self._avvio_per_fasi

    @avvio_per_fasi.setter
    def avvio_per_fasi(self, avvio_per_fasi):
        """Sets the avvio_per_fasi of this DatiInizioType.

        L'avvio dell'esecuzione del contratto e' per fasi  # noqa: E501

        :param avvio_per_fasi: The avvio_per_fasi of this DatiInizioType.  # noqa: E501
        :type: bool
        """
        if avvio_per_fasi is None:
            raise ValueError("Invalid value for `avvio_per_fasi`, must not be `None`")  # noqa: E501

        self._avvio_per_fasi = avvio_per_fasi

    @property
    def data_verbale_prima_consegna(self):
        """Gets the data_verbale_prima_consegna of this DatiInizioType.  # noqa: E501

        Data verbale prima consegna lavori  # noqa: E501

        :return: The data_verbale_prima_consegna of this DatiInizioType.  # noqa: E501
        :rtype: datetime
        """
        return self._data_verbale_prima_consegna

    @data_verbale_prima_consegna.setter
    def data_verbale_prima_consegna(self, data_verbale_prima_consegna):
        """Sets the data_verbale_prima_consegna of this DatiInizioType.

        Data verbale prima consegna lavori  # noqa: E501

        :param data_verbale_prima_consegna: The data_verbale_prima_consegna of this DatiInizioType.  # noqa: E501
        :type: datetime
        """

        self._data_verbale_prima_consegna = data_verbale_prima_consegna

    @property
    def data_avvio_prima_fase(self):
        """Gets the data_avvio_prima_fase of this DatiInizioType.  # noqa: E501

        Data di avvio della prima fase dell'esecuzione del contratto  # noqa: E501

        :return: The data_avvio_prima_fase of this DatiInizioType.  # noqa: E501
        :rtype: datetime
        """
        return self._data_avvio_prima_fase

    @data_avvio_prima_fase.setter
    def data_avvio_prima_fase(self, data_avvio_prima_fase):
        """Sets the data_avvio_prima_fase of this DatiInizioType.

        Data di avvio della prima fase dell'esecuzione del contratto  # noqa: E501

        :param data_avvio_prima_fase: The data_avvio_prima_fase of this DatiInizioType.  # noqa: E501
        :type: datetime
        """

        self._data_avvio_prima_fase = data_avvio_prima_fase

    @property
    def data_verbale_consegna_definitiva(self):
        """Gets the data_verbale_consegna_definitiva of this DatiInizioType.  # noqa: E501

        Data verbale consegna definitiva  # noqa: E501

        :return: The data_verbale_consegna_definitiva of this DatiInizioType.  # noqa: E501
        :rtype: datetime
        """
        return self._data_verbale_consegna_definitiva

    @data_verbale_consegna_definitiva.setter
    def data_verbale_consegna_definitiva(self, data_verbale_consegna_definitiva):
        """Sets the data_verbale_consegna_definitiva of this DatiInizioType.

        Data verbale consegna definitiva  # noqa: E501

        :param data_verbale_consegna_definitiva: The data_verbale_consegna_definitiva of this DatiInizioType.  # noqa: E501
        :type: datetime
        """

        self._data_verbale_consegna_definitiva = data_verbale_consegna_definitiva

    @property
    def consegna_sotto_riserva(self):
        """Gets the consegna_sotto_riserva of this DatiInizioType.  # noqa: E501

        Consegna sotto riserva di legge?  # noqa: E501

        :return: The consegna_sotto_riserva of this DatiInizioType.  # noqa: E501
        :rtype: bool
        """
        return self._consegna_sotto_riserva

    @consegna_sotto_riserva.setter
    def consegna_sotto_riserva(self, consegna_sotto_riserva):
        """Sets the consegna_sotto_riserva of this DatiInizioType.

        Consegna sotto riserva di legge?  # noqa: E501

        :param consegna_sotto_riserva: The consegna_sotto_riserva of this DatiInizioType.  # noqa: E501
        :type: bool
        """
        if consegna_sotto_riserva is None:
            raise ValueError("Invalid value for `consegna_sotto_riserva`, must not be `None`")  # noqa: E501

        self._consegna_sotto_riserva = consegna_sotto_riserva

    @property
    def data_effettivo_inizio(self):
        """Gets the data_effettivo_inizio of this DatiInizioType.  # noqa: E501

        Data di effettivo inizio lavori/servizi/forniture (consegna completa/avvio di tutte le prestazioni del contratto)  # noqa: E501

        :return: The data_effettivo_inizio of this DatiInizioType.  # noqa: E501
        :rtype: datetime
        """
        return self._data_effettivo_inizio

    @data_effettivo_inizio.setter
    def data_effettivo_inizio(self, data_effettivo_inizio):
        """Sets the data_effettivo_inizio of this DatiInizioType.

        Data di effettivo inizio lavori/servizi/forniture (consegna completa/avvio di tutte le prestazioni del contratto)  # noqa: E501

        :param data_effettivo_inizio: The data_effettivo_inizio of this DatiInizioType.  # noqa: E501
        :type: datetime
        """
        if data_effettivo_inizio is None:
            raise ValueError("Invalid value for `data_effettivo_inizio`, must not be `None`")  # noqa: E501

        self._data_effettivo_inizio = data_effettivo_inizio

    @property
    def data_fine_prevista(self):
        """Gets the data_fine_prevista of this DatiInizioType.  # noqa: E501

        Data fine prevista per dare ultimazione ai lavori/servizi/forniture  # noqa: E501

        :return: The data_fine_prevista of this DatiInizioType.  # noqa: E501
        :rtype: datetime
        """
        return self._data_fine_prevista

    @data_fine_prevista.setter
    def data_fine_prevista(self, data_fine_prevista):
        """Sets the data_fine_prevista of this DatiInizioType.

        Data fine prevista per dare ultimazione ai lavori/servizi/forniture  # noqa: E501

        :param data_fine_prevista: The data_fine_prevista of this DatiInizioType.  # noqa: E501
        :type: datetime
        """
        if data_fine_prevista is None:
            raise ValueError("Invalid value for `data_fine_prevista`, must not be `None`")  # noqa: E501

        self._data_fine_prevista = data_fine_prevista

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DatiInizioType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatiInizioType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
