# coding: utf-8

"""
    Specifiche Servizi Appalto - OpenAPI 3.0

    Sono descritte le specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ufficio.uscp@anticorruzione.it
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PartecipanteADType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'codice_fiscale': 'str',
        'denominazione': 'str',
        'ruolo_oe': 'RuoloOEEnum',
        'tipo_oe': 'TipoOEEnum',
        'id_partecipante': 'str',
        'paese_operatore_economico': 'str',
        'avvalimento': 'bool',
        'importo': 'float',
        'tipologia_avvalimento': 'TipologiaAvvalimentoEnum',
        'imprese_ausiliarie': 'list[AusiliariaType]'
    }

    attribute_map = {
        'codice_fiscale': 'codiceFiscale',
        'denominazione': 'denominazione',
        'ruolo_oe': 'ruoloOE',
        'tipo_oe': 'tipoOE',
        'id_partecipante': 'idPartecipante',
        'paese_operatore_economico': 'paeseOperatoreEconomico',
        'avvalimento': 'avvalimento',
        'importo': 'importo',
        'tipologia_avvalimento': 'tipologiaAvvalimento',
        'imprese_ausiliarie': 'impreseAusiliarie'
    }

    def __init__(self, codice_fiscale=None, denominazione=None, ruolo_oe=None, tipo_oe=None, id_partecipante=None, paese_operatore_economico=None, avvalimento=None, importo=None, tipologia_avvalimento=None, imprese_ausiliarie=None):  # noqa: E501
        """PartecipanteADType - a model defined in Swagger"""  # noqa: E501
        self._codice_fiscale = None
        self._denominazione = None
        self._ruolo_oe = None
        self._tipo_oe = None
        self._id_partecipante = None
        self._paese_operatore_economico = None
        self._avvalimento = None
        self._importo = None
        self._tipologia_avvalimento = None
        self._imprese_ausiliarie = None
        self.discriminator = None
        if codice_fiscale is not None:
            self.codice_fiscale = codice_fiscale
        if denominazione is not None:
            self.denominazione = denominazione
        if ruolo_oe is not None:
            self.ruolo_oe = ruolo_oe
        if tipo_oe is not None:
            self.tipo_oe = tipo_oe
        self.id_partecipante = id_partecipante
        if paese_operatore_economico is not None:
            self.paese_operatore_economico = paese_operatore_economico
        if avvalimento is not None:
            self.avvalimento = avvalimento
        if importo is not None:
            self.importo = importo
        if tipologia_avvalimento is not None:
            self.tipologia_avvalimento = tipologia_avvalimento
        if imprese_ausiliarie is not None:
            self.imprese_ausiliarie = imprese_ausiliarie

    @property
    def codice_fiscale(self):
        """Gets the codice_fiscale of this PartecipanteADType.  # noqa: E501

        Codice fiscale del soggetto interessato  # noqa: E501

        :return: The codice_fiscale of this PartecipanteADType.  # noqa: E501
        :rtype: str
        """
        return self._codice_fiscale

    @codice_fiscale.setter
    def codice_fiscale(self, codice_fiscale):
        """Sets the codice_fiscale of this PartecipanteADType.

        Codice fiscale del soggetto interessato  # noqa: E501

        :param codice_fiscale: The codice_fiscale of this PartecipanteADType.  # noqa: E501
        :type: str
        """

        self._codice_fiscale = codice_fiscale

    @property
    def denominazione(self):
        """Gets the denominazione of this PartecipanteADType.  # noqa: E501

        Denominazione del soggetto interessato  # noqa: E501

        :return: The denominazione of this PartecipanteADType.  # noqa: E501
        :rtype: str
        """
        return self._denominazione

    @denominazione.setter
    def denominazione(self, denominazione):
        """Sets the denominazione of this PartecipanteADType.

        Denominazione del soggetto interessato  # noqa: E501

        :param denominazione: The denominazione of this PartecipanteADType.  # noqa: E501
        :type: str
        """

        self._denominazione = denominazione

    @property
    def ruolo_oe(self):
        """Gets the ruolo_oe of this PartecipanteADType.  # noqa: E501


        :return: The ruolo_oe of this PartecipanteADType.  # noqa: E501
        :rtype: RuoloOEEnum
        """
        return self._ruolo_oe

    @ruolo_oe.setter
    def ruolo_oe(self, ruolo_oe):
        """Sets the ruolo_oe of this PartecipanteADType.


        :param ruolo_oe: The ruolo_oe of this PartecipanteADType.  # noqa: E501
        :type: RuoloOEEnum
        """

        self._ruolo_oe = ruolo_oe

    @property
    def tipo_oe(self):
        """Gets the tipo_oe of this PartecipanteADType.  # noqa: E501


        :return: The tipo_oe of this PartecipanteADType.  # noqa: E501
        :rtype: TipoOEEnum
        """
        return self._tipo_oe

    @tipo_oe.setter
    def tipo_oe(self, tipo_oe):
        """Sets the tipo_oe of this PartecipanteADType.


        :param tipo_oe: The tipo_oe of this PartecipanteADType.  # noqa: E501
        :type: TipoOEEnum
        """

        self._tipo_oe = tipo_oe

    @property
    def id_partecipante(self):
        """Gets the id_partecipante of this PartecipanteADType.  # noqa: E501

        id partecipante  # noqa: E501

        :return: The id_partecipante of this PartecipanteADType.  # noqa: E501
        :rtype: str
        """
        return self._id_partecipante

    @id_partecipante.setter
    def id_partecipante(self, id_partecipante):
        """Sets the id_partecipante of this PartecipanteADType.

        id partecipante  # noqa: E501

        :param id_partecipante: The id_partecipante of this PartecipanteADType.  # noqa: E501
        :type: str
        """
        if id_partecipante is None:
            raise ValueError("Invalid value for `id_partecipante`, must not be `None`")  # noqa: E501

        self._id_partecipante = id_partecipante

    @property
    def paese_operatore_economico(self):
        """Gets the paese_operatore_economico of this PartecipanteADType.  # noqa: E501

        Paese Operatore Economico  # noqa: E501

        :return: The paese_operatore_economico of this PartecipanteADType.  # noqa: E501
        :rtype: str
        """
        return self._paese_operatore_economico

    @paese_operatore_economico.setter
    def paese_operatore_economico(self, paese_operatore_economico):
        """Sets the paese_operatore_economico of this PartecipanteADType.

        Paese Operatore Economico  # noqa: E501

        :param paese_operatore_economico: The paese_operatore_economico of this PartecipanteADType.  # noqa: E501
        :type: str
        """

        self._paese_operatore_economico = paese_operatore_economico

    @property
    def avvalimento(self):
        """Gets the avvalimento of this PartecipanteADType.  # noqa: E501

        Flag avvalimento  # noqa: E501

        :return: The avvalimento of this PartecipanteADType.  # noqa: E501
        :rtype: bool
        """
        return self._avvalimento

    @avvalimento.setter
    def avvalimento(self, avvalimento):
        """Sets the avvalimento of this PartecipanteADType.

        Flag avvalimento  # noqa: E501

        :param avvalimento: The avvalimento of this PartecipanteADType.  # noqa: E501
        :type: bool
        """

        self._avvalimento = avvalimento

    @property
    def importo(self):
        """Gets the importo of this PartecipanteADType.  # noqa: E501

        Importo di aggiudicazione/affidamento/adesione AQ/premio erogato al netto di opzioni e rinnovi  # noqa: E501

        :return: The importo of this PartecipanteADType.  # noqa: E501
        :rtype: float
        """
        return self._importo

    @importo.setter
    def importo(self, importo):
        """Sets the importo of this PartecipanteADType.

        Importo di aggiudicazione/affidamento/adesione AQ/premio erogato al netto di opzioni e rinnovi  # noqa: E501

        :param importo: The importo of this PartecipanteADType.  # noqa: E501
        :type: float
        """

        self._importo = importo

    @property
    def tipologia_avvalimento(self):
        """Gets the tipologia_avvalimento of this PartecipanteADType.  # noqa: E501


        :return: The tipologia_avvalimento of this PartecipanteADType.  # noqa: E501
        :rtype: TipologiaAvvalimentoEnum
        """
        return self._tipologia_avvalimento

    @tipologia_avvalimento.setter
    def tipologia_avvalimento(self, tipologia_avvalimento):
        """Sets the tipologia_avvalimento of this PartecipanteADType.


        :param tipologia_avvalimento: The tipologia_avvalimento of this PartecipanteADType.  # noqa: E501
        :type: TipologiaAvvalimentoEnum
        """

        self._tipologia_avvalimento = tipologia_avvalimento

    @property
    def imprese_ausiliarie(self):
        """Gets the imprese_ausiliarie of this PartecipanteADType.  # noqa: E501

        Dati relativi alle imprese ausiliarie  # noqa: E501

        :return: The imprese_ausiliarie of this PartecipanteADType.  # noqa: E501
        :rtype: list[AusiliariaType]
        """
        return self._imprese_ausiliarie

    @imprese_ausiliarie.setter
    def imprese_ausiliarie(self, imprese_ausiliarie):
        """Sets the imprese_ausiliarie of this PartecipanteADType.

        Dati relativi alle imprese ausiliarie  # noqa: E501

        :param imprese_ausiliarie: The imprese_ausiliarie of this PartecipanteADType.  # noqa: E501
        :type: list[AusiliariaType]
        """

        self._imprese_ausiliarie = imprese_ausiliarie

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PartecipanteADType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartecipanteADType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
