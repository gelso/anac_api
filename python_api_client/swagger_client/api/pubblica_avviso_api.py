# coding: utf-8

"""
    Specifiche Servizi Appalto - OpenAPI 3.0

    Sono descritte le specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ufficio.uscp@anticorruzione.it
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PubblicaAvvisoApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def id_avviso_anteprima(self, id_avviso, **kwargs):  # noqa: E501
        """API Rest per il recupero del PDF di un Avviso. SINCRONO  # noqa: E501

        Viene resituito il file in foramto PDF relativo all' Avviso.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_avviso_anteprima(id_avviso, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_avviso: Identificativo dell'Avviso generato da ANAC. (required)
        :return: RenderingAvvisoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.id_avviso_anteprima_with_http_info(id_avviso, **kwargs)  # noqa: E501
        else:
            (data) = self.id_avviso_anteprima_with_http_info(id_avviso, **kwargs)  # noqa: E501
            return data

    def id_avviso_anteprima_with_http_info(self, id_avviso, **kwargs):  # noqa: E501
        """API Rest per il recupero del PDF di un Avviso. SINCRONO  # noqa: E501

        Viene resituito il file in foramto PDF relativo all' Avviso.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_avviso_anteprima_with_http_info(id_avviso, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_avviso: Identificativo dell'Avviso generato da ANAC. (required)
        :return: RenderingAvvisoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_avviso']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method id_avviso_anteprima" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_avviso' is set
        if ('id_avviso' not in params or
                params['id_avviso'] is None):
            raise ValueError("Missing the required parameter `id_avviso` when calling `id_avviso_anteprima`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_avviso' in params:
            query_params.append(('idAvviso', params['id_avviso']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/consulta-rendering-avviso', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RenderingAvvisoResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def id_avviso_cancella(self, body, **kwargs):  # noqa: E501
        """API Rest per la richiesta di annullamento di pubblicazione di un avviso non ancora pubblicato. ASINCRONO - ASIMMETRICO  # noqa: E501

        Il servizio permette di sospensione una una richiesta di pubblicazione, sia nazionale sia europea, di un avviso non ancora pubblicato. ASINCRONO ASIMMETRICO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_avviso_cancella(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CancellaAvvisoRequest body: (required)
        :return: AckResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.id_avviso_cancella_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.id_avviso_cancella_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def id_avviso_cancella_with_http_info(self, body, **kwargs):  # noqa: E501
        """API Rest per la richiesta di annullamento di pubblicazione di un avviso non ancora pubblicato. ASINCRONO - ASIMMETRICO  # noqa: E501

        Il servizio permette di sospensione una una richiesta di pubblicazione, sia nazionale sia europea, di un avviso non ancora pubblicato. ASINCRONO ASIMMETRICO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_avviso_cancella_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CancellaAvvisoRequest body: (required)
        :return: AckResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method id_avviso_cancella" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `id_avviso_cancella`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cancella-avviso', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AckResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def id_avviso_dettaglio(self, id_avviso, **kwargs):  # noqa: E501
        """API Rest per il recupero del dettaglio di un Avviso. SINCRONO  # noqa: E501

        Viene resituita la definizione di un Avviso con tutte le sue informazioni di dettaglio.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_avviso_dettaglio(id_avviso, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_avviso: Identificativo dell'Avviso generato da ANAC. (required)
        :return: ConsultaAvvisoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.id_avviso_dettaglio_with_http_info(id_avviso, **kwargs)  # noqa: E501
        else:
            (data) = self.id_avviso_dettaglio_with_http_info(id_avviso, **kwargs)  # noqa: E501
            return data

    def id_avviso_dettaglio_with_http_info(self, id_avviso, **kwargs):  # noqa: E501
        """API Rest per il recupero del dettaglio di un Avviso. SINCRONO  # noqa: E501

        Viene resituita la definizione di un Avviso con tutte le sue informazioni di dettaglio.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_avviso_dettaglio_with_http_info(id_avviso, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_avviso: Identificativo dell'Avviso generato da ANAC. (required)
        :return: ConsultaAvvisoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_avviso']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method id_avviso_dettaglio" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_avviso' is set
        if ('id_avviso' not in params or
                params['id_avviso'] is None):
            raise ValueError("Missing the required parameter `id_avviso` when calling `id_avviso_dettaglio`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_avviso' in params:
            query_params.append(('idAvviso', params['id_avviso']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/consulta-avviso', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConsultaAvvisoResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def id_avviso_modifica(self, body, **kwargs):  # noqa: E501
        """API Rest per la creazione di un avviso che sostituisce il precedente non ancora pubblicato sia a livello nazionale e sia europeo. ASINCRONO - ASIMMETRICO  # noqa: E501

        API Rest per la richiesta di pubblicazione di un'avviso sia a livello nazionale sia europeo. L'avviso sostituisce il precedente non ancora pubblicato. Il servizio gestisce la pubblicazione europea mediante l'acquisizione di dati nel formato definito da TED (eForm) e, la pubblicazione nazionale mediante l'acquisizione di dati definiti dall'ESPD Request più dati aggiuntivi richiesti da ANAC. Con la successiva chiamata al servizio esito-operazione è possibile recuperare l'idAvviso di modifica assegnato. ASINCRONO ASIMMETRICO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_avviso_modifica(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AvvisoRequest body: Inserimento Avviso con gli oggetti specifici per la pubblicazione in TED o in ambito Nazionale (required)
        :return: AckResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.id_avviso_modifica_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.id_avviso_modifica_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def id_avviso_modifica_with_http_info(self, body, **kwargs):  # noqa: E501
        """API Rest per la creazione di un avviso che sostituisce il precedente non ancora pubblicato sia a livello nazionale e sia europeo. ASINCRONO - ASIMMETRICO  # noqa: E501

        API Rest per la richiesta di pubblicazione di un'avviso sia a livello nazionale sia europeo. L'avviso sostituisce il precedente non ancora pubblicato. Il servizio gestisce la pubblicazione europea mediante l'acquisizione di dati nel formato definito da TED (eForm) e, la pubblicazione nazionale mediante l'acquisizione di dati definiti dall'ESPD Request più dati aggiuntivi richiesti da ANAC. Con la successiva chiamata al servizio esito-operazione è possibile recuperare l'idAvviso di modifica assegnato. ASINCRONO ASIMMETRICO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_avviso_modifica_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AvvisoRequest body: Inserimento Avviso con gli oggetti specifici per la pubblicazione in TED o in ambito Nazionale (required)
        :return: AckResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method id_avviso_modifica" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `id_avviso_modifica`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/modifica-avviso', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AckResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def id_avviso_pubblica(self, body, **kwargs):  # noqa: E501
        """API Rest per la richiesta di pubblicazione di un'avviso sia a livello nazionale sia europeo. ASINCRONO - ASIMMETRICO  # noqa: E501

        Il servizio avvia la richiesta di pubblicazione di un Avviso, a livello nazionale e/o europeo. A seguito della chiamata a questo servizio, l’avviso transita in stato “IN ATTESA PUBBLICAZIONE”. ASINCRONO - ASIMMETRICO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_avviso_pubblica(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PubblicaAvvisoRequest body: (required)
        :return: AckResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.id_avviso_pubblica_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.id_avviso_pubblica_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def id_avviso_pubblica_with_http_info(self, body, **kwargs):  # noqa: E501
        """API Rest per la richiesta di pubblicazione di un'avviso sia a livello nazionale sia europeo. ASINCRONO - ASIMMETRICO  # noqa: E501

        Il servizio avvia la richiesta di pubblicazione di un Avviso, a livello nazionale e/o europeo. A seguito della chiamata a questo servizio, l’avviso transita in stato “IN ATTESA PUBBLICAZIONE”. ASINCRONO - ASIMMETRICO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_avviso_pubblica_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PubblicaAvvisoRequest body: (required)
        :return: AckResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method id_avviso_pubblica" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `id_avviso_pubblica`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/pubblica-avviso', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AckResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def id_avviso_rettifica(self, body, **kwargs):  # noqa: E501
        """API Rest per la creazione di un avviso che rettifica il precedente pubblicato sia a livello nazionale e sia europeo. ASINCRONO - ASIMMETRICO  # noqa: E501

        API Rest per la richiesta di pubblicazione di un'avviso di rettifica sia a livello nazionale sia europeo. L'avviso rettifica il precedente già pubblicato. Il servizio gestisce la pubblicazione europea mediante l'acquisizione di dati nel formato definito da TED (eForm) e, la pubblicazione nazionale mediante l'acquisizione di dati definiti dall'ESPD Request più dati aggiuntivi richiesti da ANAC. Con la successiva chiamata al servizio esito-operazione è possibile recuperare l'idAvviso di rettifica assegnato. ASINCRONO ASIMMETRICO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_avviso_rettifica(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AvvisoRequest body: Inserimento Avviso con gli oggetti specifici per la pubblicazione in TED o in ambito Nazionale (required)
        :return: AckResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.id_avviso_rettifica_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.id_avviso_rettifica_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def id_avviso_rettifica_with_http_info(self, body, **kwargs):  # noqa: E501
        """API Rest per la creazione di un avviso che rettifica il precedente pubblicato sia a livello nazionale e sia europeo. ASINCRONO - ASIMMETRICO  # noqa: E501

        API Rest per la richiesta di pubblicazione di un'avviso di rettifica sia a livello nazionale sia europeo. L'avviso rettifica il precedente già pubblicato. Il servizio gestisce la pubblicazione europea mediante l'acquisizione di dati nel formato definito da TED (eForm) e, la pubblicazione nazionale mediante l'acquisizione di dati definiti dall'ESPD Request più dati aggiuntivi richiesti da ANAC. Con la successiva chiamata al servizio esito-operazione è possibile recuperare l'idAvviso di rettifica assegnato. ASINCRONO ASIMMETRICO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_avviso_rettifica_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AvvisoRequest body: Inserimento Avviso con gli oggetti specifici per la pubblicazione in TED o in ambito Nazionale (required)
        :return: AckResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method id_avviso_rettifica" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `id_avviso_rettifica`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rettifica-avviso', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AckResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def id_avviso_ricerca(self, **kwargs):  # noqa: E501
        """API Rest per la ricerca degli avvisi dell'appalto. SINCRONO  # noqa: E501

        Viene recuperata la lista con i dati di sintesi degli Avvisi. Le informazioni restituite dal servizio saranno filtrate, oltre in base ai parametri di ricerca, anche in base agli appalti di competenza dell' RP e della SA per la quale sta operando. Almeno un filtro di ricerca deve essere valorizzato. SINCRONO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_avviso_ricerca(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str codice_appalto: Identificativo univoco dell'appalto definito dalla Stazione Appaltante. Obbligatorio se idAppalto e cig non sono stati valorizzati.
        :param str id_appalto: Identificativo univoco dell' Appalto definito da ANAC. (A UUID specified by FC4122). Obbligatorio se codiceAppalto e cig non sono stati valorizzati.
        :param str cig: Identificativo univoco Gara-Lotto rilasciato da ANAC. Obbligatorio se idAppalto e cig non sono stati valorizzati.
        :param str stato: Codice Stato dell'Appalto - fare riferimento ai valori contenuti nel file [statoAppalto.json](https://raw.githubusercontent.com/anticorruzione/npa/main/docs/modello-dati/tipologiche/statoAppalto.json)
        :param datetime data_creazione_da: Data di crezione dell'Appalto - intervallo successivo (A date-time specified by ISO 8601 as profiled by RFC 3339)
        :param datetime data_creazione_a: Data di crezione della Appalto - intervallo precedente (A date-time specified by RF333)
        :param str stato_avviso: Codice Stato in cui si trova l' Avviso - fare riferimento ai valori contenuti nel file [statoAvviso.json](https://raw.githubusercontent.com/anticorruzione/npa/main/docs/modello-dati/tipologiche/statoAvviso.json)
        :param str tipo_avviso: Codice Tipo di avviso - fare riferimento ai valori contenuti nel file [tipoAvviso.json](https://raw.githubusercontent.com/anticorruzione/npa/main/docs/modello-dati/tipologiche/tipoAvviso.json)
        :param str azione_avviso: Codice Tipo di azione dell'avviso - fare riferimento ai valori contenuti nel file [tipoAzioneAvviso.json](https://raw.githubusercontent.com/anticorruzione/npa/main/docs/modello-dati/tipologiche/tipoAzioneAvviso.json)
        :param datetime data_creazione_avviso_da: Data di crezione dell'Avviso - intervallo successivo (A date-time specified by ISO 8601 as profiled by RFC 3339)
        :param datetime data_creazione_avviso_a: Data di crezione della Avviso - intervallo precedente (A date-time specified by ISO 8601 as profiled by RFC 3339)
        :param int page: numero della pagina da visualizzare
        :param int per_page: numero di elementi per pagina
        :return: AvvisoListaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.id_avviso_ricerca_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.id_avviso_ricerca_with_http_info(**kwargs)  # noqa: E501
            return data

    def id_avviso_ricerca_with_http_info(self, **kwargs):  # noqa: E501
        """API Rest per la ricerca degli avvisi dell'appalto. SINCRONO  # noqa: E501

        Viene recuperata la lista con i dati di sintesi degli Avvisi. Le informazioni restituite dal servizio saranno filtrate, oltre in base ai parametri di ricerca, anche in base agli appalti di competenza dell' RP e della SA per la quale sta operando. Almeno un filtro di ricerca deve essere valorizzato. SINCRONO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_avviso_ricerca_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str codice_appalto: Identificativo univoco dell'appalto definito dalla Stazione Appaltante. Obbligatorio se idAppalto e cig non sono stati valorizzati.
        :param str id_appalto: Identificativo univoco dell' Appalto definito da ANAC. (A UUID specified by FC4122). Obbligatorio se codiceAppalto e cig non sono stati valorizzati.
        :param str cig: Identificativo univoco Gara-Lotto rilasciato da ANAC. Obbligatorio se idAppalto e cig non sono stati valorizzati.
        :param str stato: Codice Stato dell'Appalto - fare riferimento ai valori contenuti nel file [statoAppalto.json](https://raw.githubusercontent.com/anticorruzione/npa/main/docs/modello-dati/tipologiche/statoAppalto.json)
        :param datetime data_creazione_da: Data di crezione dell'Appalto - intervallo successivo (A date-time specified by ISO 8601 as profiled by RFC 3339)
        :param datetime data_creazione_a: Data di crezione della Appalto - intervallo precedente (A date-time specified by RF333)
        :param str stato_avviso: Codice Stato in cui si trova l' Avviso - fare riferimento ai valori contenuti nel file [statoAvviso.json](https://raw.githubusercontent.com/anticorruzione/npa/main/docs/modello-dati/tipologiche/statoAvviso.json)
        :param str tipo_avviso: Codice Tipo di avviso - fare riferimento ai valori contenuti nel file [tipoAvviso.json](https://raw.githubusercontent.com/anticorruzione/npa/main/docs/modello-dati/tipologiche/tipoAvviso.json)
        :param str azione_avviso: Codice Tipo di azione dell'avviso - fare riferimento ai valori contenuti nel file [tipoAzioneAvviso.json](https://raw.githubusercontent.com/anticorruzione/npa/main/docs/modello-dati/tipologiche/tipoAzioneAvviso.json)
        :param datetime data_creazione_avviso_da: Data di crezione dell'Avviso - intervallo successivo (A date-time specified by ISO 8601 as profiled by RFC 3339)
        :param datetime data_creazione_avviso_a: Data di crezione della Avviso - intervallo precedente (A date-time specified by ISO 8601 as profiled by RFC 3339)
        :param int page: numero della pagina da visualizzare
        :param int per_page: numero di elementi per pagina
        :return: AvvisoListaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['codice_appalto', 'id_appalto', 'cig', 'stato', 'data_creazione_da', 'data_creazione_a', 'stato_avviso', 'tipo_avviso', 'azione_avviso', 'data_creazione_avviso_da', 'data_creazione_avviso_a', 'page', 'per_page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method id_avviso_ricerca" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'codice_appalto' in params:
            query_params.append(('codiceAppalto', params['codice_appalto']))  # noqa: E501
        if 'id_appalto' in params:
            query_params.append(('idAppalto', params['id_appalto']))  # noqa: E501
        if 'cig' in params:
            query_params.append(('cig', params['cig']))  # noqa: E501
        if 'stato' in params:
            query_params.append(('stato', params['stato']))  # noqa: E501
        if 'data_creazione_da' in params:
            query_params.append(('dataCreazioneDa', params['data_creazione_da']))  # noqa: E501
        if 'data_creazione_a' in params:
            query_params.append(('dataCreazioneA', params['data_creazione_a']))  # noqa: E501
        if 'stato_avviso' in params:
            query_params.append(('statoAvviso', params['stato_avviso']))  # noqa: E501
        if 'tipo_avviso' in params:
            query_params.append(('tipoAvviso', params['tipo_avviso']))  # noqa: E501
        if 'azione_avviso' in params:
            query_params.append(('azioneAvviso', params['azione_avviso']))  # noqa: E501
        if 'data_creazione_avviso_da' in params:
            query_params.append(('dataCreazioneAvvisoDa', params['data_creazione_avviso_da']))  # noqa: E501
        if 'data_creazione_avviso_a' in params:
            query_params.append(('dataCreazioneAvvisoA', params['data_creazione_avviso_a']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('perPage', params['per_page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ricerca-avviso', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AvvisoListaResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def id_avviso_stato(self, id_avviso, **kwargs):  # noqa: E501
        """API Rest per il recupero dello stato dell'Avviso. SINCRONO  # noqa: E501

        Il compito dispositivo di aggiornare lo stato dell'avviso proveniente dai sistemi esterni, TED e/o PPL-ANAC, sarà in carico ad un task schedulato PCP. Pertanto il recupero dello stato da parte del servizio insiste su uno stato avviso PCP che restituisce anche la data in cui il task schedulato ha effettuato il controllo sui sistemi esterni. SINCRONO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_avviso_stato(id_avviso, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_avviso: Identificativo dell'Avviso generato da ANAC. (required)
        :return: StatoAvvisoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.id_avviso_stato_with_http_info(id_avviso, **kwargs)  # noqa: E501
        else:
            (data) = self.id_avviso_stato_with_http_info(id_avviso, **kwargs)  # noqa: E501
            return data

    def id_avviso_stato_with_http_info(self, id_avviso, **kwargs):  # noqa: E501
        """API Rest per il recupero dello stato dell'Avviso. SINCRONO  # noqa: E501

        Il compito dispositivo di aggiornare lo stato dell'avviso proveniente dai sistemi esterni, TED e/o PPL-ANAC, sarà in carico ad un task schedulato PCP. Pertanto il recupero dello stato da parte del servizio insiste su uno stato avviso PCP che restituisce anche la data in cui il task schedulato ha effettuato il controllo sui sistemi esterni. SINCRONO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_avviso_stato_with_http_info(id_avviso, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_avviso: Identificativo dell'Avviso generato da ANAC. (required)
        :return: StatoAvvisoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_avviso']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method id_avviso_stato" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_avviso' is set
        if ('id_avviso' not in params or
                params['id_avviso'] is None):
            raise ValueError("Missing the required parameter `id_avviso` when calling `id_avviso_stato`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_avviso' in params:
            query_params.append(('idAvviso', params['id_avviso']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/stato-avviso', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatoAvvisoResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
