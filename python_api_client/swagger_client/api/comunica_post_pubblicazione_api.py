# coding: utf-8

"""
    Specifiche Servizi Appalto - OpenAPI 3.0

    Sono descritte le specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ufficio.uscp@anticorruzione.it
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ComunicaPostPubblicazioneApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def id_scheda_cancella(self, body, **kwargs):  # noqa: E501
        """API Rest per l'eliminazione di una specifica Scheda dati in lavorazione nelle fasi successive alla pubblicazione. SINCRONO  # noqa: E501

        Eliminazione della Scheda dati in lavorazione. SINCRONO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_scheda_cancella(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CancellaSchedaRequest body: (required)
        :return: CancellaSchedaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.id_scheda_cancella_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.id_scheda_cancella_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def id_scheda_cancella_with_http_info(self, body, **kwargs):  # noqa: E501
        """API Rest per l'eliminazione di una specifica Scheda dati in lavorazione nelle fasi successive alla pubblicazione. SINCRONO  # noqa: E501

        Eliminazione della Scheda dati in lavorazione. SINCRONO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_scheda_cancella_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CancellaSchedaRequest body: (required)
        :return: CancellaSchedaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method id_scheda_cancella" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `id_scheda_cancella`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cancella-scheda', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CancellaSchedaResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def id_scheda_conferma(self, body, **kwargs):  # noqa: E501
        """API Rest per la conferma dei dati inviati per una specifica Scheda. ASINCRONO - ASIMMETRICO  # noqa: E501

        Il servizio consente di confermare i dati inviati per una specifica Scheda e, qualora il tipo di scheda lo consente, avvia la fase di pubblicazione dell'avviso. Con la successiva chiamata al servizio esito-operazione è possibile recuperare l'idAvviso assegnato. ASINCRONO - ASIMMETRICO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_scheda_conferma(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfermaSchedaRequest body: (required)
        :return: AckResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.id_scheda_conferma_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.id_scheda_conferma_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def id_scheda_conferma_with_http_info(self, body, **kwargs):  # noqa: E501
        """API Rest per la conferma dei dati inviati per una specifica Scheda. ASINCRONO - ASIMMETRICO  # noqa: E501

        Il servizio consente di confermare i dati inviati per una specifica Scheda e, qualora il tipo di scheda lo consente, avvia la fase di pubblicazione dell'avviso. Con la successiva chiamata al servizio esito-operazione è possibile recuperare l'idAvviso assegnato. ASINCRONO - ASIMMETRICO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_scheda_conferma_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfermaSchedaRequest body: (required)
        :return: AckResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method id_scheda_conferma" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `id_scheda_conferma`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/conferma-scheda', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AckResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def id_scheda_crea(self, body, **kwargs):  # noqa: E501
        """API Rest generica per l'inserimento di una scheda dati per le fasi successive alla pubblicazione. SINCRONO  # noqa: E501

        API Rest generica per l'inserimento delle schede dati delle fasi successive alla pubblicazione. A titolo esemplificativo si riportano di seguito alcuni eventi che determinano l'obbligo di invio dati alla PCP:Elenco Partecipanti, Aggiudicazione, Avvio Contratto, Avanzamento Contratto, Conclusione Contratto, Collaudo Contratto, Sospensione, Ripresa Esecuzione, Contratto, Risoluzione Contratto, Modifica Contratto, Subappalto, Recesso, Contenzioso, Accordo Quadro. SINCRONO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_scheda_crea(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreaSchedaRequest body: Oggetto in ingresso al servizio (required)
        :return: CreaSchedaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.id_scheda_crea_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.id_scheda_crea_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def id_scheda_crea_with_http_info(self, body, **kwargs):  # noqa: E501
        """API Rest generica per l'inserimento di una scheda dati per le fasi successive alla pubblicazione. SINCRONO  # noqa: E501

        API Rest generica per l'inserimento delle schede dati delle fasi successive alla pubblicazione. A titolo esemplificativo si riportano di seguito alcuni eventi che determinano l'obbligo di invio dati alla PCP:Elenco Partecipanti, Aggiudicazione, Avvio Contratto, Avanzamento Contratto, Conclusione Contratto, Collaudo Contratto, Sospensione, Ripresa Esecuzione, Contratto, Risoluzione Contratto, Modifica Contratto, Subappalto, Recesso, Contenzioso, Accordo Quadro. SINCRONO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_scheda_crea_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreaSchedaRequest body: Oggetto in ingresso al servizio (required)
        :return: CreaSchedaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method id_scheda_crea" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `id_scheda_crea`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/crea-scheda', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreaSchedaResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def id_scheda_dettaglio(self, id_scheda, **kwargs):  # noqa: E501
        """API Rest per il recupero del dettaglio di una specifica Scheda dati. SINCRONO  # noqa: E501

        Viene recuperato il dettaglio della specifica scheda dati. SINCRONO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_scheda_dettaglio(id_scheda, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_scheda: Identificativo della singola scheda restituita da ANAC nella fase di inserimento (required)
        :return: ConsultaSchedaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.id_scheda_dettaglio_with_http_info(id_scheda, **kwargs)  # noqa: E501
        else:
            (data) = self.id_scheda_dettaglio_with_http_info(id_scheda, **kwargs)  # noqa: E501
            return data

    def id_scheda_dettaglio_with_http_info(self, id_scheda, **kwargs):  # noqa: E501
        """API Rest per il recupero del dettaglio di una specifica Scheda dati. SINCRONO  # noqa: E501

        Viene recuperato il dettaglio della specifica scheda dati. SINCRONO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_scheda_dettaglio_with_http_info(id_scheda, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_scheda: Identificativo della singola scheda restituita da ANAC nella fase di inserimento (required)
        :return: ConsultaSchedaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_scheda']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method id_scheda_dettaglio" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_scheda' is set
        if ('id_scheda' not in params or
                params['id_scheda'] is None):
            raise ValueError("Missing the required parameter `id_scheda` when calling `id_scheda_dettaglio`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_scheda' in params:
            query_params.append(('idScheda', params['id_scheda']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/consulta-scheda', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConsultaSchedaResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def id_scheda_modifica(self, body, **kwargs):  # noqa: E501
        """API Rest generica per la modifica di una scheda dati per le fasi successive alla pubblicazione. SINCRONO  # noqa: E501

        Il servizio sostituisce la precedentemente Scheda in lavorazione. SINCRONO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_scheda_modifica(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DatiSchedaRequest body: Oggetto in ingresso al servizio (required)
        :return: ModificaSchedaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.id_scheda_modifica_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.id_scheda_modifica_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def id_scheda_modifica_with_http_info(self, body, **kwargs):  # noqa: E501
        """API Rest generica per la modifica di una scheda dati per le fasi successive alla pubblicazione. SINCRONO  # noqa: E501

        Il servizio sostituisce la precedentemente Scheda in lavorazione. SINCRONO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_scheda_modifica_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DatiSchedaRequest body: Oggetto in ingresso al servizio (required)
        :return: ModificaSchedaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method id_scheda_modifica" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `id_scheda_modifica`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/modifica-scheda', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModificaSchedaResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def id_scheda_ricerca(self, **kwargs):  # noqa: E501
        """API Rest per la ricerca delle Schede dati inserite nelle fasi successive alla pubblicazione. SINCRONO  # noqa: E501

        Viene recuperata la lista con i dati di sintesi delle schede.Le informazioni restituite dal servizio saranno filtrate, oltre in base ai parametri di ricerca, anche in base agli appalti di competenza dell' RP e della SA per la quale sta operando. Almeno un filtro di ricerca deve essere valorizzato. SINCRONO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_scheda_ricerca(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_appalto: Identificativo univoco dell' Appalto definito da ANAC. (A UUID specified by FC4122). Obbligatorio se cig non è stato valorizzato.
        :param str cig: Identificativo univoco Gara-Lotto rilasciato da ANAC. Obbligatorio se idAppalto non è stato valorizzato.
        :param str stato: Codice stato dell'Appalto - fare riferimento ai valori contenuti nel file [statoAppalto.json](https://raw.githubusercontent.com/anticorruzione/npa/main/docs/modello-dati/tipologiche/statoAppalto.json)
        :param datetime data_creazione_da: Data di crezione dell'Appalto - intervallo successivo (A date-time specified by ISO 8601 as profiled by RFC 3339)
        :param datetime data_creazione_a: Data di crezione della Gara - intervallo precedente (A date-time specified by ISO 8601 as profiled by RFC 3339)
        :param str codice_scheda: Codice Scheda - fare riferimento ai valori contenuti nel file [codiceScheda.json](https://raw.githubusercontent.com/anticorruzione/npa/main/docs/modello-dati/tipologiche/codiceScheda.json)
        :param str stato_scheda: Codice Stato della Scheda - fare riferimento ai valori contenuti nel file [statoScheda.json](https://raw.githubusercontent.com/anticorruzione/npa/main/docs/modello-dati/tipologiche/statoScheda.json)
        :param int page: numero della pagina da visualizzare
        :param int per_page: numero di elementi per pagina
        :return: SchedaListaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.id_scheda_ricerca_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.id_scheda_ricerca_with_http_info(**kwargs)  # noqa: E501
            return data

    def id_scheda_ricerca_with_http_info(self, **kwargs):  # noqa: E501
        """API Rest per la ricerca delle Schede dati inserite nelle fasi successive alla pubblicazione. SINCRONO  # noqa: E501

        Viene recuperata la lista con i dati di sintesi delle schede.Le informazioni restituite dal servizio saranno filtrate, oltre in base ai parametri di ricerca, anche in base agli appalti di competenza dell' RP e della SA per la quale sta operando. Almeno un filtro di ricerca deve essere valorizzato. SINCRONO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_scheda_ricerca_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_appalto: Identificativo univoco dell' Appalto definito da ANAC. (A UUID specified by FC4122). Obbligatorio se cig non è stato valorizzato.
        :param str cig: Identificativo univoco Gara-Lotto rilasciato da ANAC. Obbligatorio se idAppalto non è stato valorizzato.
        :param str stato: Codice stato dell'Appalto - fare riferimento ai valori contenuti nel file [statoAppalto.json](https://raw.githubusercontent.com/anticorruzione/npa/main/docs/modello-dati/tipologiche/statoAppalto.json)
        :param datetime data_creazione_da: Data di crezione dell'Appalto - intervallo successivo (A date-time specified by ISO 8601 as profiled by RFC 3339)
        :param datetime data_creazione_a: Data di crezione della Gara - intervallo precedente (A date-time specified by ISO 8601 as profiled by RFC 3339)
        :param str codice_scheda: Codice Scheda - fare riferimento ai valori contenuti nel file [codiceScheda.json](https://raw.githubusercontent.com/anticorruzione/npa/main/docs/modello-dati/tipologiche/codiceScheda.json)
        :param str stato_scheda: Codice Stato della Scheda - fare riferimento ai valori contenuti nel file [statoScheda.json](https://raw.githubusercontent.com/anticorruzione/npa/main/docs/modello-dati/tipologiche/statoScheda.json)
        :param int page: numero della pagina da visualizzare
        :param int per_page: numero di elementi per pagina
        :return: SchedaListaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_appalto', 'cig', 'stato', 'data_creazione_da', 'data_creazione_a', 'codice_scheda', 'stato_scheda', 'page', 'per_page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method id_scheda_ricerca" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_appalto' in params:
            query_params.append(('idAppalto', params['id_appalto']))  # noqa: E501
        if 'cig' in params:
            query_params.append(('cig', params['cig']))  # noqa: E501
        if 'stato' in params:
            query_params.append(('stato', params['stato']))  # noqa: E501
        if 'data_creazione_da' in params:
            query_params.append(('dataCreazioneDa', params['data_creazione_da']))  # noqa: E501
        if 'data_creazione_a' in params:
            query_params.append(('dataCreazioneA', params['data_creazione_a']))  # noqa: E501
        if 'codice_scheda' in params:
            query_params.append(('codiceScheda', params['codice_scheda']))  # noqa: E501
        if 'stato_scheda' in params:
            query_params.append(('statoScheda', params['stato_scheda']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('perPage', params['per_page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ricerca-scheda', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SchedaListaResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def id_scheda_verifica(self, body, **kwargs):  # noqa: E501
        """API Rest per la validazione di una Scheda dati. ASINCRONO - ASIMMETRICO  # noqa: E501

        L'ultimo istanza della Scheda inviata viene validata. La validazione è orchestrata da un Workflow Engine che, tramite il suo motore di regole, verifica sia se la scheda dati è coerente con lo stato dell’Appalto sia la correttezza sintattica dei dati di input.  ASINCRONO - ASIMMETRICO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_scheda_verifica(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VerificaSchedaRequest body: (required)
        :return: AckResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.id_scheda_verifica_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.id_scheda_verifica_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def id_scheda_verifica_with_http_info(self, body, **kwargs):  # noqa: E501
        """API Rest per la validazione di una Scheda dati. ASINCRONO - ASIMMETRICO  # noqa: E501

        L'ultimo istanza della Scheda inviata viene validata. La validazione è orchestrata da un Workflow Engine che, tramite il suo motore di regole, verifica sia se la scheda dati è coerente con lo stato dell’Appalto sia la correttezza sintattica dei dati di input.  ASINCRONO - ASIMMETRICO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_scheda_verifica_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VerificaSchedaRequest body: (required)
        :return: AckResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method id_scheda_verifica" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `id_scheda_verifica`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/verifica-scheda', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AckResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
