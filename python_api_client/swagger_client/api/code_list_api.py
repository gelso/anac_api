# coding: utf-8

"""
    Specifiche Servizi Appalto - OpenAPI 3.0

    Sono descritte le specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ufficio.uscp@anticorruzione.it
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CodeListApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def id_recupera_elenco_tipologiche(self, **kwargs):  # noqa: E501
        """API Rest per il recupero dell'elenco delle tipologiche disponibili. SINCRONO  # noqa: E501

        Il servizio restituiti un'elenco delle tipologiche disponibili. SINCRONO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_recupera_elenco_tipologiche(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: numero della pagina da visualizzare
        :param int per_page: numero di elementi per pagina
        :return: TipologicaListaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.id_recupera_elenco_tipologiche_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.id_recupera_elenco_tipologiche_with_http_info(**kwargs)  # noqa: E501
            return data

    def id_recupera_elenco_tipologiche_with_http_info(self, **kwargs):  # noqa: E501
        """API Rest per il recupero dell'elenco delle tipologiche disponibili. SINCRONO  # noqa: E501

        Il servizio restituiti un'elenco delle tipologiche disponibili. SINCRONO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_recupera_elenco_tipologiche_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: numero della pagina da visualizzare
        :param int per_page: numero di elementi per pagina
        :return: TipologicaListaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'per_page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method id_recupera_elenco_tipologiche" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('perPage', params['per_page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/recupera-elenco-tipologiche', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TipologicaListaResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def id_recupera_item_tipologica(self, id_tipologica, codice, **kwargs):  # noqa: E501
        """API Rest per il recupero di un singolo item di una tipologica. SINCRONO  # noqa: E501

        Il servizio restituiti il valore di un singolo item che si vuole recuperare dalla tipologica. SINCRONO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_recupera_item_tipologica(id_tipologica, codice, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_tipologica: Identificativo della tipologica (required)
        :param str codice: Codice del valore che si vuole recuperare dalla tipologica (required)
        :return: TipologicaItemResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.id_recupera_item_tipologica_with_http_info(id_tipologica, codice, **kwargs)  # noqa: E501
        else:
            (data) = self.id_recupera_item_tipologica_with_http_info(id_tipologica, codice, **kwargs)  # noqa: E501
            return data

    def id_recupera_item_tipologica_with_http_info(self, id_tipologica, codice, **kwargs):  # noqa: E501
        """API Rest per il recupero di un singolo item di una tipologica. SINCRONO  # noqa: E501

        Il servizio restituiti il valore di un singolo item che si vuole recuperare dalla tipologica. SINCRONO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_recupera_item_tipologica_with_http_info(id_tipologica, codice, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_tipologica: Identificativo della tipologica (required)
        :param str codice: Codice del valore che si vuole recuperare dalla tipologica (required)
        :return: TipologicaItemResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_tipologica', 'codice']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method id_recupera_item_tipologica" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_tipologica' is set
        if ('id_tipologica' not in params or
                params['id_tipologica'] is None):
            raise ValueError("Missing the required parameter `id_tipologica` when calling `id_recupera_item_tipologica`")  # noqa: E501
        # verify the required parameter 'codice' is set
        if ('codice' not in params or
                params['codice'] is None):
            raise ValueError("Missing the required parameter `codice` when calling `id_recupera_item_tipologica`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_tipologica' in params:
            query_params.append(('idTipologica', params['id_tipologica']))  # noqa: E501
        if 'codice' in params:
            query_params.append(('codice', params['codice']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/recupera-valore-tipologica', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TipologicaItemResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def id_recupera_tipologica(self, id_tipologica, **kwargs):  # noqa: E501
        """API Rest per il recupero di una specifica tipologica. SINCRONO  # noqa: E501

        Il servizio restituiti l'elenco di una singola tipologica. SINCRONO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_recupera_tipologica(id_tipologica, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_tipologica: Identificativo della tipologica (required)
        :param datetime data_inizio: Data di inizio (A date-time specified by ISO 8601 as profiled by RFC 3339)
        :param datetime data_fine: Data di fine (A date-time specified by ISO 8601 as profiled by RFC 3339)
        :param int page: numero della pagina da visualizzare
        :param int per_page: numero di elementi per pagina
        :return: TipologicaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.id_recupera_tipologica_with_http_info(id_tipologica, **kwargs)  # noqa: E501
        else:
            (data) = self.id_recupera_tipologica_with_http_info(id_tipologica, **kwargs)  # noqa: E501
            return data

    def id_recupera_tipologica_with_http_info(self, id_tipologica, **kwargs):  # noqa: E501
        """API Rest per il recupero di una specifica tipologica. SINCRONO  # noqa: E501

        Il servizio restituiti l'elenco di una singola tipologica. SINCRONO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_recupera_tipologica_with_http_info(id_tipologica, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_tipologica: Identificativo della tipologica (required)
        :param datetime data_inizio: Data di inizio (A date-time specified by ISO 8601 as profiled by RFC 3339)
        :param datetime data_fine: Data di fine (A date-time specified by ISO 8601 as profiled by RFC 3339)
        :param int page: numero della pagina da visualizzare
        :param int per_page: numero di elementi per pagina
        :return: TipologicaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_tipologica', 'data_inizio', 'data_fine', 'page', 'per_page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method id_recupera_tipologica" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_tipologica' is set
        if ('id_tipologica' not in params or
                params['id_tipologica'] is None):
            raise ValueError("Missing the required parameter `id_tipologica` when calling `id_recupera_tipologica`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_tipologica' in params:
            query_params.append(('idTipologica', params['id_tipologica']))  # noqa: E501
        if 'data_inizio' in params:
            query_params.append(('dataInizio', params['data_inizio']))  # noqa: E501
        if 'data_fine' in params:
            query_params.append(('dataFine', params['data_fine']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('perPage', params['per_page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/recupera-tipologica', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TipologicaResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
