# coding: utf-8

"""
    Specifiche Servizi Appalto - OpenAPI 3.0

    Sono descritte le specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ufficio.uscp@anticorruzione.it
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ComunicaAppaltoApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def id_appalto_cancella(self, body, **kwargs):  # noqa: E501
        """API Rest per l'eliminazione di un Appalto in lavorazione. SINCRONO  # noqa: E501

        Eliminazione logica di un Appalto e dei lotti in lavorazione. SINCRONO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_appalto_cancella(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CancellaAppaltoRequest body: (required)
        :return: CancellaAppaltoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.id_appalto_cancella_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.id_appalto_cancella_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def id_appalto_cancella_with_http_info(self, body, **kwargs):  # noqa: E501
        """API Rest per l'eliminazione di un Appalto in lavorazione. SINCRONO  # noqa: E501

        Eliminazione logica di un Appalto e dei lotti in lavorazione. SINCRONO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_appalto_cancella_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CancellaAppaltoRequest body: (required)
        :return: CancellaAppaltoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method id_appalto_cancella" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `id_appalto_cancella`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cancella-appalto', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CancellaAppaltoResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def id_appalto_conferma(self, body, **kwargs):  # noqa: E501
        """API Rest per la conferma dei dati di Appalto propedeutica alla generazione dei CIG. ASINCRONO - ASIMMETRICO  # noqa: E501

        Il servizio permette la conferma dei dati dell'Appalto inviati, avvia la fase di validazione e assegnazione dei CIG ed inizializza il Fascicolo Virtuale dell'Appalto. Con la successiva chiamata al servizio esito-operazione è possibile recuperare l'idAvviso per invocare il successivo servizio pubblica-avviso. ASINCRONO - ASIMMETRICO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_appalto_conferma(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfermaAppaltoRequest body: (required)
        :return: AckResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.id_appalto_conferma_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.id_appalto_conferma_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def id_appalto_conferma_with_http_info(self, body, **kwargs):  # noqa: E501
        """API Rest per la conferma dei dati di Appalto propedeutica alla generazione dei CIG. ASINCRONO - ASIMMETRICO  # noqa: E501

        Il servizio permette la conferma dei dati dell'Appalto inviati, avvia la fase di validazione e assegnazione dei CIG ed inizializza il Fascicolo Virtuale dell'Appalto. Con la successiva chiamata al servizio esito-operazione è possibile recuperare l'idAvviso per invocare il successivo servizio pubblica-avviso. ASINCRONO - ASIMMETRICO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_appalto_conferma_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfermaAppaltoRequest body: (required)
        :return: AckResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method id_appalto_conferma" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `id_appalto_conferma`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/conferma-appalto', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AckResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def id_appalto_crea(self, body, **kwargs):  # noqa: E501
        """API Rest per la creazione di un Appalto. SINCRONO  # noqa: E501

        Il servizio permette di inviare la scheda per l'inserimento della prima istanza in lavorazione di un Appalto nel formato ESPD-Request, per tutte le tipologie anche affidamento diretto per le pubblicazioni nazionali, nel formato eForm per le pubblicazioni europee in TED, più un formato definito da ANAC con le informazioni aggiuntive. SINCRONO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_appalto_crea(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreaAppaltoRequest body: Inserimento Appalto con tutti i dati aggiuntivi (required)
        :return: CreaAppaltoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.id_appalto_crea_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.id_appalto_crea_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def id_appalto_crea_with_http_info(self, body, **kwargs):  # noqa: E501
        """API Rest per la creazione di un Appalto. SINCRONO  # noqa: E501

        Il servizio permette di inviare la scheda per l'inserimento della prima istanza in lavorazione di un Appalto nel formato ESPD-Request, per tutte le tipologie anche affidamento diretto per le pubblicazioni nazionali, nel formato eForm per le pubblicazioni europee in TED, più un formato definito da ANAC con le informazioni aggiuntive. SINCRONO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_appalto_crea_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreaAppaltoRequest body: Inserimento Appalto con tutti i dati aggiuntivi (required)
        :return: CreaAppaltoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method id_appalto_crea" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `id_appalto_crea`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/crea-appalto', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreaAppaltoResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def id_appalto_dettaglio(self, **kwargs):  # noqa: E501
        """API Rest per il recupero del dettaglio dell'Appalto. SINCRONO  # noqa: E501

        Servizio per la consultazione delle informazioni di dettaglio di un Appalto e dei relativi Lotti. SINCRONO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_appalto_dettaglio(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_appalto: Identificativo univoco dell'Appalto definito da ANAC alternativo al CIG. (A UUID specified by FC4122).
        :param str cig: Identificativo univoco Gara-Lotto rilasciato da ANAC, alternativo all'idAppalto
        :return: ConsultaAppaltoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.id_appalto_dettaglio_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.id_appalto_dettaglio_with_http_info(**kwargs)  # noqa: E501
            return data

    def id_appalto_dettaglio_with_http_info(self, **kwargs):  # noqa: E501
        """API Rest per il recupero del dettaglio dell'Appalto. SINCRONO  # noqa: E501

        Servizio per la consultazione delle informazioni di dettaglio di un Appalto e dei relativi Lotti. SINCRONO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_appalto_dettaglio_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_appalto: Identificativo univoco dell'Appalto definito da ANAC alternativo al CIG. (A UUID specified by FC4122).
        :param str cig: Identificativo univoco Gara-Lotto rilasciato da ANAC, alternativo all'idAppalto
        :return: ConsultaAppaltoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_appalto', 'cig']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method id_appalto_dettaglio" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_appalto' in params:
            query_params.append(('idAppalto', params['id_appalto']))  # noqa: E501
        if 'cig' in params:
            query_params.append(('cig', params['cig']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/consulta-appalto', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConsultaAppaltoResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def id_appalto_modifica(self, body, **kwargs):  # noqa: E501
        """API Rest per la modifica dell'Appalto. SINCRONO  # noqa: E501

        Il servizio permette di inviare la scheda per sostituire la precedente istanza dell’Appalto in lavorazione. L'Appalto è nel formato ESPD-Request, per tutte le tipologie anche affidamento diretto per le pubblicazioni nazionali, nel formato eForm per le pubblicazioni europee in TED, più un formato definito da ANAC con le informazioni aggiuntive. SINCRONO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_appalto_modifica(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DatiAppaltoRequest body: Modifica dell'Appalto con tutti i dati aggiuntivi (required)
        :return: ModificaAppaltoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.id_appalto_modifica_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.id_appalto_modifica_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def id_appalto_modifica_with_http_info(self, body, **kwargs):  # noqa: E501
        """API Rest per la modifica dell'Appalto. SINCRONO  # noqa: E501

        Il servizio permette di inviare la scheda per sostituire la precedente istanza dell’Appalto in lavorazione. L'Appalto è nel formato ESPD-Request, per tutte le tipologie anche affidamento diretto per le pubblicazioni nazionali, nel formato eForm per le pubblicazioni europee in TED, più un formato definito da ANAC con le informazioni aggiuntive. SINCRONO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_appalto_modifica_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DatiAppaltoRequest body: Modifica dell'Appalto con tutti i dati aggiuntivi (required)
        :return: ModificaAppaltoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method id_appalto_modifica" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `id_appalto_modifica`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/modifica-appalto', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModificaAppaltoResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def id_appalto_ricerca(self, **kwargs):  # noqa: E501
        """API Rest per la ricerca delle Gare-Lotto dell'Appalto. SINCRONO  # noqa: E501

        Viene recuperata la lista con i dati di sintesi dell'Appalto e dei rispettivi lotti. Le informazioni restituite dal servizio saranno filtrate, oltre in base ai parametri di ricerca, anche in base agli appalti di competenza dell' RP e della SA per la quale sta operando. Almeno un filtro di ricerca deve essere valorizzato. SINCRONO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_appalto_ricerca(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str codice_appalto: Identificativo univoco dell'appalto definito dalla Stazione Appaltante
        :param str cig: Identificativo univoco Appalto-Lotto rilasciato da ANAC
        :param str lot_identifier: Id univoco del lotto generato dalla stazione appaltante - corrisponde al campo bt-137 - Purpose Lot Identifier del TED - Se valorizzato, il parametro richiedere obbligatoriamente la valorizzazione del codiceAppalto o cig.
        :param str stato: Codice Stato dell'Appalto - Se valorizzato, il parametro richiedere obbligatoriamente la valorizzazione di almeno un altro parametro - fare riferimento ai valori contenuti nel file [statoAppalto.json](https://raw.githubusercontent.com/anticorruzione/npa/main/docs/modello-dati/tipologiche/statoAppalto.json)
        :param datetime data_creazione_da: Data di crezione dell'Appalto - intervallo successivo (A date-time specified by ISO 8601 as profiled by RFC 3339)
        :param datetime data_creazione_a: Data di crezione dell'Appalto - intervallo precedente (A date-time specified by ISO 8601 as profiled by RFC 3339)
        :param int page: numero della pagina da visualizzare
        :param int per_page: numero di elementi per pagina
        :return: AppaltoListaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.id_appalto_ricerca_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.id_appalto_ricerca_with_http_info(**kwargs)  # noqa: E501
            return data

    def id_appalto_ricerca_with_http_info(self, **kwargs):  # noqa: E501
        """API Rest per la ricerca delle Gare-Lotto dell'Appalto. SINCRONO  # noqa: E501

        Viene recuperata la lista con i dati di sintesi dell'Appalto e dei rispettivi lotti. Le informazioni restituite dal servizio saranno filtrate, oltre in base ai parametri di ricerca, anche in base agli appalti di competenza dell' RP e della SA per la quale sta operando. Almeno un filtro di ricerca deve essere valorizzato. SINCRONO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_appalto_ricerca_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str codice_appalto: Identificativo univoco dell'appalto definito dalla Stazione Appaltante
        :param str cig: Identificativo univoco Appalto-Lotto rilasciato da ANAC
        :param str lot_identifier: Id univoco del lotto generato dalla stazione appaltante - corrisponde al campo bt-137 - Purpose Lot Identifier del TED - Se valorizzato, il parametro richiedere obbligatoriamente la valorizzazione del codiceAppalto o cig.
        :param str stato: Codice Stato dell'Appalto - Se valorizzato, il parametro richiedere obbligatoriamente la valorizzazione di almeno un altro parametro - fare riferimento ai valori contenuti nel file [statoAppalto.json](https://raw.githubusercontent.com/anticorruzione/npa/main/docs/modello-dati/tipologiche/statoAppalto.json)
        :param datetime data_creazione_da: Data di crezione dell'Appalto - intervallo successivo (A date-time specified by ISO 8601 as profiled by RFC 3339)
        :param datetime data_creazione_a: Data di crezione dell'Appalto - intervallo precedente (A date-time specified by ISO 8601 as profiled by RFC 3339)
        :param int page: numero della pagina da visualizzare
        :param int per_page: numero di elementi per pagina
        :return: AppaltoListaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['codice_appalto', 'cig', 'lot_identifier', 'stato', 'data_creazione_da', 'data_creazione_a', 'page', 'per_page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method id_appalto_ricerca" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'codice_appalto' in params:
            query_params.append(('codiceAppalto', params['codice_appalto']))  # noqa: E501
        if 'cig' in params:
            query_params.append(('cig', params['cig']))  # noqa: E501
        if 'lot_identifier' in params:
            query_params.append(('lotIdentifier', params['lot_identifier']))  # noqa: E501
        if 'stato' in params:
            query_params.append(('stato', params['stato']))  # noqa: E501
        if 'data_creazione_da' in params:
            query_params.append(('dataCreazioneDa', params['data_creazione_da']))  # noqa: E501
        if 'data_creazione_a' in params:
            query_params.append(('dataCreazioneA', params['data_creazione_a']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('perPage', params['per_page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ricerca-appalto', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppaltoListaResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def id_appalto_verifica(self, body, **kwargs):  # noqa: E501
        """API Rest per la validazione dell'Appalto. ASINCRONO - ASIMMETRICO  # noqa: E501

        L'ultima istanza di appalto inviata viene validata. In base alla tipologia dell'appalto viene eseguita una validazione sintattica dei dati di input dell'appalto (eForm, ESPDRequest, anacForm). ASINCRONO - ASIMMETRICO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_appalto_verifica(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VerificaAppaltoRequest body: (required)
        :return: AckResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.id_appalto_verifica_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.id_appalto_verifica_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def id_appalto_verifica_with_http_info(self, body, **kwargs):  # noqa: E501
        """API Rest per la validazione dell'Appalto. ASINCRONO - ASIMMETRICO  # noqa: E501

        L'ultima istanza di appalto inviata viene validata. In base alla tipologia dell'appalto viene eseguita una validazione sintattica dei dati di input dell'appalto (eForm, ESPDRequest, anacForm). ASINCRONO - ASIMMETRICO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_appalto_verifica_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VerificaAppaltoRequest body: (required)
        :return: AckResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method id_appalto_verifica" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `id_appalto_verifica`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/verifica-appalto', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AckResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def id_cig_recupera(self, id_appalto, **kwargs):  # noqa: E501
        """API Rest per il recupero dei CIG generati da ANAC e assegnati ai lotti dell’Appalto. SINCRONO  # noqa: E501

        Per un Appalto il servizio restituiti le coppie Lotto - CIG. SINCRONO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_cig_recupera(id_appalto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_appalto: Identificativo univoco dell'Appalto definito da ANAC (required)
        :param int page: numero della pagina da visualizzare
        :param int per_page: numero di elementi per pagina
        :return: CigListaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.id_cig_recupera_with_http_info(id_appalto, **kwargs)  # noqa: E501
        else:
            (data) = self.id_cig_recupera_with_http_info(id_appalto, **kwargs)  # noqa: E501
            return data

    def id_cig_recupera_with_http_info(self, id_appalto, **kwargs):  # noqa: E501
        """API Rest per il recupero dei CIG generati da ANAC e assegnati ai lotti dell’Appalto. SINCRONO  # noqa: E501

        Per un Appalto il servizio restituiti le coppie Lotto - CIG. SINCRONO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_cig_recupera_with_http_info(id_appalto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_appalto: Identificativo univoco dell'Appalto definito da ANAC (required)
        :param int page: numero della pagina da visualizzare
        :param int per_page: numero di elementi per pagina
        :return: CigListaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_appalto', 'page', 'per_page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method id_cig_recupera" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_appalto' is set
        if ('id_appalto' not in params or
                params['id_appalto'] is None):
            raise ValueError("Missing the required parameter `id_appalto` when calling `id_cig_recupera`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_appalto' in params:
            query_params.append(('idAppalto', params['id_appalto']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('perPage', params['per_page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/recupera-cig', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CigListaResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
