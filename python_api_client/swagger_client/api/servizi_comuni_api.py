# coding: utf-8

"""
    Specifiche Servizi Appalto - OpenAPI 3.0

    Sono descritte le specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ufficio.uscp@anticorruzione.it
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ServiziComuniApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def id_appalto_stato(self, **kwargs):  # noqa: E501
        """API Rest per il recupero dello stato dell'Appalto, del Lotto o del Contratto. SINCRONO  # noqa: E501

        Servizio per il recupero dello stato in cui si trova l’Appalto, il Lotto o il Contratto. Il compito dispositivo di aggiornare lo stato proveniente dai sistemi esterni, TED e/o PPL-ANAC, sarà in carico ad un task schedulato PCP. Pertanto il recupero dello stato da parte del servizio insiste su uno stato PCP che restituisce anche la data in cui il task schedulato ha effettuato il controllo sui sistemi esterni. SINCRONO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_appalto_stato(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_appalto: Identificativo univoco dell'Appalto definito da ANAC. Alternativo agli altri parametri di input.
        :param str cig: Identificativo univoco Gara-Lotto rilasciato da ANAC. Alternativo agli altri parametri di input.
        :param str id_contratto: Identificativo univoco del Contratto definito da ANAC. Alternativo agli altri parametri di input.
        :return: StatoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.id_appalto_stato_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.id_appalto_stato_with_http_info(**kwargs)  # noqa: E501
            return data

    def id_appalto_stato_with_http_info(self, **kwargs):  # noqa: E501
        """API Rest per il recupero dello stato dell'Appalto, del Lotto o del Contratto. SINCRONO  # noqa: E501

        Servizio per il recupero dello stato in cui si trova l’Appalto, il Lotto o il Contratto. Il compito dispositivo di aggiornare lo stato proveniente dai sistemi esterni, TED e/o PPL-ANAC, sarà in carico ad un task schedulato PCP. Pertanto il recupero dello stato da parte del servizio insiste su uno stato PCP che restituisce anche la data in cui il task schedulato ha effettuato il controllo sui sistemi esterni. SINCRONO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_appalto_stato_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_appalto: Identificativo univoco dell'Appalto definito da ANAC. Alternativo agli altri parametri di input.
        :param str cig: Identificativo univoco Gara-Lotto rilasciato da ANAC. Alternativo agli altri parametri di input.
        :param str id_contratto: Identificativo univoco del Contratto definito da ANAC. Alternativo agli altri parametri di input.
        :return: StatoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_appalto', 'cig', 'id_contratto']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method id_appalto_stato" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_appalto' in params:
            query_params.append(('idAppalto', params['id_appalto']))  # noqa: E501
        if 'cig' in params:
            query_params.append(('cig', params['cig']))  # noqa: E501
        if 'id_contratto' in params:
            query_params.append(('idContratto', params['id_contratto']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/stato-appalto', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatoResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def id_operazione_esito(self, id_appalto, tipo_operazione, tipo_ricerca, **kwargs):  # noqa: E501
        """API Rest per il recupero dell'esito dell'operazione. SINCRONO  # noqa: E501

        Il compito dispositivo di aggiornare l'esito delle operazioni provenienti dai sistemi esterni, TED e/o PPL-ANAC, sarà in carico ad un task schedulato PCP. Pertanto il recupero dell'esito operazione da parte del servizio insiste su uno stato dell'esito PCP che restituisce anche la data in cui il task schedulato ha effettuato il controllo sui sistemi esterni. SINCRONO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_operazione_esito(id_appalto, tipo_operazione, tipo_ricerca, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_appalto: identificativo univoco dell'Appalto definito da ANAC. (A UUID specified by RFC4122) (required)
        :param str tipo_operazione: Tipo operazione di cui si vuole conoscere l'esito - fare riferimento ai valori contenuti nel file [tipoOperazione.json](https://raw.githubusercontent.com/anticorruzione/npa/main/docs/modello-dati/tipologiche/tipoOperazione.json) (required)
        :param str tipo_ricerca: Codice Tipo di ricerca da eseguire - fare riferimento ai valori contenuti nel file [tipoRicercaOperazione.json](https://raw.githubusercontent.com/anticorruzione/npa/main/docs/modello-dati/tipologiche/tipoRicercaOperazione.json) (required)
        :param str esito: Codice sintetico esito operazione - fare riferimento ai valori contenuti nel file [esito.json](https://raw.githubusercontent.com/anticorruzione/npa/main/docs/modello-dati/tipologiche/esito.json)
        :return: EsitoOperazioneListaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.id_operazione_esito_with_http_info(id_appalto, tipo_operazione, tipo_ricerca, **kwargs)  # noqa: E501
        else:
            (data) = self.id_operazione_esito_with_http_info(id_appalto, tipo_operazione, tipo_ricerca, **kwargs)  # noqa: E501
            return data

    def id_operazione_esito_with_http_info(self, id_appalto, tipo_operazione, tipo_ricerca, **kwargs):  # noqa: E501
        """API Rest per il recupero dell'esito dell'operazione. SINCRONO  # noqa: E501

        Il compito dispositivo di aggiornare l'esito delle operazioni provenienti dai sistemi esterni, TED e/o PPL-ANAC, sarà in carico ad un task schedulato PCP. Pertanto il recupero dell'esito operazione da parte del servizio insiste su uno stato dell'esito PCP che restituisce anche la data in cui il task schedulato ha effettuato il controllo sui sistemi esterni. SINCRONO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_operazione_esito_with_http_info(id_appalto, tipo_operazione, tipo_ricerca, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_appalto: identificativo univoco dell'Appalto definito da ANAC. (A UUID specified by RFC4122) (required)
        :param str tipo_operazione: Tipo operazione di cui si vuole conoscere l'esito - fare riferimento ai valori contenuti nel file [tipoOperazione.json](https://raw.githubusercontent.com/anticorruzione/npa/main/docs/modello-dati/tipologiche/tipoOperazione.json) (required)
        :param str tipo_ricerca: Codice Tipo di ricerca da eseguire - fare riferimento ai valori contenuti nel file [tipoRicercaOperazione.json](https://raw.githubusercontent.com/anticorruzione/npa/main/docs/modello-dati/tipologiche/tipoRicercaOperazione.json) (required)
        :param str esito: Codice sintetico esito operazione - fare riferimento ai valori contenuti nel file [esito.json](https://raw.githubusercontent.com/anticorruzione/npa/main/docs/modello-dati/tipologiche/esito.json)
        :return: EsitoOperazioneListaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_appalto', 'tipo_operazione', 'tipo_ricerca', 'esito']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method id_operazione_esito" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_appalto' is set
        if ('id_appalto' not in params or
                params['id_appalto'] is None):
            raise ValueError("Missing the required parameter `id_appalto` when calling `id_operazione_esito`")  # noqa: E501
        # verify the required parameter 'tipo_operazione' is set
        if ('tipo_operazione' not in params or
                params['tipo_operazione'] is None):
            raise ValueError("Missing the required parameter `tipo_operazione` when calling `id_operazione_esito`")  # noqa: E501
        # verify the required parameter 'tipo_ricerca' is set
        if ('tipo_ricerca' not in params or
                params['tipo_ricerca'] is None):
            raise ValueError("Missing the required parameter `tipo_ricerca` when calling `id_operazione_esito`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_appalto' in params:
            query_params.append(('idAppalto', params['id_appalto']))  # noqa: E501
        if 'tipo_operazione' in params:
            query_params.append(('tipoOperazione', params['tipo_operazione']))  # noqa: E501
        if 'tipo_ricerca' in params:
            query_params.append(('tipoRicerca', params['tipo_ricerca']))  # noqa: E501
        if 'esito' in params:
            query_params.append(('esito', params['esito']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/esito-operazione', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EsitoOperazioneListaResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
