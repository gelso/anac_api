# coding: utf-8

"""
    Specifiche Servizi Appalto - OpenAPI 3.0

    Sono descritte le specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ufficio.uscp@anticorruzione.it
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PianificazioneAppaltoApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def id_piano_cancella(self, body, **kwargs):  # noqa: E501
        """API Rest per l'eliminazione di una Pianificazione in lavorazione. SINCRONO  # noqa: E501

        Eliminazione della Pianificazione in lavorazione. SINCRONO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_piano_cancella(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CancellaPianoRequest body: (required)
        :return: CancellaPianoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.id_piano_cancella_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.id_piano_cancella_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def id_piano_cancella_with_http_info(self, body, **kwargs):  # noqa: E501
        """API Rest per l'eliminazione di una Pianificazione in lavorazione. SINCRONO  # noqa: E501

        Eliminazione della Pianificazione in lavorazione. SINCRONO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_piano_cancella_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CancellaPianoRequest body: (required)
        :return: CancellaPianoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method id_piano_cancella" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `id_piano_cancella`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cancella-piano', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CancellaPianoResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def id_piano_conferma(self, body, **kwargs):  # noqa: E501
        """API Rest per la conferma dei dati inviati per una specifica Pianificazione. ASINCRONO - ASIMMETRICO  # noqa: E501

        Il servizio consente di confermare i dati inviati per una specifica Pianificazione e, qualora il tipo di scheda lo consente, avvia la fase di pubblicazione dell'avviso. Con la successiva chiamata al servizio esito-operazione è possibile recuperare l'idAvviso assegnato. ASINCRONO - ASIMMETRICO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_piano_conferma(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfermaPianoRequest body: (required)
        :return: AckResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.id_piano_conferma_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.id_piano_conferma_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def id_piano_conferma_with_http_info(self, body, **kwargs):  # noqa: E501
        """API Rest per la conferma dei dati inviati per una specifica Pianificazione. ASINCRONO - ASIMMETRICO  # noqa: E501

        Il servizio consente di confermare i dati inviati per una specifica Pianificazione e, qualora il tipo di scheda lo consente, avvia la fase di pubblicazione dell'avviso. Con la successiva chiamata al servizio esito-operazione è possibile recuperare l'idAvviso assegnato. ASINCRONO - ASIMMETRICO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_piano_conferma_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfermaPianoRequest body: (required)
        :return: AckResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method id_piano_conferma" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `id_piano_conferma`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/conferma-piano', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AckResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def id_piano_crea(self, body, **kwargs):  # noqa: E501
        """API Rest per la creazione della Pianificazione. SINCRONO  # noqa: E501

        Il servizio permette di inviare la scheda per l'inserimento della Pianificazione nel formato definito da Anac e dell'eventuale avviso di pre-informazione in TED nel formato eForm. SINCRONO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_piano_crea(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreaPianoRequest body: Inserimento piano con tutti i dati aggiuntivi (required)
        :return: CreaPianoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.id_piano_crea_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.id_piano_crea_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def id_piano_crea_with_http_info(self, body, **kwargs):  # noqa: E501
        """API Rest per la creazione della Pianificazione. SINCRONO  # noqa: E501

        Il servizio permette di inviare la scheda per l'inserimento della Pianificazione nel formato definito da Anac e dell'eventuale avviso di pre-informazione in TED nel formato eForm. SINCRONO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_piano_crea_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreaPianoRequest body: Inserimento piano con tutti i dati aggiuntivi (required)
        :return: CreaPianoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method id_piano_crea" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `id_piano_crea`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/crea-piano', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreaPianoResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def id_piano_dettaglio(self, id_pianificazione, **kwargs):  # noqa: E501
        """API Rest per il recupero del dettaglio della Pianificazione. SINCRONO  # noqa: E501

        API Rest per il recupero del dettaglio della Pianificazione. SINCRONO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_piano_dettaglio(id_pianificazione, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_pianificazione: identificativo univoco della Pianificazione definito da ANAC. (A UUID specified by RFC4122) (required)
        :return: ConsultaPianoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.id_piano_dettaglio_with_http_info(id_pianificazione, **kwargs)  # noqa: E501
        else:
            (data) = self.id_piano_dettaglio_with_http_info(id_pianificazione, **kwargs)  # noqa: E501
            return data

    def id_piano_dettaglio_with_http_info(self, id_pianificazione, **kwargs):  # noqa: E501
        """API Rest per il recupero del dettaglio della Pianificazione. SINCRONO  # noqa: E501

        API Rest per il recupero del dettaglio della Pianificazione. SINCRONO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_piano_dettaglio_with_http_info(id_pianificazione, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_pianificazione: identificativo univoco della Pianificazione definito da ANAC. (A UUID specified by RFC4122) (required)
        :return: ConsultaPianoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_pianificazione']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method id_piano_dettaglio" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_pianificazione' is set
        if ('id_pianificazione' not in params or
                params['id_pianificazione'] is None):
            raise ValueError("Missing the required parameter `id_pianificazione` when calling `id_piano_dettaglio`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_pianificazione' in params:
            query_params.append(('idPianificazione', params['id_pianificazione']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/consulta-piano', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConsultaPianoResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def id_piano_modifica(self, body, **kwargs):  # noqa: E501
        """API Rest per la modifica della Pianificazione. SINCRONO  # noqa: E501

        Il servizio permette di inviare la scheda per sostituire la precedentemente Pianificazione in lavorazione. SINCRONO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_piano_modifica(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DatiPianoRequest body: Oggetto generico in ingresso al servizio (required)
        :return: ModificaPianoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.id_piano_modifica_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.id_piano_modifica_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def id_piano_modifica_with_http_info(self, body, **kwargs):  # noqa: E501
        """API Rest per la modifica della Pianificazione. SINCRONO  # noqa: E501

        Il servizio permette di inviare la scheda per sostituire la precedentemente Pianificazione in lavorazione. SINCRONO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_piano_modifica_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DatiPianoRequest body: Oggetto generico in ingresso al servizio (required)
        :return: ModificaPianoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method id_piano_modifica" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `id_piano_modifica`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/modifica-piano', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModificaPianoResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def id_piano_ricerca(self, **kwargs):  # noqa: E501
        """API Rest per la ricerca delle Pianificazioni. SINCRONO  # noqa: E501

        Viene recuperata la lista con i dati di sintesi delle Pianificazioni.Le informazioni restituite dal servizio saranno filtrate, oltre in base ai parametri di ricerca, anche in base alla competenza della SA che sta operando. Almeno un filtro di ricerca deve essere valorizzato. SINCRONO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_piano_ricerca(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stato: Codice stato della Pianificazione - se valorizzato, il parametro richiedere obbligatoriamente la valorizzazione di almeno un altro parametro -  fare riferimento ai valori contenuti nel file [statoPiano.json](https://raw.githubusercontent.com/anticorruzione/npa/main/docs/modello-dati/tipologiche/statoPiano.json)
        :param str tipo: Codice tipologia della Pianificazione - fare riferimento ai valori contenuti nel file [tipoPiano.json](https://raw.githubusercontent.com/anticorruzione/npa/main/docs/modello-dati/tipologiche/tipoPiano.json)
        :param datetime data_creazione_da: Data di crezione della Pianificazione - intervallo successivo (A date-time specified by ISO 8601 as profiled by RFC 3339)
        :param datetime data_creazione_a: Data di crezione della Pianificazione - intervallo precedente (A date-time specified by ISO 8601 as profiled by RFC 3339)
        :param int page: numero della pagina da visualizzare
        :param int per_page: numero di elementi per pagina
        :return: PianoListaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.id_piano_ricerca_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.id_piano_ricerca_with_http_info(**kwargs)  # noqa: E501
            return data

    def id_piano_ricerca_with_http_info(self, **kwargs):  # noqa: E501
        """API Rest per la ricerca delle Pianificazioni. SINCRONO  # noqa: E501

        Viene recuperata la lista con i dati di sintesi delle Pianificazioni.Le informazioni restituite dal servizio saranno filtrate, oltre in base ai parametri di ricerca, anche in base alla competenza della SA che sta operando. Almeno un filtro di ricerca deve essere valorizzato. SINCRONO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_piano_ricerca_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stato: Codice stato della Pianificazione - se valorizzato, il parametro richiedere obbligatoriamente la valorizzazione di almeno un altro parametro -  fare riferimento ai valori contenuti nel file [statoPiano.json](https://raw.githubusercontent.com/anticorruzione/npa/main/docs/modello-dati/tipologiche/statoPiano.json)
        :param str tipo: Codice tipologia della Pianificazione - fare riferimento ai valori contenuti nel file [tipoPiano.json](https://raw.githubusercontent.com/anticorruzione/npa/main/docs/modello-dati/tipologiche/tipoPiano.json)
        :param datetime data_creazione_da: Data di crezione della Pianificazione - intervallo successivo (A date-time specified by ISO 8601 as profiled by RFC 3339)
        :param datetime data_creazione_a: Data di crezione della Pianificazione - intervallo precedente (A date-time specified by ISO 8601 as profiled by RFC 3339)
        :param int page: numero della pagina da visualizzare
        :param int per_page: numero di elementi per pagina
        :return: PianoListaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stato', 'tipo', 'data_creazione_da', 'data_creazione_a', 'page', 'per_page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method id_piano_ricerca" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'stato' in params:
            query_params.append(('stato', params['stato']))  # noqa: E501
        if 'tipo' in params:
            query_params.append(('tipo', params['tipo']))  # noqa: E501
        if 'data_creazione_da' in params:
            query_params.append(('dataCreazioneDa', params['data_creazione_da']))  # noqa: E501
        if 'data_creazione_a' in params:
            query_params.append(('dataCreazioneA', params['data_creazione_a']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('perPage', params['per_page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ricerca-piano', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PianoListaResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def id_piano_verifica(self, body, **kwargs):  # noqa: E501
        """API Rest per la validazione della Pianificazione. ASINCRONO - ASIMMETRICO  # noqa: E501

        L'ultima istanza della Pianificazione inviata viene validata. In base alla tipologia della Pianificazione viene eseguita una validazione sintattica dei dati di input. ASINCRONO - ASIMMETRICO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_piano_verifica(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VerificaPianoRequest body: (required)
        :return: AckResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.id_piano_verifica_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.id_piano_verifica_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def id_piano_verifica_with_http_info(self, body, **kwargs):  # noqa: E501
        """API Rest per la validazione della Pianificazione. ASINCRONO - ASIMMETRICO  # noqa: E501

        L'ultima istanza della Pianificazione inviata viene validata. In base alla tipologia della Pianificazione viene eseguita una validazione sintattica dei dati di input. ASINCRONO - ASIMMETRICO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_piano_verifica_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VerificaPianoRequest body: (required)
        :return: AckResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method id_piano_verifica" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `id_piano_verifica`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/verifica-piano', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AckResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
